/*
 *
 * Copyright (C) German Aerospace Center e.V. (https://www.dlr.de)
 * Institute of Transportation Systems. (https://www.dlr.de/ts/)
 *
 * 
 * Eclipse ADORe, Automated Driving Open Research https://eclipse.org/adore
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 *
 * 
 * File automatically generated with DLR Wind v2
 * 
 * This file belongs to the DLR Wind project de.dlr.ts.v2x:dsrc_v2:4.0
 * 
 * Module: IVIM_PDU_Descriptions {itu-t(0) identified-organization(4) etsi(0) itsDomain(5) 
 *         wg1(1) en(103301) ivim(2) version2(2)}
 * 
 * For support contact v2x-ts@dlr.de
 * 
 *
 */
#include <dsrc_v2_ivim_pdu_descriptions_wer_decoder.h>


/**
 *
 */
namespace wind
{
    namespace decoder_dsrc_v2_ivim_pdu_descriptions
    {        
        
        #if WIND_ROS_VERSION == 1
          bool WerDecoder::decode(dsrc_v2_ivim_pdu_descriptions_msgs::IVIM* ros, const uint8_t *buffer)
        #else
          bool WerDecoder::decode(dsrc_v2_ivim_pdu_descriptions_msgs::msg::IVIM* ros, const uint8_t *buffer)
        #endif
        {
            const uint8_t *start = buffer;
            int64_t __aux64__;
	
    // IVIM  SEQUENCE
        //  header     ItsPduHeader     
        //  ivi        IviStructure     
    
    // Field name: hheader
        // ItsPduHeader  SEQUENCE
            //  protocolVersion ItsPduHeader_protocolVersion     
            //  messageID       ItsPduHeader_messageID           
            //  stationID       StationID                        
        
        // Field name: protocol_version
        // Integer
        // UINT8  min(0) max(255) span(256) datatype(UInt8)
        uint8_t* _tmp_6225 = (uint8_t*) buffer++;
        __aux64__ = *_tmp_6225;
        ros->hheader.protocol_version.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m005727\033[0m| " << tools::getTypeName(ros->hheader.protocol_version.value) << 
                         " hheader.protocol_version.value: " << static_cast<int>(ros->hheader.protocol_version.value);
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.protocol_version.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
            return false;
        }
        
        // Field name: message_id
        // Integer
        // UINT8  min(0) max(255) span(256) datatype(UInt8)
        uint8_t* _tmp_6226 = (uint8_t*) buffer++;
        __aux64__ = *_tmp_6226;
        ros->hheader.message_id.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m005728\033[0m| " << tools::getTypeName(ros->hheader.message_id.value) << 
                         " hheader.message_id.value: " << static_cast<int>(ros->hheader.message_id.value);
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 255) {
            logger->warning() << "Error: Value in 'hheader.message_id.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
            return false;
        }
        
        // Field name: station_id
        // Integer
        // UINT32  min(0) max(4294967295) span(4294967296) datatype(UInt32)
        uint32_t* _tmp_6227 = (uint32_t*) buffer; buffer += 4;
        __aux64__ = *_tmp_6227;
        ros->hheader.station_id.value = __aux64__;
        
        if(debug) {
            logger->debug() << "|\033[38;5;94m005729\033[0m| " << tools::getTypeName(ros->hheader.station_id.value) << 
                         " hheader.station_id.value: " << ros->hheader.station_id.value;
        }
        
        // ******************* MIN validator *******************
        if(VALIDATORS_ENABLED && __aux64__ < 0) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
            return false;
        }
        // ******************* MAX validator *******************
        if(VALIDATORS_ENABLED && __aux64__ > 4294967295) {
            logger->warning() << "Error: Value in 'hheader.station_id.value' " << (__aux64__) << " exceeds max allowable (4294967295); message dropped.";
            return false;
        }
    
    // Field name: ivi
        // IviStructure  SEQUENCE
            //  mandatory  IVIManagementContainer     
            //  optional   IviStructure_optional    OPTIONAL  
        if(*(buffer++)) { 
            dsrc_v2_ivi_msgs::msg::IviStructureOptional _tmp_6228;
            ros->ivi.optional.push_back(_tmp_6228);
        
            if(debug)
                logger->debug() << "|\033[38;5;94m005730\033[0m| ros->ivi.optional " << tools::green("present");
        }
        
        // Field name: mandatory
            // IVIManagementContainer  SEQUENCE
                //  serviceProviderId       Provider                                          
                //  iviIdentificationNumber IviIdentificationNumber                           
                //  timeStamp               TimestampIts                                    OPTIONAL  
                //  validFrom               TimestampIts                                    OPTIONAL  
                //  validTo                 TimestampIts                                    OPTIONAL  
                //  connectedIviStructures  IVIManagementContainer_connectedIviStructures   OPTIONAL  
                //  iviStatus               IviStatus                                         
                //  ...
            uint8_t* _ext_flag_3034 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m005731\033[0m| Reading ext flag from ros->ivi.mandatory.: " << int(*_ext_flag_3034);
            }
            
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_6229;
                ros->ivi.mandatory.time_stamp.push_back(_tmp_6229);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m005732\033[0m| ros->ivi.mandatory.time_stamp " << tools::green("present");
            }
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_6230;
                ros->ivi.mandatory.valid_from.push_back(_tmp_6230);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m005733\033[0m| ros->ivi.mandatory.valid_from " << tools::green("present");
            }
            if(*(buffer++)) { 
                its_container_v1_its_container_msgs::msg::TimestampIts _tmp_6231;
                ros->ivi.mandatory.valid_to.push_back(_tmp_6231);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m005734\033[0m| ros->ivi.mandatory.valid_to " << tools::green("present");
            }
            if(*(buffer++)) { 
                dsrc_v2_ivi_msgs::msg::IVIManagementContainerConnectedIviStructures _tmp_6232;
                ros->ivi.mandatory.connected_ivi_structures.push_back(_tmp_6232);
            
                if(debug)
                    logger->debug() << "|\033[38;5;94m005735\033[0m| ros->ivi.mandatory.connected_ivi_structures " << tools::green("present");
            }
            
            // Field name: service_provider_id
                // Provider  SEQUENCE
                    //  countryCode        CountryCode          
                    //  providerIdentifier IssuerIdentifier     
                
                // Field name: country_code
                // BitString
                // BIT_STRING  min(10) max(10) span(1)
                uint8_t* _tmp_6233 = (uint8_t*)buffer;
                __aux64__ = *_tmp_6233 + 10;
                buffer += 1;
                
                if(debug)
                    logger->debug() << "|\033[38;5;94m005736\033[0m| ivi.mandatory.service_provider_id.country_code.value: " << __aux64__;
                
                int _if__tmp_6233 = __aux64__;
                for(int w = 0; w < _if__tmp_6233; w++) {
                    uint8_t __c__;
                    ros->ivi.mandatory.service_provider_id.country_code.values.push_back(__c__);
                    uint8_t* __b__ = (uint8_t*)buffer++;
                    ros->ivi.mandatory.service_provider_id.country_code.values[w] = (*__b__ == 1);
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 10) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.country_code.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                    return false;
                }
                
                // Field name: provider_identifier
                // Integer
                // UINT16  min(0) max(16383) span(16384) datatype(UInt16)
                uint16_t* _tmp_6234 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = *_tmp_6234;
                ros->ivi.mandatory.service_provider_id.provider_identifier.value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005737\033[0m| " << tools::getTypeName(ros->ivi.mandatory.service_provider_id.provider_identifier.value) << 
                                 " ivi.mandatory.service_provider_id.provider_identifier.value: " << ros->ivi.mandatory.service_provider_id.provider_identifier.value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.service_provider_id.provider_identifier.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                    return false;
                }
            
            // Field name: ivi_identification_number
            // Integer
            // UINT16  min(1) max(32767) span(32767) datatype(UInt16)
            uint8_t* _ext_flag_3035 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.ivi_identification_number.
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m005738\033[0m| Reading ext flag from ros->ivi.mandatory.ivi_identification_number.: " << int(*_ext_flag_3035);
            }
            
            if(*_ext_flag_3035) {
                uint8_t* _tmp_6236 = (uint8_t*) buffer++;
                
                if(*_tmp_6236) {
                    uint64_t* _tmp_6237 = (uint64_t*)buffer; buffer += 8;
                    __aux64__ = *_tmp_6237;
                    __aux64__ += INT64_MIN;
                    ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
                }
                else
                {
                    uint32_t* _tmp_6237 = (uint32_t*) buffer; buffer += 4;
                    __aux64__ = *_tmp_6237;
                    __aux64__ += INT32_MIN;
                    ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
                }
            }
            else
            {
                uint16_t* _tmp_6235 = (uint16_t*) buffer; buffer += 2;
                __aux64__ = *_tmp_6235;
                __aux64__ += 1;
                ros->ivi.mandatory.ivi_identification_number.value = __aux64__;
            
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005739\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_identification_number.value) << 
                                 " ivi.mandatory.ivi_identification_number.value: " << ros->ivi.mandatory.ivi_identification_number.value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.ivi_identification_number.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.ivi_identification_number.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                    return false;
                }
                
            }
            
            if(ros->ivi.mandatory.time_stamp.size() != 0) {
                // Field name: time_stamp
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_6238 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_6238;
                ros->ivi.mandatory.time_stamp[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005740\033[0m| " << tools::getTypeName(ros->ivi.mandatory.time_stamp[0].value) << 
                                 " ivi.mandatory.time_stamp[0].value: " << ros->ivi.mandatory.time_stamp[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.time_stamp[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.valid_from.size() != 0) {
                // Field name: valid_from
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_6239 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_6239;
                ros->ivi.mandatory.valid_from[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005741\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_from[0].value) << 
                                 " ivi.mandatory.valid_from[0].value: " << ros->ivi.mandatory.valid_from[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_from[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.valid_to.size() != 0) {
                // Field name: valid_to
                // Integer
                // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                uint64_t* _tmp_6240 = (uint64_t*)buffer; buffer += 8;
                __aux64__ = *_tmp_6240;
                ros->ivi.mandatory.valid_to[0].value = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005742\033[0m| " << tools::getTypeName(ros->ivi.mandatory.valid_to[0].value) << 
                                 " ivi.mandatory.valid_to[0].value: " << ros->ivi.mandatory.valid_to[0].value;
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.valid_to[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                    return false;
                }
            }
            
            if(ros->ivi.mandatory.connected_ivi_structures.size() != 0) {
                // Field name: connected_ivi_structures
                // SequenceOf
                // Data Type UInt8
                // SEQUENCE_OF  min(1) max(8) span(8)
                int16_t* _tmp_6241 = (int16_t*)buffer;
                buffer += 2;
                __aux64__ = *_tmp_6241;
                __aux64__ += 1;     // +min
                
                int _if__tmp_6241 = __aux64__;
                
                if(debug) {
                    logger->debug() << "|\033[38;5;94m005743\033[0m| SequenceOf ros->ivi.mandatory.connected_ivi_structures[0]. size: " << int(*_tmp_6241);
                }
                
                // ******************* MIN validator *******************
                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                    return false;
                }
                // ******************* MAX validator *******************
                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                    logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                    return false;
                }
                
                
                for(int x = 0; x < _if__tmp_6241; x++) {
                    dsrc_v2_ivi_msgs::msg::IviIdentificationNumber seqof_x;  // INTEGER
                    ros->ivi.mandatory.connected_ivi_structures[0].elements.push_back(seqof_x);
                
                    // Integer
                    // UINT16  min(1) max(32767) span(32767) datatype(UInt16)
                    uint8_t* _ext_flag_3036 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.mandatory.connected_ivi_structures[0].elements[x].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m005744\033[0m| Reading ext flag from ros->ivi.mandatory.connected_ivi_structures[0].elements[x].: " << int(*_ext_flag_3036);
                    }
                    
                    if(*_ext_flag_3036) {
                        uint8_t* _tmp_6243 = (uint8_t*) buffer++;
                        
                        if(*_tmp_6243) {
                            uint64_t* _tmp_6244 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = *_tmp_6244;
                            __aux64__ += INT64_MIN;
                            ros->ivi.mandatory.connected_ivi_structures[0].elements[x].value = __aux64__;
                        }
                        else
                        {
                            uint32_t* _tmp_6244 = (uint32_t*) buffer; buffer += 4;
                            __aux64__ = *_tmp_6244;
                            __aux64__ += INT32_MIN;
                            ros->ivi.mandatory.connected_ivi_structures[0].elements[x].value = __aux64__;
                        }
                    }
                    else
                    {
                        uint16_t* _tmp_6242 = (uint16_t*) buffer; buffer += 2;
                        __aux64__ = *_tmp_6242;
                        __aux64__ += 1;
                        ros->ivi.mandatory.connected_ivi_structures[0].elements[x].value = __aux64__;
                    
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m005745\033[0m| " << tools::getTypeName(ros->ivi.mandatory.connected_ivi_structures[0].elements[x].value) << 
                                         " ivi.mandatory.connected_ivi_structures[0].elements[x].value: " << ros->ivi.mandatory.connected_ivi_structures[0].elements[x].value;
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].elements[x].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                            logger->warning() << "Error: Value in 'ivi.mandatory.connected_ivi_structures[0].elements[x].value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                            return false;
                        }
                        
                    }
                    
                    
                }
            }
            
            // Field name: ivi_status
            // Integer
            // UINT8  min(0) max(7) span(8) datatype(UInt8)
            uint8_t* _tmp_6245 = (uint8_t*) buffer++;
            __aux64__ = *_tmp_6245;
            ros->ivi.mandatory.ivi_status.value = __aux64__;
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m005746\033[0m| " << tools::getTypeName(ros->ivi.mandatory.ivi_status.value) << 
                             " ivi.mandatory.ivi_status.value: " << static_cast<int>(ros->ivi.mandatory.ivi_status.value);
            }
            
            // ******************* MIN validator *******************
            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                return false;
            }
            // ******************* MAX validator *******************
            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                logger->warning() << "Error: Value in 'ivi.mandatory.ivi_status.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                return false;
            }
            if(*_ext_flag_3034) { // from ros->ivi.mandatory. 
                uint8_t* _tmp_6246 = (uint8_t*) buffer++;  // number of extensions
                bool _array_71[*_tmp_6246];
                
                if(debug)
                    logger->debug() << "|\033[38;5;94m005747\033[0m| Reading number of exts from ros->ivi.mandatory.: " << static_cast<unsigned int>(*_tmp_6246);
                
                // Extensions bytemap
                for(int i = 0; i < *_tmp_6246; i++)
                    _array_71[i] = (*buffer++) != 0;
                
                // Discarding unknown OpenType containers
                for(int i = 0; i < *_tmp_6246; i++) {
                    uint16_t* _tmp_6247 = (uint16_t*)buffer;  // OpenType length
                    buffer += 2;
                
                    if(debug) {
                    }
                
                    for(int i = 0; i < *_tmp_6247; i++)
                        buffer++;
                }
                
            }
        
        if(ros->ivi.optional.size() != 0) {
            // Field name: optional
            // SequenceOf
            // Data Type UInt8
            // SEQUENCE_OF  min(1) max(8) span(8)
            uint8_t* _ext_flag_3037 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m005748\033[0m| Reading ext flag from ros->ivi.optional[0].: " << int(*_ext_flag_3037);
            }
            
            int16_t* _tmp_6248 = (int16_t*)buffer;
            buffer += 2;
            __aux64__ = *_tmp_6248;
            __aux64__ += 1;     // +min
            
            int _if__tmp_6248 = __aux64__;
            
            if(debug) {
                logger->debug() << "|\033[38;5;94m005749\033[0m| SequenceOf ros->ivi.optional[0]. size: " << int(*_tmp_6248);
            }
            
            // ******************* MIN validator *******************
            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                logger->warning() << "Error: Value in 'ivi.optional[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                return false;
            }
            // ******************* MAX validator *******************
            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                logger->warning() << "Error: Value in 'ivi.optional[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                return false;
            }
            
            
            for(int y = 0; y < _if__tmp_6248; y++) {
                dsrc_v2_ivi_msgs::msg::IviContainer seqof_y;  // CHOICE
                ros->ivi.optional[0].elements.push_back(seqof_y);
            
                // Choice
                uint8_t* _ext_flag_3038 = (uint8_t*)buffer++; // ext flag
                
                   // #0  glc   GeographicLocationContainer   
                   // #1  giv   GeneralIviContainer   
                   // #2  rcc   RoadConfigurationContainer   
                   // #3  tc   TextContainer   
                   // #4  lac   LayoutContainer   
                uint8_t _choice_200 = *(buffer++);
                
                if(*_ext_flag_3038)
                    _choice_200 += 4 + 1; // Ext addition
                
                if(_choice_200 == 0) {
                    dsrc_v2_ivi_msgs::msg::GeographicLocationContainer _tmp_6249;
                    ros->ivi.optional[0].elements[y].glc.push_back(_tmp_6249);
                
                        // GeographicLocationContainer  SEQUENCE
                            //  referencePosition        ReferencePosition                     
                            //  referencePositionTime    TimestampIts                        OPTIONAL  
                            //  referencePositionHeading Heading                             OPTIONAL  
                            //  referencePositionSpeed   Speed                               OPTIONAL  
                            //  parts                    GeographicLocationContainer_parts     
                            //  ...
                        uint8_t* _ext_flag_3039 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m005750\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].: " << int(*_ext_flag_3039);
                        }
                        
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::TimestampIts _tmp_6250;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position_time.push_back(_tmp_6250);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005751\033[0m| ros->ivi.optional[0].elements[y].glc[0].reference_position_time " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::Heading _tmp_6251;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position_heading.push_back(_tmp_6251);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005752\033[0m| ros->ivi.optional[0].elements[y].glc[0].reference_position_heading " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            its_container_v1_its_container_msgs::msg::Speed _tmp_6252;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position_speed.push_back(_tmp_6252);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005753\033[0m| ros->ivi.optional[0].elements[y].glc[0].reference_position_speed " << tools::green("present");
                        }
                        
                        // Field name: reference_position
                            // ReferencePosition  SEQUENCE
                                //  latitude                  Latitude                 
                                //  longitude                 Longitude                
                                //  positionConfidenceEllipse PosConfidenceEllipse     
                                //  altitude                  Altitude                 
                            
                            // Field name: latitude
                            // Real
                            // Double
                            // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                            uint32_t* _tmp_6253 = (uint32_t*) buffer; buffer += 4;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value = *_tmp_6253;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value += -900000000;
                            __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value /= 1.0E7;
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                return false;
                            }
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005754\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value) << " ivi.optional[0].elements[y].glc[0].reference_position.latitude: " <<
                                             ros->ivi.optional[0].elements[y].glc[0].reference_position.latitude.value << " (" << __aux64__ << ")";
                            }
                            
                            // Field name: longitude
                            // Real
                            // Double
                            // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                            uint32_t* _tmp_6254 = (uint32_t*) buffer; buffer += 4;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value = *_tmp_6254;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value += -1800000000;
                            __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value /= 1.0E7;
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                return false;
                            }
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005755\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value) << " ivi.optional[0].elements[y].glc[0].reference_position.longitude: " <<
                                             ros->ivi.optional[0].elements[y].glc[0].reference_position.longitude.value << " (" << __aux64__ << ")";
                            }
                            
                            // Field name: position_confidence_ellipse
                                // PosConfidenceEllipse  SEQUENCE
                                    //  semiMajorConfidence  SemiAxisLength     
                                    //  semiMinorConfidence  SemiAxisLength     
                                    //  semiMajorOrientation HeadingValue       
                                
                                // Field name: semi_major_confidence
                                // Integer
                                // UINT16  min(0) max(4095) span(4096) datatype(UInt16)
                                uint16_t* _tmp_6255 = (uint16_t*) buffer; buffer += 2;
                                __aux64__ = *_tmp_6255;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005756\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value) << 
                                                 " ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value: " << ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value;
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_confidence.value' " << (__aux64__) << " exceeds max allowable (4095); message dropped.";
                                    return false;
                                }
                                
                                // Field name: semi_minor_confidence
                                // Integer
                                // UINT16  min(0) max(4095) span(4096) datatype(UInt16)
                                uint16_t* _tmp_6256 = (uint16_t*) buffer; buffer += 2;
                                __aux64__ = *_tmp_6256;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005757\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value) << 
                                                 " ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value: " << ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value;
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4095) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_minor_confidence.value' " << (__aux64__) << " exceeds max allowable (4095); message dropped.";
                                    return false;
                                }
                                
                                // Field name: semi_major_orientation
                                // Real
                                // Float
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                uint16_t* _tmp_6257 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value = *_tmp_6257;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005758\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value) << " ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position.position_confidence_ellipse.semi_major_orientation.value << " (" << __aux64__ << ")";
                                }
                            
                            // Field name: altitude
                                // Altitude  SEQUENCE
                                    //  altitudeValue      AltitudeValue          
                                    //  altitudeConfidence AltitudeConfidence     
                                
                                // Field name: altitude_value
                                // Real
                                // Float
                                // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                uint32_t* _tmp_6258 = (uint32_t*) buffer; buffer += 4;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value = *_tmp_6258;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value += -100000;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005759\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value) << " ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: altitude_confidence
                                // Enumerated
                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                uint8_t* _tmp_6259 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_6259;
                                __aux64__ += 0;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value = __aux64__;
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                    return false;
                                }
                                
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005760\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value) << 
                                                 " ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].reference_position.altitude.altitude_confidence.value);
                                }
                        
                        if(ros->ivi.optional[0].elements[y].glc[0].reference_position_time.size() != 0) {
                            // Field name: reference_position_time
                            // Integer
                            // INT64  min(0) max(4398046511103) span(4398046511104) datatype(Int64)
                            uint64_t* _tmp_6260 = (uint64_t*)buffer; buffer += 8;
                            __aux64__ = *_tmp_6260;
                            ros->ivi.optional[0].elements[y].glc[0].reference_position_time[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005761\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position_time[0].value) << 
                                             " ivi.optional[0].elements[y].glc[0].reference_position_time[0].value: " << ros->ivi.optional[0].elements[y].glc[0].reference_position_time[0].value;
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4398046511103) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_time[0].value' " << (__aux64__) << " exceeds max allowable (4398046511103); message dropped.";
                                return false;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[y].glc[0].reference_position_heading.size() != 0) {
                            // Field name: reference_position_heading
                                // Heading  SEQUENCE
                                    //  headingValue      HeadingValue          
                                    //  headingConfidence HeadingConfidence     
                                
                                // Field name: heading_value
                                // Real
                                // Float
                                // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                uint16_t* _tmp_6261 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value = *_tmp_6261;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005762\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value) << " ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: heading_confidence
                                // Real
                                // Float
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(10.0) dataType(Float)
                                uint8_t* _tmp_6262 = (uint8_t*) buffer++;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value = *_tmp_6262;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value += 1;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value /= 10.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005763\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value) << " ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position_heading[0].heading_confidence.value << " (" << __aux64__ << ")";
                                }
                        }
                        
                        if(ros->ivi.optional[0].elements[y].glc[0].reference_position_speed.size() != 0) {
                            // Field name: reference_position_speed
                                // Speed  SEQUENCE
                                    //  speedValue      SpeedValue          
                                    //  speedConfidence SpeedConfidence     
                                
                                // Field name: speed_value
                                // Real
                                // Float
                                // FLOAT  min(0) max(16383) span(16384) scaleDivisor(100.0) dataType(Float)
                                uint16_t* _tmp_6263 = (uint16_t*) buffer; buffer += 2;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value = *_tmp_6263;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005764\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value) << " ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_value.value << " (" << __aux64__ << ")";
                                }
                                
                                // Field name: speed_confidence
                                // Real
                                // Float
                                // FLOAT  min(1) max(127) span(127) scaleDivisor(100.0) dataType(Float)
                                uint8_t* _tmp_6264 = (uint8_t*) buffer++;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value = *_tmp_6264;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value += 1;
                                __aux64__ = ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value;
                                ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value /= 100.0;
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                    return false;
                                }
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005765\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value) << " ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence: " <<
                                                 ros->ivi.optional[0].elements[y].glc[0].reference_position_speed[0].speed_confidence.value << " (" << __aux64__ << ")";
                                }
                        }
                        
                        // Field name: parts
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(16) span(16)
                        uint8_t* _ext_flag_3049 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m005766\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.: " << int(*_ext_flag_3049);
                        }
                        
                        int16_t* _tmp_6265 = (int16_t*)buffer;
                        buffer += 2;
                        __aux64__ = *_tmp_6265;
                        __aux64__ += 1;     // +min
                        
                        int _if__tmp_6265 = __aux64__;
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m005767\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts. size: " << int(*_tmp_6265);
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 16) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                            return false;
                        }
                        
                        
                        for(int z = 0; z < _if__tmp_6265; z++) {
                            dsrc_v2_ivi_msgs::msg::GlcPart seqof_z;  // SEQUENCE
                            ros->ivi.optional[0].elements[y].glc[0].parts.elements.push_back(seqof_z);
                        
                                // GlcPart  SEQUENCE
                                    //  zoneId        Zid                       
                                    //  laneNumber    LanePosition            OPTIONAL  
                                    //  zoneExtension GlcPart_zoneExtension   OPTIONAL  
                                    //  zoneHeading   HeadingValue            OPTIONAL  
                                    //  zone          Zone                    OPTIONAL  
                                    //  ...
                                uint8_t* _ext_flag_3050 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005768\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].: " << int(*_ext_flag_3050);
                                }
                                
                                if(*(buffer++)) { 
                                    its_container_v1_its_container_msgs::msg::LanePosition _tmp_6266;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number.push_back(_tmp_6266);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005769\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    dsrc_v2_ivi_msgs::msg::GlcPartZoneExtension _tmp_6267;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension.push_back(_tmp_6267);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005770\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    its_container_v1_its_container_msgs::msg::HeadingValue _tmp_6268;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading.push_back(_tmp_6268);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005771\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading " << tools::green("present");
                                }
                                if(*(buffer++)) { 
                                    dsrc_v2_ivi_msgs::msg::Zone _tmp_6269;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone.push_back(_tmp_6269);
                                
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005772\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone " << tools::green("present");
                                }
                                
                                // Field name: zone_id
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_3051 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005773\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.: " << int(*_ext_flag_3051);
                                }
                                
                                if(*_ext_flag_3051) {
                                    uint8_t* _tmp_6271 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_6271) {
                                        uint64_t* _tmp_6272 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_6272;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_6272 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_6272;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_6270 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6270;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005774\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value) << 
                                                     " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_id.value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number.size() != 0) {
                                    // Field name: lane_number
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_6273 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6273;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005775\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value) << 
                                                     " ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].lane_number[0].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension.size() != 0) {
                                    // Field name: zone_extension
                                    // Integer
                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                    uint8_t* _tmp_6274 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6274;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005776\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value) << 
                                                     " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_extension[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                        return false;
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading.size() != 0) {
                                    // Field name: zone_heading
                                    // Real
                                    // Float
                                    // FLOAT  min(0) max(3601) span(3602) scaleDivisor(10.0) dataType(Float)
                                    uint16_t* _tmp_6275 = (uint16_t*) buffer; buffer += 2;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value = *_tmp_6275;
                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value;
                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value /= 10.0;
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 3601) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value' " << (__aux64__) << " exceeds max allowable (3601); message dropped.";
                                        return false;
                                    }
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005777\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0]: " <<
                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone_heading[0].value << " (" << __aux64__ << ")";
                                    }
                                }
                                
                                if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone.size() != 0) {
                                    // Field name: zone
                                    // Choice
                                    uint8_t* _ext_flag_3053 = (uint8_t*)buffer++; // ext flag
                                    
                                       // #0  segment   Segment   
                                       // #1  area   PolygonalLine   
                                       // #2  computedSegment   ComputedSegment   
                                    uint8_t _choice_201 = *(buffer++);
                                    
                                    if(*_ext_flag_3053)
                                        _choice_201 += 2 + 1; // Ext addition
                                    
                                    if(_choice_201 == 0) {
                                        dsrc_v2_ivi_msgs::msg::Segment _tmp_6276;
                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment.push_back(_tmp_6276);
                                    
                                            // Segment  SEQUENCE
                                                //  line       PolygonalLine     
                                                //  laneWidth  IVILaneWidth    OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::IVILaneWidth _tmp_6277;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width.push_back(_tmp_6277);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005778\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width " << tools::green("present");
                                            }
                                            
                                            // Field name: line
                                            // Choice
                                            uint8_t* _ext_flag_3054 = (uint8_t*)buffer++; // ext flag
                                            
                                               // #0  deltaPositions   PolygonalLine_deltaPositions   
                                               // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude   
                                               // #2  absolutePositions   PolygonalLine_absolutePositions   
                                               // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude   
                                            uint8_t _choice_202 = *(buffer++);
                                            
                                            if(*_ext_flag_3054)
                                                _choice_202 += 3 + 1; // Ext addition
                                            
                                            if(_choice_202 == 0) {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositions _tmp_6278;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions.push_back(_tmp_6278);
                                            
                                                uint16_t* _tmp_6279 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32)
                                                uint8_t* _ext_flag_3055 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005779\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].: " << int(*_ext_flag_3055);
                                                }
                                                
                                                int16_t* _tmp_6280 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6280;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6280 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005780\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0]. size: " << int(*_tmp_6280);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int a = 0; a < _if__tmp_6280; a++) {
                                                    dsrc_v2_ivi_msgs::msg::DeltaPosition seqof_a;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements.push_back(seqof_a);
                                                
                                                        // DeltaPosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                        
                                                        // Field name: delta_latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6281 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value = *_tmp_6281;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005781\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6282 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value = *_tmp_6282;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005782\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions[0].elements[a].delta_longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_202 == 1)  // CHOICE PolygonalLine  fieldName(delta_positions_with_altitude)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositionsWithAltitude _tmp_6283;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude.push_back(_tmp_6283);
                                            
                                                uint16_t* _tmp_6284 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(32) span(32)
                                                uint8_t* _ext_flag_3058 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005783\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].: " << int(*_ext_flag_3058);
                                                }
                                                
                                                int16_t* _tmp_6285 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6285;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6285 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005784\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0]. size: " << int(*_tmp_6285);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int b = 0; b < _if__tmp_6285; b++) {
                                                    its_container_v1_its_container_msgs::msg::DeltaReferencePosition seqof_b;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements.push_back(seqof_b);
                                                
                                                        // DeltaReferencePosition  SEQUENCE
                                                            //  deltaLatitude  DeltaLatitude      
                                                            //  deltaLongitude DeltaLongitude     
                                                            //  deltaAltitude  DeltaAltitude      
                                                        
                                                        // Field name: delta_latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6286 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value = *_tmp_6286;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005785\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6287 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value = *_tmp_6287;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value += -131071;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005786\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: delta_altitude
                                                        // Real
                                                        // Float
                                                        // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                        uint16_t* _tmp_6288 = (uint16_t*) buffer; buffer += 2;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value = *_tmp_6288;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value += -12700;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value /= 100.0;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005787\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.delta_positions_with_altitude[0].elements[b].delta_altitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_202 == 2)  // CHOICE PolygonalLine  fieldName(absolute_positions)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositions _tmp_6289;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions.push_back(_tmp_6289);
                                            
                                                uint16_t* _tmp_6290 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_3062 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005788\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].: " << int(*_ext_flag_3062);
                                                }
                                                
                                                int16_t* _tmp_6291 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6291;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6291 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005789\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0]. size: " << int(*_tmp_6291);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int c = 0; c < _if__tmp_6291; c++) {
                                                    dsrc_v2_ivi_msgs::msg::AbsolutePosition seqof_c;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements.push_back(seqof_c);
                                                
                                                        // AbsolutePosition  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                        
                                                        // Field name: latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6292 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value = *_tmp_6292;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value += -900000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005790\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6293 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value = *_tmp_6293;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value += -1800000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005791\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions[0].elements[c].longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                }
                                            }
                                            else if(_choice_202 == 3)  // CHOICE PolygonalLine  fieldName(absolute_positions_with_altitude)
                                            {
                                                dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositionsWithAltitude _tmp_6294;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude.push_back(_tmp_6294);
                                            
                                                uint16_t* _tmp_6295 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2;
                                            
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_3065 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005792\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].: " << int(*_ext_flag_3065);
                                                }
                                                
                                                int16_t* _tmp_6296 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6296;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6296 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005793\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0]. size: " << int(*_tmp_6296);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int d = 0; d < _if__tmp_6296; d++) {
                                                    dsrc_v2_ivi_msgs::msg::AbsolutePositionWAltitude seqof_d;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements.push_back(seqof_d);
                                                
                                                        // AbsolutePositionWAltitude  SEQUENCE
                                                            //  latitude   Latitude       
                                                            //  longitude  Longitude      
                                                            //  altitude   Altitude       
                                                        
                                                        // Field name: latitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6297 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value = *_tmp_6297;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value += -900000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005794\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].latitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: longitude
                                                        // Real
                                                        // Double
                                                        // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                        uint32_t* _tmp_6298 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value = *_tmp_6298;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value += -1800000000;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value /= 1.0E7;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005795\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].longitude.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: altitude
                                                            // Altitude  SEQUENCE
                                                                //  altitudeValue      AltitudeValue          
                                                                //  altitudeConfidence AltitudeConfidence     
                                                            
                                                            // Field name: altitude_value
                                                            // Real
                                                            // Float
                                                            // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                            uint32_t* _tmp_6299 = (uint32_t*) buffer; buffer += 4;
                                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value = *_tmp_6299;
                                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value += -100000;
                                                            __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value;
                                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value /= 100.0;
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005796\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value: " <<
                                                                             ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_value.value << " (" << __aux64__ << ")";
                                                            }
                                                            
                                                            // Field name: altitude_confidence
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_6300 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6300;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005797\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value) << 
                                                                             " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].line.absolute_positions_with_altitude[0].elements[d].altitude.altitude_confidence.value);
                                                            }
                                                }
                                            }
                                            else
                                            {
                                                uint16_t* _tmp_6301 = (uint16_t*)buffer;  // OpenType length
                                                buffer += 2 + int(*_tmp_6301);            // Ignoring opentype data
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width.size() != 0) {
                                                // Field name: lane_width
                                                // Integer
                                                // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                                uint16_t* _tmp_6302 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_6302;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005798\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value) << 
                                                                 " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value: " << ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].segment[0].lane_width[0].value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                                    return false;
                                                }
                                            }
                                    }
                                    else if(_choice_201 == 1)  // CHOICE Zone  fieldName(area)
                                    {
                                        dsrc_v2_ivi_msgs::msg::PolygonalLine _tmp_6303;
                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area.push_back(_tmp_6303);
                                    
                                        // Choice
                                        uint8_t* _ext_flag_3070 = (uint8_t*)buffer++; // ext flag
                                        
                                           // #0  deltaPositions   PolygonalLine_deltaPositions   
                                           // #1  deltaPositionsWithAltitude   PolygonalLine_deltaPositionsWithAltitude   
                                           // #2  absolutePositions   PolygonalLine_absolutePositions   
                                           // #3  absolutePositionsWithAltitude   PolygonalLine_absolutePositionsWithAltitude   
                                        uint8_t _choice_203 = *(buffer++);
                                        
                                        if(*_ext_flag_3070)
                                            _choice_203 += 3 + 1; // Ext addition
                                        
                                        if(_choice_203 == 0) {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositions _tmp_6304;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions.push_back(_tmp_6304);
                                        
                                            uint16_t* _tmp_6305 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32)
                                            uint8_t* _ext_flag_3071 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005799\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].: " << int(*_ext_flag_3071);
                                            }
                                            
                                            int16_t* _tmp_6306 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_6306;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_6306 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005800\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0]. size: " << int(*_tmp_6306);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int e = 0; e < _if__tmp_6306; e++) {
                                                dsrc_v2_ivi_msgs::msg::DeltaPosition seqof_e;  // SEQUENCE
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements.push_back(seqof_e);
                                            
                                                    // DeltaPosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6307 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value = *_tmp_6307;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005801\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6308 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value = *_tmp_6308;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005802\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions[0].elements[e].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_203 == 1)  // CHOICE PolygonalLine  fieldName(delta_positions_with_altitude)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineDeltaPositionsWithAltitude _tmp_6309;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude.push_back(_tmp_6309);
                                        
                                            uint16_t* _tmp_6310 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(32) span(32)
                                            uint8_t* _ext_flag_3074 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005803\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].: " << int(*_ext_flag_3074);
                                            }
                                            
                                            int16_t* _tmp_6311 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_6311;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_6311 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005804\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0]. size: " << int(*_tmp_6311);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int f = 0; f < _if__tmp_6311; f++) {
                                                its_container_v1_its_container_msgs::msg::DeltaReferencePosition seqof_f;  // SEQUENCE
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements.push_back(seqof_f);
                                            
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6312 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value = *_tmp_6312;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005805\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6313 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value = *_tmp_6313;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005806\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_altitude
                                                    // Real
                                                    // Float
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    uint16_t* _tmp_6314 = (uint16_t*) buffer; buffer += 2;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value = *_tmp_6314;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value += -12700;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value /= 100.0;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005807\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].delta_positions_with_altitude[0].elements[f].delta_altitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_203 == 2)  // CHOICE PolygonalLine  fieldName(absolute_positions)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositions _tmp_6315;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions.push_back(_tmp_6315);
                                        
                                            uint16_t* _tmp_6316 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                            uint8_t* _ext_flag_3078 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005808\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].: " << int(*_ext_flag_3078);
                                            }
                                            
                                            int16_t* _tmp_6317 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_6317;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_6317 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005809\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0]. size: " << int(*_tmp_6317);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int g = 0; g < _if__tmp_6317; g++) {
                                                dsrc_v2_ivi_msgs::msg::AbsolutePosition seqof_g;  // SEQUENCE
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements.push_back(seqof_g);
                                            
                                                    // AbsolutePosition  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                    
                                                    // Field name: latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6318 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value = *_tmp_6318;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value += -900000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005810\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6319 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value = *_tmp_6319;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value += -1800000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005811\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions[0].elements[g].longitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                        }
                                        else if(_choice_203 == 3)  // CHOICE PolygonalLine  fieldName(absolute_positions_with_altitude)
                                        {
                                            dsrc_v2_ivi_msgs::msg::PolygonalLineAbsolutePositionsWithAltitude _tmp_6320;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude.push_back(_tmp_6320);
                                        
                                            uint16_t* _tmp_6321 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                            uint8_t* _ext_flag_3081 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005812\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].: " << int(*_ext_flag_3081);
                                            }
                                            
                                            int16_t* _tmp_6322 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_6322;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_6322 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005813\033[0m| SequenceOf ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0]. size: " << int(*_tmp_6322);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int h = 0; h < _if__tmp_6322; h++) {
                                                dsrc_v2_ivi_msgs::msg::AbsolutePositionWAltitude seqof_h;  // SEQUENCE
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements.push_back(seqof_h);
                                            
                                                    // AbsolutePositionWAltitude  SEQUENCE
                                                        //  latitude   Latitude       
                                                        //  longitude  Longitude      
                                                        //  altitude   Altitude       
                                                    
                                                    // Field name: latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-900000000) max(900000001) span(1800000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6323 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value = *_tmp_6323;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value += -900000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -900000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value' " << (__aux64__) << " is less than allowable (-900000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 900000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value' " << (__aux64__) << " exceeds max allowable (900000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005814\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-1800000000) max(1800000001) span(3600000002) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6324 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value = *_tmp_6324;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value += -1800000000;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -1800000000) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value' " << (__aux64__) << " is less than allowable (-1800000000); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1800000001) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value' " << (__aux64__) << " exceeds max allowable (1800000001); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005815\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: altitude
                                                        // Altitude  SEQUENCE
                                                            //  altitudeValue      AltitudeValue          
                                                            //  altitudeConfidence AltitudeConfidence     
                                                        
                                                        // Field name: altitude_value
                                                        // Real
                                                        // Float
                                                        // FLOAT  min(-100000) max(800001) span(900002) scaleDivisor(100.0) dataType(Float)
                                                        uint32_t* _tmp_6325 = (uint32_t*) buffer; buffer += 4;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value = *_tmp_6325;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value += -100000;
                                                        __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value /= 100.0;
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < -100000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' " << (__aux64__) << " is less than allowable (-100000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 800001) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value' " << (__aux64__) << " exceeds max allowable (800001); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005816\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value: " <<
                                                                         ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_value.value << " (" << __aux64__ << ")";
                                                        }
                                                        
                                                        // Field name: altitude_confidence
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_6326 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6326;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005817\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value) << 
                                                                         " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].area[0].absolute_positions_with_altitude[0].elements[h].altitude.altitude_confidence.value);
                                                        }
                                            }
                                        }
                                        else
                                        {
                                            uint16_t* _tmp_6327 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2 + int(*_tmp_6327);            // Ignoring opentype data
                                        }
                                    }
                                    else if(_choice_201 == 2)  // CHOICE Zone  fieldName(computed_segment)
                                    {
                                        dsrc_v2_ivi_msgs::msg::ComputedSegment _tmp_6328;
                                        ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment.push_back(_tmp_6328);
                                    
                                            // ComputedSegment  SEQUENCE
                                                //  zoneId         Zid                                
                                                //  laneNumber     LanePosition                       
                                                //  laneWidth      IVILaneWidth                       
                                                //  offsetDistance ComputedSegment_offsetDistance   OPTIONAL  
                                                //  offsetPosition DeltaReferencePosition           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ComputedSegmentOffsetDistance _tmp_6329;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance.push_back(_tmp_6329);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005818\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                its_container_v1_its_container_msgs::msg::DeltaReferencePosition _tmp_6330;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position.push_back(_tmp_6330);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m005819\033[0m| ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position " << tools::green("present");
                                            }
                                            
                                            // Field name: zone_id
                                            // Integer
                                            // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                            uint8_t* _ext_flag_3086 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005820\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.: " << int(*_ext_flag_3086);
                                            }
                                            
                                            if(*_ext_flag_3086) {
                                                uint8_t* _tmp_6332 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_6332) {
                                                    uint64_t* _tmp_6333 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_6333;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_6333 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_6333;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_6331 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_6331;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005821\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value) << 
                                                                 " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].zone_id.value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                            
                                            // Field name: lane_number
                                            // Integer
                                            // INT8  min(-1) max(14) span(16) datatype(Int8)
                                            uint8_t* _tmp_6334 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6334;
                                            __aux64__ += -1;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005822\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value) << 
                                                             " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_number.value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: lane_width
                                            // Integer
                                            // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                            uint16_t* _tmp_6335 = (uint16_t*) buffer; buffer += 2;
                                            __aux64__ = *_tmp_6335;
                                            ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005823\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value) << 
                                                             " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value: " << ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].lane_width.value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance.size() != 0) {
                                                // Field name: offset_distance
                                                // Integer
                                                // INT16  min(-32768) max(32767) span(65536) datatype(Int16)
                                                uint16_t* _tmp_6336 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_6336;
                                                __aux64__ += -32768;
                                                ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005824\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value) << 
                                                                 " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value: " << ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < -32768) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value' " << (__aux64__) << " is less than allowable (-32768); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_distance[0].value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position.size() != 0) {
                                                // Field name: offset_position
                                                    // DeltaReferencePosition  SEQUENCE
                                                        //  deltaLatitude  DeltaLatitude      
                                                        //  deltaLongitude DeltaLongitude     
                                                        //  deltaAltitude  DeltaAltitude      
                                                    
                                                    // Field name: delta_latitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6337 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value = *_tmp_6337;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005825\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_latitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_longitude
                                                    // Real
                                                    // Double
                                                    // DOUBLE  min(-131071) max(131072) span(262144) scaleDivisor(1.0E7) dataType(Double)
                                                    uint32_t* _tmp_6338 = (uint32_t*) buffer; buffer += 4;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value = *_tmp_6338;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value += -131071;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value /= 1.0E7;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -131071) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' " << (__aux64__) << " is less than allowable (-131071); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 131072) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value' " << (__aux64__) << " exceeds max allowable (131072); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005826\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_longitude.value << " (" << __aux64__ << ")";
                                                    }
                                                    
                                                    // Field name: delta_altitude
                                                    // Real
                                                    // Float
                                                    // FLOAT  min(-12700) max(12800) span(25501) scaleDivisor(100.0) dataType(Float)
                                                    uint16_t* _tmp_6339 = (uint16_t*) buffer; buffer += 2;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value = *_tmp_6339;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value += -12700;
                                                    __aux64__ = ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value;
                                                    ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value /= 100.0;
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < -12700) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' " << (__aux64__) << " is less than allowable (-12700); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 12800) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value' " << (__aux64__) << " exceeds max allowable (12800); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005827\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value) << " ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude: " <<
                                                                     ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].zone[0].computed_segment[0].offset_position[0].delta_altitude.value << " (" << __aux64__ << ")";
                                                    }
                                            }
                                    }
                                    else
                                    {
                                        uint16_t* _tmp_6340 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2 + int(*_tmp_6340);            // Ignoring opentype data
                                    }
                                }
                                if(*_ext_flag_3050) { // from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z]. 
                                    uint8_t* _tmp_6341 = (uint8_t*) buffer++;  // number of extensions
                                    bool _array_72[*_tmp_6341];
                                    
                                    if(debug)
                                        logger->debug() << "|\033[38;5;94m005828\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].glc[0].parts.elements[z].: " << static_cast<unsigned int>(*_tmp_6341);
                                    
                                    // Extensions bytemap
                                    for(int i = 0; i < *_tmp_6341; i++)
                                        _array_72[i] = (*buffer++) != 0;
                                    
                                    // Discarding unknown OpenType containers
                                    for(int i = 0; i < *_tmp_6341; i++) {
                                        uint16_t* _tmp_6342 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2;
                                    
                                        if(debug) {
                                        }
                                    
                                        for(int i = 0; i < *_tmp_6342; i++)
                                            buffer++;
                                    }
                                    
                                }
                        }
                        if(*_ext_flag_3039) { // from ros->ivi.optional[0].elements[y].glc[0]. 
                            uint8_t* _tmp_6343 = (uint8_t*) buffer++;  // number of extensions
                            bool _array_73[*_tmp_6343];
                            
                            if(debug)
                                logger->debug() << "|\033[38;5;94m005829\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].glc[0].: " << static_cast<unsigned int>(*_tmp_6343);
                            
                            // Extensions bytemap
                            for(int i = 0; i < *_tmp_6343; i++)
                                _array_73[i] = (*buffer++) != 0;
                            
                            // Discarding unknown OpenType containers
                            for(int i = 0; i < *_tmp_6343; i++) {
                                uint16_t* _tmp_6344 = (uint16_t*)buffer;  // OpenType length
                                buffer += 2;
                            
                                if(debug) {
                                }
                            
                                for(int i = 0; i < *_tmp_6344; i++)
                                    buffer++;
                            }
                            
                        }
                }
                else if(_choice_200 == 1)  // CHOICE IviContainer  fieldName(giv)
                {
                    dsrc_v2_ivi_msgs::msg::GeneralIviContainer _tmp_6345;
                    ros->ivi.optional[0].elements[y].giv.push_back(_tmp_6345);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_3090 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m005830\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].: " << int(*_ext_flag_3090);
                    }
                    
                    int16_t* _tmp_6346 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_6346;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_6346 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m005831\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0]. size: " << int(*_tmp_6346);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int i = 0; i < _if__tmp_6346; i++) {
                        dsrc_v2_ivi_msgs::msg::GicPart seqof_i;  // SEQUENCE
                        ros->ivi.optional[0].elements[y].giv[0].elements.push_back(seqof_i);
                    
                            // GicPart  SEQUENCE
                                //  detectionZoneIds       GicPart_detectionZoneIds         OPTIONAL  
                                //  its_Rrid               VarLengthNumber                  OPTIONAL  
                                //  relevanceZoneIds       GicPart_relevanceZoneIds         OPTIONAL  
                                //  direction              Direction                        OPTIONAL  
                                //  driverAwarenessZoneIds GicPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   GicPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        GicPart_applicableLanes          OPTIONAL  
                                //  iviType                IviType                            
                                //  iviPurpose             IviPurpose                       OPTIONAL  
                                //  laneStatus             LaneStatus                       OPTIONAL  
                                //  vehicleCharacteristics GicPart_vehicleCharacteristics   OPTIONAL  
                                //  driverCharacteristics  DriverCharacteristics            OPTIONAL  
                                //  layoutId               GicPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      GicPart_preStoredlayoutId        OPTIONAL  
                                //  roadSignCodes          GicPart_roadSignCodes              
                                //  extraText              GicPart_extraText                OPTIONAL  
                                //  ...
                            uint8_t* _ext_flag_3091 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005832\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].: " << int(*_ext_flag_3091);
                            }
                            
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartDetectionZoneIds _tmp_6347;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids.push_back(_tmp_6347);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005833\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_citsapplmgmtids_msgs::msg::VarLengthNumber _tmp_6348;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid.push_back(_tmp_6348);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005834\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartRelevanceZoneIds _tmp_6349;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids.push_back(_tmp_6349);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005835\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::Direction _tmp_6350;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].direction.push_back(_tmp_6350);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005836\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].direction " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartDriverAwarenessZoneIds _tmp_6351;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids.push_back(_tmp_6351);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005837\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartMinimumAwarenessTime _tmp_6352;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time.push_back(_tmp_6352);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005838\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartApplicableLanes _tmp_6353;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes.push_back(_tmp_6353);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005839\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::IviPurpose _tmp_6354;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose.push_back(_tmp_6354);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005840\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::LaneStatus _tmp_6355;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status.push_back(_tmp_6355);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005841\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartVehicleCharacteristics _tmp_6356;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics.push_back(_tmp_6356);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005842\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::DriverCharacteristics _tmp_6357;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics.push_back(_tmp_6357);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005843\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartLayoutId _tmp_6358;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id.push_back(_tmp_6358);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005844\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartPreStoredlayoutId _tmp_6359;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id.push_back(_tmp_6359);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005845\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::GicPartExtraText _tmp_6360;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text.push_back(_tmp_6360);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m005846\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text " << tools::green("present");
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids.size() != 0) {
                                // Field name: detection_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3092 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005847\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].: " << int(*_ext_flag_3092);
                                }
                                
                                int16_t* _tmp_6361 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6361;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6361 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005848\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0]. size: " << int(*_tmp_6361);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int j = 0; j < _if__tmp_6361; j++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_j;  // INTEGER
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements.push_back(seqof_j);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_3093 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005849\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].: " << int(*_ext_flag_3093);
                                    }
                                    
                                    if(*_ext_flag_3093) {
                                        uint8_t* _tmp_6363 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_6363) {
                                            uint64_t* _tmp_6364 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_6364;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_6364 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_6364;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_6362 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_6362;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005850\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value) << 
                                                         " ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].detection_zone_ids[0].elements[j].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid.size() != 0) {
                                // Field name: its_rrid
                                // Choice
                                   // #0  content   VarLengthNumber_content   
                                   // #1  extension   Ext1   
                                uint8_t _choice_204 = *(buffer++);
                                
                                if(_choice_204 == 0) {
                                    dsrc_v2_citsapplmgmtids_msgs::msg::VarLengthNumberContent _tmp_6365;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content.push_back(_tmp_6365);
                                
                                    // Integer
                                    // UINT8  min(0) max(127) span(128) datatype(UInt8)
                                    uint8_t* _tmp_6366 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6366;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005851\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value) << 
                                                     " ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 127) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].content[0].value' " << (__aux64__) << " exceeds max allowable (127); message dropped.";
                                        return false;
                                    }
                                }
                                else if(_choice_204 == 1)  // CHOICE VarLengthNumber  fieldName(extension)
                                {
                                    dsrc_v2_citsapplmgmtids_msgs::msg::Ext1 _tmp_6367;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension.push_back(_tmp_6367);
                                
                                    // Choice
                                       // #0  content   Ext1_content   
                                       // #1  extension   Ext2   
                                    uint8_t _choice_205 = *(buffer++);
                                    
                                    if(_choice_205 == 0) {
                                        dsrc_v2_citsapplmgmtids_msgs::msg::Ext1Content _tmp_6368;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content.push_back(_tmp_6368);
                                    
                                        // Integer
                                        // UINT16  min(128) max(16511) span(16384) datatype(UInt16)
                                        uint16_t* _tmp_6369 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_6369;
                                        __aux64__ += 128;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005852\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value) << 
                                                         " ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 128) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value' " << (__aux64__) << " is less than allowable (128); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 16511) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].content[0].value' " << (__aux64__) << " exceeds max allowable (16511); message dropped.";
                                            return false;
                                        }
                                    }
                                    else if(_choice_205 == 1)  // CHOICE Ext1  fieldName(extension)
                                    {
                                        dsrc_v2_citsapplmgmtids_msgs::msg::Ext2 _tmp_6370;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension.push_back(_tmp_6370);
                                    
                                        // Choice
                                           // #0  content   Ext2_content   
                                           // #1  extension   Ext3   
                                        uint8_t _choice_206 = *(buffer++);
                                        
                                        if(_choice_206 == 0) {
                                            dsrc_v2_citsapplmgmtids_msgs::msg::Ext2Content _tmp_6371;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content.push_back(_tmp_6371);
                                        
                                            // Integer
                                            // UINT32  min(16512) max(2113663) span(2097152) datatype(UInt32)
                                            uint32_t* _tmp_6372 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_6372;
                                            __aux64__ += 16512;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005853\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 16512) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value' " << (__aux64__) << " is less than allowable (16512); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 2113663) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].content[0].value' " << (__aux64__) << " exceeds max allowable (2113663); message dropped.";
                                                return false;
                                            }
                                        }
                                        else if(_choice_206 == 1)  // CHOICE Ext2  fieldName(extension)
                                        {
                                            dsrc_v2_citsapplmgmtids_msgs::msg::Ext3 _tmp_6373;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension.push_back(_tmp_6373);
                                        
                                            // Integer
                                            // UINT32  min(2113664) max(270549119) span(268435456) datatype(UInt32)
                                            uint8_t* _ext_flag_3097 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005854\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].: " << int(*_ext_flag_3097);
                                            }
                                            
                                            if(*_ext_flag_3097) {
                                                uint8_t* _tmp_6375 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_6375) {
                                                    uint64_t* _tmp_6376 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_6376;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_6376 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_6376;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint32_t* _tmp_6374 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = *_tmp_6374;
                                                __aux64__ += 2113664;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m005855\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 2113664) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value' " << (__aux64__) << " is less than allowable (2113664); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 270549119) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0].extension[0].value' " << (__aux64__) << " exceeds max allowable (270549119); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        else
                                        {
                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_206) << ") selected in CHOICE Ext2 in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0].extension[0]'; message dropped.";
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_205) << ") selected in CHOICE Ext1 in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0].extension[0]'; message dropped.";
                                        return false;
                                    }
                                }
                                else
                                {
                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_204) << ") selected in CHOICE VarLengthNumber in 'ivi.optional[0].elements[y].giv[0].elements[i].its_rrid[0]'; message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids.size() != 0) {
                                // Field name: relevance_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3098 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005856\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].: " << int(*_ext_flag_3098);
                                }
                                
                                int16_t* _tmp_6377 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6377;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6377 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005857\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0]. size: " << int(*_tmp_6377);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int k = 0; k < _if__tmp_6377; k++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_k;  // INTEGER
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements.push_back(seqof_k);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_3099 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005858\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].: " << int(*_ext_flag_3099);
                                    }
                                    
                                    if(*_ext_flag_3099) {
                                        uint8_t* _tmp_6379 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_6379) {
                                            uint64_t* _tmp_6380 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_6380;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_6380 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_6380;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_6378 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_6378;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005859\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value) << 
                                                         " ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].relevance_zone_ids[0].elements[k].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].direction.size() != 0) {
                                // Field name: direction
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_6381 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_6381;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005860\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value) << 
                                                 " ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].direction[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids.size() != 0) {
                                // Field name: driver_awareness_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3100 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005861\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].: " << int(*_ext_flag_3100);
                                }
                                
                                int16_t* _tmp_6382 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6382;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6382 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005862\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0]. size: " << int(*_tmp_6382);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int l = 0; l < _if__tmp_6382; l++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_l;  // INTEGER
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements.push_back(seqof_l);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_3101 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005863\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].: " << int(*_ext_flag_3101);
                                    }
                                    
                                    if(*_ext_flag_3101) {
                                        uint8_t* _tmp_6384 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_6384) {
                                            uint64_t* _tmp_6385 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_6385;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_6385 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_6385;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_6383 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_6383;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m005864\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value) << 
                                                         " ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_awareness_zone_ids[0].elements[l].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time.size() != 0) {
                                // Field name: minimum_awareness_time
                                // Integer
                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                uint8_t* _tmp_6386 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_6386;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005865\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].minimum_awareness_time[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes.size() != 0) {
                                // Field name: applicable_lanes
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3102 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005866\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].: " << int(*_ext_flag_3102);
                                }
                                
                                int16_t* _tmp_6387 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6387;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6387 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005867\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0]. size: " << int(*_tmp_6387);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int m = 0; m < _if__tmp_6387; m++) {
                                    its_container_v1_its_container_msgs::msg::LanePosition seqof_m;  // INTEGER
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements.push_back(seqof_m);
                                
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_6388 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6388;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005868\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value) << 
                                                     " ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].applicable_lanes[0].elements[m].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    
                                }
                            }
                            
                            // Field name: ivi_type
                            // Integer
                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                            uint8_t* _tmp_6389 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_6389;
                            ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m005869\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value) << 
                                             " ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].ivi_type.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                return false;
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose.size() != 0) {
                                // Field name: ivi_purpose
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_6390 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_6390;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005870\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value) << 
                                                 " ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].ivi_purpose[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status.size() != 0) {
                                // Field name: lane_status
                                // Integer
                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                uint8_t* _ext_flag_3103 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005871\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].: " << int(*_ext_flag_3103);
                                }
                                
                                if(*_ext_flag_3103) {
                                    uint8_t* _tmp_6392 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_6392) {
                                        uint64_t* _tmp_6393 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_6393;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_6393 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_6393;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_6391 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6391;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m005872\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value) << 
                                                     " ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].lane_status[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics.size() != 0) {
                                // Field name: vehicle_characteristics
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3104 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005873\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].: " << int(*_ext_flag_3104);
                                }
                                
                                int16_t* _tmp_6394 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6394;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6394 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m005874\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0]. size: " << int(*_tmp_6394);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int n = 0; n < _if__tmp_6394; n++) {
                                    dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristics seqof_n;  // SEQUENCE
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements.push_back(seqof_n);
                                
                                        // CompleteVehicleCharacteristics  SEQUENCE
                                            //  tractor    TractorCharacteristics                   OPTIONAL  
                                            //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                            //  train      TrainCharacteristics                     OPTIONAL  
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TractorCharacteristics _tmp_6395;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor.push_back(_tmp_6395);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005875\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor " << tools::green("present");
                                        }
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristicsTrailer _tmp_6396;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer.push_back(_tmp_6396);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005876\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer " << tools::green("present");
                                        }
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TrainCharacteristics _tmp_6397;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train.push_back(_tmp_6397);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m005877\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor.size() != 0) {
                                            // Field name: tractor
                                                // TractorCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                    //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                    //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsEqualTo _tmp_6398;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to.push_back(_tmp_6398);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005878\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to " << tools::green("present");
                                                }
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsNotEqualTo _tmp_6399;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to.push_back(_tmp_6399);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005879\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to " << tools::green("present");
                                                }
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::TractorCharacteristicsRanges _tmp_6400;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges.push_back(_tmp_6400);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m005880\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges " << tools::green("present");
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to.size() != 0) {
                                                    // Field name: equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3105 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005881\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].: " << int(*_ext_flag_3105);
                                                    }
                                                    
                                                    int16_t* _tmp_6401 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_6401;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_6401 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005882\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0]. size: " << int(*_tmp_6401);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int o = 0; o < _if__tmp_6401; o++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_o;  // CHOICE
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements.push_back(seqof_o);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_3106 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_207 = *(buffer++);
                                                        
                                                        if(*_ext_flag_3106)
                                                            _choice_207 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_207 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_6402;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type.push_back(_tmp_6402);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6403 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6403;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005883\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_207 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6404;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code.push_back(_tmp_6404);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_208 = *(buffer++);
                                                            
                                                            if(_choice_208 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6405;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6405);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_6406 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6406;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005884\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_208 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6407;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6407);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_6408 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6408;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005885\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_208 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6409;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6409);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_6410 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6410;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005886\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_208 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6411;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6411);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_6412 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6412;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005887\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_208) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_207 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6413;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type.push_back(_tmp_6413);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6414 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6414;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005888\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_207 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6415;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value.push_back(_tmp_6415);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_6416 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6416;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005889\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_6417 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6417;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005890\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_207 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6418;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics.push_back(_tmp_6418);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6419 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6419;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005891\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_207 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_6420;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type.push_back(_tmp_6420);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_3114 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005892\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.: " << int(*_ext_flag_3114);
                                                                }
                                                                
                                                                if(*_ext_flag_3114) {
                                                                    uint8_t* _tmp_6422 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6422) {
                                                                        uint64_t* _tmp_6423 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6423;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6423 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6423;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6421 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6421;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005893\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_6424 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6424;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005894\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_6425 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6425 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005895\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_6425 = __aux64__;
                                                                for(int p = 0; p < _if__tmp_6425; p++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].special_transport_type.values[p] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_207 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6426;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage.push_back(_tmp_6426);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_6427 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6427;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005896\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].equal_to[0].elements[o].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_6428 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_6428);            // Ignoring opentype data
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to.size() != 0) {
                                                    // Field name: not_equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3117 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005897\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].: " << int(*_ext_flag_3117);
                                                    }
                                                    
                                                    int16_t* _tmp_6429 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_6429;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_6429 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005898\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0]. size: " << int(*_tmp_6429);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int q = 0; q < _if__tmp_6429; q++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_q;  // CHOICE
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements.push_back(seqof_q);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_3118 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_209 = *(buffer++);
                                                        
                                                        if(*_ext_flag_3118)
                                                            _choice_209 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_209 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_6430;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type.push_back(_tmp_6430);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6431 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6431;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005899\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_209 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6432;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code.push_back(_tmp_6432);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_210 = *(buffer++);
                                                            
                                                            if(_choice_210 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6433;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6433);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_6434 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6434;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005900\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_210 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6435;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6435);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_6436 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6436;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005901\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_210 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6437;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6437);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_6438 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6438;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005902\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_210 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6439;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6439);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_6440 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6440;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005903\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_210) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_209 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6441;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type.push_back(_tmp_6441);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6442 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6442;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005904\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_209 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6443;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value.push_back(_tmp_6443);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_6444 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6444;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005905\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_6445 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6445;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005906\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_209 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6446;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics.push_back(_tmp_6446);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_6447 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6447;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005907\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_209 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_6448;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type.push_back(_tmp_6448);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_3126 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005908\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.: " << int(*_ext_flag_3126);
                                                                }
                                                                
                                                                if(*_ext_flag_3126) {
                                                                    uint8_t* _tmp_6450 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6450) {
                                                                        uint64_t* _tmp_6451 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6451;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6451 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6451;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6449 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6449;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005909\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_6452 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6452;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005910\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_6453 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6453 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m005911\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_6453 = __aux64__;
                                                                for(int r = 0; r < _if__tmp_6453; r++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].special_transport_type.values[r] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_209 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6454;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage.push_back(_tmp_6454);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_6455 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6455;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005912\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].not_equal_to[0].elements[q].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_6456 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_6456);            // Ignoring opentype data
                                                        }
                                                    }
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges.size() != 0) {
                                                    // Field name: ranges
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3129 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005913\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].: " << int(*_ext_flag_3129);
                                                    }
                                                    
                                                    int16_t* _tmp_6457 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_6457;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_6457 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m005914\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0]. size: " << int(*_tmp_6457);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int s = 0; s < _if__tmp_6457; s++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_s;  // SEQUENCE
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements.push_back(seqof_s);
                                                    
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            
                                                            // Field name: comparison_operator
                                                            // Integer
                                                            // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                            uint8_t* _tmp_6458 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6458;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m005915\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: limits
                                                            // Choice
                                                            uint8_t* _ext_flag_3130 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                               // #1  vehicleDimensions   VehicleDimensions   
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                               // #3  axleWeightLimits   AxleWeightLimits   
                                                               // #4  passengerCapacity   PassengerCapacity   
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                               // #6  dieselEmissionValues   DieselEmissionValues   
                                                               // #7  soundLevel   SoundLevel   
                                                            uint8_t _choice_211 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3130)
                                                                _choice_211 += 7 + 1; // Ext addition
                                                            
                                                            if(_choice_211 == 0) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_6459;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles.push_back(_tmp_6459);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                uint8_t* _tmp_6460 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6460;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005916\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_211 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_6461;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions.push_back(_tmp_6461);
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    
                                                                    // Field name: vehicle_length_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6462 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6462;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005917\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_heigth_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6463 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6463;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005918\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_width_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6464 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6464;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005919\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_6465;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits.push_back(_tmp_6465);
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    
                                                                    // Field name: vehicle_max_laden_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6466 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6466;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005920\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_train_maximum_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6467 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6467;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005921\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_weight_unladen
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6468 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6468;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005922\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_6469;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits.push_back(_tmp_6469);
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    
                                                                    // Field name: max_ladenweight_on_axle1
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6470 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6470;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005923\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle2
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6471 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6471;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005924\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle3
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6472 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6472;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005925\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle4
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6473 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6473;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005926\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle5
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6474 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6474;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005927\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_6475;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity.push_back(_tmp_6475);
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    
                                                                    // Field name: number_of_seats
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6476 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6476;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005928\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: number_of_standing_places
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6477 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6477;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005929\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_6478;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values.push_back(_tmp_6478);
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_6479 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6479;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005930\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: emission_co
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_6480 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6480;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005931\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hc
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6481 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6481;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005932\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_nox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6482 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6482;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005933\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hcnox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6483 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6483;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005934\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_6484;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values.push_back(_tmp_6484);
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    
                                                                    // Field name: particulate
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_6485 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6485;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005935\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: value
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_6486 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6486;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005936\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: absorption_coeff
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_6487 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6487;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005937\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_211 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_6488;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level.push_back(_tmp_6488);
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    
                                                                    // Field name: soundstationary
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6489 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6489;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005938\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: sounddriveby
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_6490 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6490;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005939\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].tractor[0].ranges[0].elements[s].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_6491 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_6491);            // Ignoring opentype data
                                                            }
                                                    }
                                                }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer.size() != 0) {
                                            // Field name: trailer
                                            // SequenceOf
                                            // Data Type UInt8
                                            // SEQUENCE_OF  min(1) max(3) span(3)
                                            int16_t* _tmp_6492 = (int16_t*)buffer;
                                            buffer += 2;
                                            __aux64__ = *_tmp_6492;
                                            __aux64__ += 1;     // +min
                                            
                                            int _if__tmp_6492 = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m005940\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0]. size: " << int(*_tmp_6492);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                return false;
                                            }
                                            
                                            
                                            for(int t = 0; t < _if__tmp_6492; t++) {
                                                dsrc_v2_ivi_msgs::msg::TrailerCharacteristics seqof_t;  // SEQUENCE
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements.push_back(seqof_t);
                                            
                                                    // TrailerCharacteristics  SEQUENCE
                                                        //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsEqualTo _tmp_6493;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to.push_back(_tmp_6493);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005941\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsNotEqualTo _tmp_6494;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to.push_back(_tmp_6494);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005942\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsRanges _tmp_6495;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges.push_back(_tmp_6495);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m005943\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges " << tools::green("present");
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to.size() != 0) {
                                                        // Field name: equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3133 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005944\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].: " << int(*_ext_flag_3133);
                                                        }
                                                        
                                                        int16_t* _tmp_6496 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_6496;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_6496 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005945\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0]. size: " << int(*_tmp_6496);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int u = 0; u < _if__tmp_6496; u++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_u;  // CHOICE
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements.push_back(seqof_u);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_3134 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_212 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3134)
                                                                _choice_212 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_212 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_6497;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type.push_back(_tmp_6497);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6498 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6498;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005946\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_212 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6499;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code.push_back(_tmp_6499);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_213 = *(buffer++);
                                                                
                                                                if(_choice_213 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6500;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6500);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_6501 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6501;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005947\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_213 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6502;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6502);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_6503 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6503;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005948\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_213 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6504;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6504);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_6505 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6505;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005949\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_213 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6506;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6506);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_6507 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6507;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005950\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_213) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_212 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6508;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type.push_back(_tmp_6508);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6509 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6509;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005951\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_212 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6510;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value.push_back(_tmp_6510);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_6511 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6511;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005952\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_6512 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6512;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005953\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_212 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6513;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics.push_back(_tmp_6513);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6514 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6514;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005954\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_212 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_6515;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type.push_back(_tmp_6515);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_3142 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005955\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.: " << int(*_ext_flag_3142);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3142) {
                                                                        uint8_t* _tmp_6517 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6517) {
                                                                            uint64_t* _tmp_6518 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6518;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6518 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6518;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6516 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6516;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005956\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_6519 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6519;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005957\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_6520 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_6520 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005958\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_6520 = __aux64__;
                                                                    for(int v = 0; v < _if__tmp_6520; v++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].special_transport_type.values[v] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_212 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6521;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage.push_back(_tmp_6521);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_6522 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6522;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005959\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].equal_to[0].elements[u].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_6523 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_6523);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to.size() != 0) {
                                                        // Field name: not_equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3145 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005960\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].: " << int(*_ext_flag_3145);
                                                        }
                                                        
                                                        int16_t* _tmp_6524 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_6524;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_6524 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005961\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0]. size: " << int(*_tmp_6524);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int w = 0; w < _if__tmp_6524; w++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_w;  // CHOICE
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements.push_back(seqof_w);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_3146 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_214 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3146)
                                                                _choice_214 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_214 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_6525;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type.push_back(_tmp_6525);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6526 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6526;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005962\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_214 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6527;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code.push_back(_tmp_6527);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_215 = *(buffer++);
                                                                
                                                                if(_choice_215 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6528;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6528);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_6529 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6529;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005963\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_215 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6530;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6530);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_6531 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6531;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005964\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_215 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6532;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6532);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_6533 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6533;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005965\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_215 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6534;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6534);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_6535 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6535;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005966\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_215) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_214 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6536;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type.push_back(_tmp_6536);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6537 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6537;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005967\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_214 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6538;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value.push_back(_tmp_6538);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_6539 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6539;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005968\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_6540 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6540;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005969\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_214 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6541;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics.push_back(_tmp_6541);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6542 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6542;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005970\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_214 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_6543;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type.push_back(_tmp_6543);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_3154 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005971\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.: " << int(*_ext_flag_3154);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3154) {
                                                                        uint8_t* _tmp_6545 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6545) {
                                                                            uint64_t* _tmp_6546 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6546;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6546 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6546;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6544 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6544;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005972\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_6547 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6547;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005973\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_6548 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_6548 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m005974\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_6548 = __aux64__;
                                                                    for(int x = 0; x < _if__tmp_6548; x++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].special_transport_type.values[x] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_214 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6549;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage.push_back(_tmp_6549);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_6550 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6550;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005975\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].not_equal_to[0].elements[w].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_6551 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_6551);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges.size() != 0) {
                                                        // Field name: ranges
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3157 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005976\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].: " << int(*_ext_flag_3157);
                                                        }
                                                        
                                                        int16_t* _tmp_6552 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_6552;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_6552 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m005977\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0]. size: " << int(*_tmp_6552);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int y = 0; y < _if__tmp_6552; y++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_y;  // SEQUENCE
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements.push_back(seqof_y);
                                                        
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                
                                                                // Field name: comparison_operator
                                                                // Integer
                                                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                uint8_t* _tmp_6553 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6553;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m005978\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: limits
                                                                // Choice
                                                                uint8_t* _ext_flag_3158 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                   // #1  vehicleDimensions   VehicleDimensions   
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                   // #3  axleWeightLimits   AxleWeightLimits   
                                                                   // #4  passengerCapacity   PassengerCapacity   
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                   // #6  dieselEmissionValues   DieselEmissionValues   
                                                                   // #7  soundLevel   SoundLevel   
                                                                uint8_t _choice_216 = *(buffer++);
                                                                
                                                                if(*_ext_flag_3158)
                                                                    _choice_216 += 7 + 1; // Ext addition
                                                                
                                                                if(_choice_216 == 0) {
                                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_6554;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles.push_back(_tmp_6554);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_6555 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6555;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m005979\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_216 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_6556;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions.push_back(_tmp_6556);
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        
                                                                        // Field name: vehicle_length_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6557 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6557;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005980\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_heigth_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6558 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6558;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005981\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_width_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6559 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6559;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005982\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_6560;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits.push_back(_tmp_6560);
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        
                                                                        // Field name: vehicle_max_laden_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6561 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6561;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005983\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_train_maximum_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6562 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6562;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005984\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_weight_unladen
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6563 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6563;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005985\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_6564;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits.push_back(_tmp_6564);
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        
                                                                        // Field name: max_ladenweight_on_axle1
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6565 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6565;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005986\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle2
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6566 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6566;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005987\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle3
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6567 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6567;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005988\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle4
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6568 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6568;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005989\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle5
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6569 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6569;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005990\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_6570;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity.push_back(_tmp_6570);
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        
                                                                        // Field name: number_of_seats
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6571 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6571;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005991\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: number_of_standing_places
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6572 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6572;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005992\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_6573;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values.push_back(_tmp_6573);
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_6574 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6574;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005993\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: emission_co
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_6575 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6575;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005994\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hc
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6576 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6576;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005995\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_nox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6577 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6577;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005996\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hcnox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6578 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6578;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m005997\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_6579;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values.push_back(_tmp_6579);
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        
                                                                        // Field name: particulate
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_6580 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_6580;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005998\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_6581 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_6581;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m005999\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                        
                                                                        // Field name: absorption_coeff
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_6582 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6582;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006000\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_216 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_6583;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level.push_back(_tmp_6583);
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        
                                                                        // Field name: soundstationary
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6584 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6584;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006001\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: sounddriveby
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_6585 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6585;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006002\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].trailer[0].elements[t].ranges[0].elements[y].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_6586 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_6586);            // Ignoring opentype data
                                                                }
                                                        }
                                                    }
                                            }
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train.size() != 0) {
                                            // Field name: train
                                                // TrainCharacteristics  SEQUENCE
                                                    //  equalTo    TractorCharacteristics_equalTo        
                                                    //  notEqualTo TractorCharacteristics_notEqualTo     
                                                    //  ranges     TractorCharacteristics_ranges         
                                                
                                                // Field name: equal_to
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_3161 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006003\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.: " << int(*_ext_flag_3161);
                                                }
                                                
                                                int16_t* _tmp_6587 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6587;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6587 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006004\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to. size: " << int(*_tmp_6587);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int z = 0; z < _if__tmp_6587; z++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_z;  // CHOICE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements.push_back(seqof_z);
                                                
                                                    // Choice
                                                    uint8_t* _ext_flag_3162 = (uint8_t*)buffer++; // ext flag
                                                    
                                                       // #0  simpleVehicleType   StationType   
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                       // #2  iso3833VehicleType   Iso3833VehicleType   
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                       // #4  engineCharacteristics   EngineCharacteristics   
                                                       // #5  loadType   LoadType   
                                                       // #6  usage   VehicleRole   
                                                    uint8_t _choice_217 = *(buffer++);
                                                    
                                                    if(*_ext_flag_3162)
                                                        _choice_217 += 6 + 1; // Ext addition
                                                    
                                                    if(_choice_217 == 0) {
                                                        its_container_v1_its_container_msgs::msg::StationType _tmp_6588;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type.push_back(_tmp_6588);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6589 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6589;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006005\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_217 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6590;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code.push_back(_tmp_6590);
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                        uint8_t _choice_218 = *(buffer++);
                                                        
                                                        if(_choice_218 == 0) {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6591;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6591);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) datatype(Int32)
                                                            uint8_t* _tmp_6592 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6592;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006006\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                        }
                                                        else if(_choice_218 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6593;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6593);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_6594 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6594;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006007\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                        }
                                                        else if(_choice_218 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6595;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6595);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_6596 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6596;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006008\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                        }
                                                        else if(_choice_218 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6597;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6597);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) datatype(Int32)
                                                            uint8_t* _tmp_6598 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6598;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006009\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_218) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].eu_vehicle_category_code[0]'; message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_217 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6599;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type.push_back(_tmp_6599);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6600 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6600;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006010\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_217 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6601;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value.push_back(_tmp_6601);
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            
                                                            // Field name: euro_value
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_6602 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6602;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006011\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            // Field name: cop_value
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) datatype(Int32)
                                                            uint8_t* _tmp_6603 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6603;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006012\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].euro_and_co2value[0].cop_value.value);
                                                            }
                                                    }
                                                    else if(_choice_217 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6604;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics.push_back(_tmp_6604);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6605 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6605;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006013\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_217 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::LoadType _tmp_6606;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type.push_back(_tmp_6606);
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            
                                                            // Field name: goods_type
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _ext_flag_3170 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006014\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.: " << int(*_ext_flag_3170);
                                                            }
                                                            
                                                            if(*_ext_flag_3170) {
                                                                uint8_t* _tmp_6608 = (uint8_t*) buffer++;
                                                                
                                                                if(*_tmp_6608) {
                                                                    uint64_t* _tmp_6609 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = *_tmp_6609;
                                                                    __aux64__ += INT64_MIN;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                                else
                                                                {
                                                                    uint32_t* _tmp_6609 = (uint32_t*) buffer; buffer += 4;
                                                                    __aux64__ = *_tmp_6609;
                                                                    __aux64__ += INT32_MIN;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint8_t* _tmp_6607 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6607;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value = __aux64__;
                                                            
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006015\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                            }
                                                            
                                                            // Field name: dangerous_goods_type
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) datatype(Int32)
                                                            uint8_t* _tmp_6610 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6610;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006016\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            // Field name: special_transport_type
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_6611 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6611 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006017\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].special_transport_type.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6611 = __aux64__;
                                                            for(int a = 0; a < _if__tmp_6611; a++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].special_transport_type.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].special_transport_type.values[a] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_217 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                    {
                                                        its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6612;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage.push_back(_tmp_6612);
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_6613 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6613;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006018\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].equal_to.elements[z].usage[0].value);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint16_t* _tmp_6614 = (uint16_t*)buffer;  // OpenType length
                                                        buffer += 2 + int(*_tmp_6614);            // Ignoring opentype data
                                                    }
                                                }
                                                
                                                // Field name: not_equal_to
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_3173 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006019\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.: " << int(*_ext_flag_3173);
                                                }
                                                
                                                int16_t* _tmp_6615 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6615;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6615 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006020\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to. size: " << int(*_tmp_6615);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int b = 0; b < _if__tmp_6615; b++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_b;  // CHOICE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements.push_back(seqof_b);
                                                
                                                    // Choice
                                                    uint8_t* _ext_flag_3174 = (uint8_t*)buffer++; // ext flag
                                                    
                                                       // #0  simpleVehicleType   StationType   
                                                       // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                       // #2  iso3833VehicleType   Iso3833VehicleType   
                                                       // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                       // #4  engineCharacteristics   EngineCharacteristics   
                                                       // #5  loadType   LoadType   
                                                       // #6  usage   VehicleRole   
                                                    uint8_t _choice_219 = *(buffer++);
                                                    
                                                    if(*_ext_flag_3174)
                                                        _choice_219 += 6 + 1; // Ext addition
                                                    
                                                    if(_choice_219 == 0) {
                                                        its_container_v1_its_container_msgs::msg::StationType _tmp_6616;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type.push_back(_tmp_6616);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6617 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6617;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006021\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_219 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_6618;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code.push_back(_tmp_6618);
                                                    
                                                        // Choice
                                                           // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                           // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                           // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                           // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                        uint8_t _choice_220 = *(buffer++);
                                                        
                                                        if(_choice_220 == 0) {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_6619;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_6619);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(6) span(7) datatype(Int32)
                                                            uint8_t* _tmp_6620 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6620;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006022\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                            }
                                                        }
                                                        else if(_choice_220 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_6621;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_6621);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_6622 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6622;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006023\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                            }
                                                        }
                                                        else if(_choice_220 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_6623;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_6623);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(2) span(3) datatype(Int32)
                                                            uint8_t* _tmp_6624 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6624;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006024\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                            }
                                                        }
                                                        else if(_choice_220 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_6625;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_6625);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(3) span(4) datatype(Int32)
                                                            uint8_t* _tmp_6626 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6626;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006025\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            logger->warning() << "Wrong option (" << static_cast<int>(_choice_220) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].eu_vehicle_category_code[0]'; message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_219 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                    {
                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_6627;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type.push_back(_tmp_6627);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6628 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6628;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006026\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_219 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_6629;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value.push_back(_tmp_6629);
                                                    
                                                            // EnvironmentalCharacteristics  SEQUENCE
                                                                //  euroValue  EuroValue      
                                                                //  copValue   CopValue       
                                                            
                                                            // Field name: euro_value
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_6630 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6630;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006027\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].euro_value.value);
                                                            }
                                                            
                                                            // Field name: cop_value
                                                            // Enumerated
                                                            // INT32  min(0) max(8) span(9) datatype(Int32)
                                                            uint8_t* _tmp_6631 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6631;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006028\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].euro_and_co2value[0].cop_value.value);
                                                            }
                                                    }
                                                    else if(_choice_219 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                    {
                                                        dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_6632;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics.push_back(_tmp_6632);
                                                    
                                                        // Integer
                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                        uint8_t* _tmp_6633 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6633;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006029\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_219 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::LoadType _tmp_6634;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type.push_back(_tmp_6634);
                                                    
                                                            // LoadType  SEQUENCE
                                                                //  goodsType            GoodsType                
                                                                //  dangerousGoodsType   DangerousGoodsBasic      
                                                                //  specialTransportType SpecialTransportType     
                                                            
                                                            // Field name: goods_type
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _ext_flag_3182 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006030\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.: " << int(*_ext_flag_3182);
                                                            }
                                                            
                                                            if(*_ext_flag_3182) {
                                                                uint8_t* _tmp_6636 = (uint8_t*) buffer++;
                                                                
                                                                if(*_tmp_6636) {
                                                                    uint64_t* _tmp_6637 = (uint64_t*)buffer; buffer += 8;
                                                                    __aux64__ = *_tmp_6637;
                                                                    __aux64__ += INT64_MIN;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                                else
                                                                {
                                                                    uint32_t* _tmp_6637 = (uint32_t*) buffer; buffer += 4;
                                                                    __aux64__ = *_tmp_6637;
                                                                    __aux64__ += INT32_MIN;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint8_t* _tmp_6635 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6635;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                            
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006031\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                            }
                                                            
                                                            // Field name: dangerous_goods_type
                                                            // Enumerated
                                                            // INT32  min(0) max(19) span(20) datatype(Int32)
                                                            uint8_t* _tmp_6638 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6638;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006032\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].dangerous_goods_type.value);
                                                            }
                                                            
                                                            // Field name: special_transport_type
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_6639 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6639 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006033\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].special_transport_type.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6639 = __aux64__;
                                                            for(int c = 0; c < _if__tmp_6639; c++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].special_transport_type.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].special_transport_type.values[c] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_219 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                    {
                                                        its_container_v1_its_container_msgs::msg::VehicleRole _tmp_6640;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage.push_back(_tmp_6640);
                                                    
                                                        // Enumerated
                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                        uint8_t* _tmp_6641 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6641;
                                                        __aux64__ += 0;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value = __aux64__;
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006034\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].not_equal_to.elements[b].usage[0].value);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint16_t* _tmp_6642 = (uint16_t*)buffer;  // OpenType length
                                                        buffer += 2 + int(*_tmp_6642);            // Ignoring opentype data
                                                    }
                                                }
                                                
                                                // Field name: ranges
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(4) span(4)
                                                uint8_t* _ext_flag_3185 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006035\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.: " << int(*_ext_flag_3185);
                                                }
                                                
                                                int16_t* _tmp_6643 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6643;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6643 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006036\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges. size: " << int(*_tmp_6643);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int d = 0; d < _if__tmp_6643; d++) {
                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_d;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements.push_back(seqof_d);
                                                
                                                        // VehicleCharacteristicsRanges  SEQUENCE
                                                            //  comparisonOperator ComparisonOperator                      
                                                            //  limits             VehicleCharacteristicsRanges_limits     
                                                        
                                                        // Field name: comparison_operator
                                                        // Integer
                                                        // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                        uint8_t* _tmp_6644 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6644;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006037\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: limits
                                                        // Choice
                                                        uint8_t* _ext_flag_3186 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                           // #1  vehicleDimensions   VehicleDimensions   
                                                           // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                           // #3  axleWeightLimits   AxleWeightLimits   
                                                           // #4  passengerCapacity   PassengerCapacity   
                                                           // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                           // #6  dieselEmissionValues   DieselEmissionValues   
                                                           // #7  soundLevel   SoundLevel   
                                                        uint8_t _choice_221 = *(buffer++);
                                                        
                                                        if(*_ext_flag_3186)
                                                            _choice_221 += 7 + 1; // Ext addition
                                                        
                                                        if(_choice_221 == 0) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_6645;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles.push_back(_tmp_6645);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                            uint8_t* _tmp_6646 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6646;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006038\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_221 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_6647;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions.push_back(_tmp_6647);
                                                        
                                                                // VehicleDimensions  SEQUENCE
                                                                    //  vehicleLengthOverall Int1           
                                                                    //  vehicleHeigthOverall Int1           
                                                                    //  vehicleWidthOverall  Int1           
                                                                
                                                                // Field name: vehicle_length_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6648 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6648;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006039\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_heigth_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6649 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6649;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006040\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_width_overall
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6650 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6650;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006041\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_6651;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits.push_back(_tmp_6651);
                                                        
                                                                // VehicleWeightLimits  SEQUENCE
                                                                    //  vehicleMaxLadenWeight     Int2           
                                                                    //  vehicleTrainMaximumWeight Int2           
                                                                    //  vehicleWeightUnladen      Int2           
                                                                
                                                                // Field name: vehicle_max_laden_weight
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6652 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6652;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006042\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_train_maximum_weight
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6653 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6653;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006043\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: vehicle_weight_unladen
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6654 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6654;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006044\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_6655;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits.push_back(_tmp_6655);
                                                        
                                                                // AxleWeightLimits  SEQUENCE
                                                                    //  maxLadenweightOnAxle1 Int2           
                                                                    //  maxLadenweightOnAxle2 Int2           
                                                                    //  maxLadenweightOnAxle3 Int2           
                                                                    //  maxLadenweightOnAxle4 Int2           
                                                                    //  maxLadenweightOnAxle5 Int2           
                                                                
                                                                // Field name: max_ladenweight_on_axle1
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6656 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6656;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006045\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle2
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6657 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6657;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006046\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle3
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6658 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6658;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006047\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle4
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6659 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6659;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006048\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: max_ladenweight_on_axle5
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6660 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6660;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006049\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_6661;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity.push_back(_tmp_6661);
                                                        
                                                                // PassengerCapacity  SEQUENCE
                                                                    //  numberOfSeats          Int1           
                                                                    //  numberOfStandingPlaces Int1           
                                                                
                                                                // Field name: number_of_seats
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6662 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6662;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006050\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: number_of_standing_places
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6663 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6663;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006051\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_6664;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values.push_back(_tmp_6664);
                                                        
                                                                // ExhaustEmissionValues  SEQUENCE
                                                                    //  unitType      UnitType                             
                                                                    //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                    //  emissionHC    Int2                                 
                                                                    //  emissionNOX   Int2                                 
                                                                    //  emissionHCNOX Int2                                 
                                                                
                                                                // Field name: unit_type
                                                                // Enumerated
                                                                // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                uint8_t* _tmp_6665 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6665;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006052\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].unit_type.value);
                                                                }
                                                                
                                                                // Field name: emission_co
                                                                // Integer
                                                                // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                uint16_t* _tmp_6666 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6666;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006053\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_hc
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6667 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6667;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006054\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_nox
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6668 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6668;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006055\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: emission_hcnox
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6669 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6669;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006056\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_6670;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values.push_back(_tmp_6670);
                                                        
                                                                // DieselEmissionValues  SEQUENCE
                                                                    //  particulate     DieselEmissionValues_particulate     
                                                                    //  absorptionCoeff Int2                                 
                                                                
                                                                // Field name: particulate
                                                                    // DieselEmissionValues_particulate  SEQUENCE
                                                                        //  unitType   UnitType                                   
                                                                        //  value      DieselEmissionValues_particulate_value     
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_6671 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6671;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006057\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_6672 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6672;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006058\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: absorption_coeff
                                                                // Integer
                                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                uint16_t* _tmp_6673 = (uint16_t*) buffer; buffer += 2;
                                                                __aux64__ = *_tmp_6673;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006059\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_221 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_6674;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level.push_back(_tmp_6674);
                                                        
                                                                // SoundLevel  SEQUENCE
                                                                    //  soundstationary Int1           
                                                                    //  sounddriveby    Int1           
                                                                
                                                                // Field name: soundstationary
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6675 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6675;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006060\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: sounddriveby
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_6676 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6676;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006061\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].vehicle_characteristics[0].elements[n].train[0].ranges.elements[d].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_6677 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_6677);            // Ignoring opentype data
                                                        }
                                                }
                                        }
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics.size() != 0) {
                                // Field name: driver_characteristics
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_6678 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_6678;
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006062\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value) << 
                                                 " ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].driver_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id.size() != 0) {
                                // Field name: layout_id
                                // Integer
                                // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                uint8_t* _ext_flag_3189 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006063\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].: " << int(*_ext_flag_3189);
                                }
                                
                                if(*_ext_flag_3189) {
                                    uint8_t* _tmp_6680 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_6680) {
                                        uint64_t* _tmp_6681 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_6681;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_6681 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_6681;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_6679 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6679;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006064\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value) << 
                                                     " ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].layout_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id.size() != 0) {
                                // Field name: pre_storedlayout_id
                                // Integer
                                // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                uint8_t* _ext_flag_3190 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006065\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].: " << int(*_ext_flag_3190);
                                }
                                
                                if(*_ext_flag_3190) {
                                    uint8_t* _tmp_6683 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_6683) {
                                        uint64_t* _tmp_6684 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_6684;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_6684 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_6684;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_6682 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6682;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006066\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value) << 
                                                     " ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].pre_storedlayout_id[0].value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            // Field name: road_sign_codes
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(4) span(4)
                            uint8_t* _ext_flag_3191 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006067\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.: " << int(*_ext_flag_3191);
                            }
                            
                            int16_t* _tmp_6685 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_6685;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_6685 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006068\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes. size: " << int(*_tmp_6685);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                return false;
                            }
                            
                            
                            for(int e = 0; e < _if__tmp_6685; e++) {
                                dsrc_v2_ivi_msgs::msg::RSCode seqof_e;  // SEQUENCE
                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements.push_back(seqof_e);
                            
                                    // RSCode  SEQUENCE
                                        //  layoutComponentId RSCode_layoutComponentId   OPTIONAL  
                                        //  code              RSCode_code                  
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::RSCodeLayoutComponentId _tmp_6686;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id.push_back(_tmp_6686);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006069\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id " << tools::green("present");
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id.size() != 0) {
                                        // Field name: layout_component_id
                                        // Integer
                                        // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                        uint8_t* _ext_flag_3192 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006070\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].: " << int(*_ext_flag_3192);
                                        }
                                        
                                        if(*_ext_flag_3192) {
                                            uint8_t* _tmp_6688 = (uint8_t*) buffer++;
                                            
                                            if(*_tmp_6688) {
                                                uint64_t* _tmp_6689 = (uint64_t*)buffer; buffer += 8;
                                                __aux64__ = *_tmp_6689;
                                                __aux64__ += INT64_MIN;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value = __aux64__;
                                            }
                                            else
                                            {
                                                uint32_t* _tmp_6689 = (uint32_t*) buffer; buffer += 4;
                                                __aux64__ = *_tmp_6689;
                                                __aux64__ += INT32_MIN;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value = __aux64__;
                                            }
                                        }
                                        else
                                        {
                                            uint8_t* _tmp_6687 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6687;
                                            __aux64__ += 1;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value = __aux64__;
                                        
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006071\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                return false;
                                            }
                                            
                                        }
                                    }
                                    
                                    // Field name: code
                                    // Choice
                                    uint8_t* _ext_flag_3193 = (uint8_t*)buffer++; // ext flag
                                    
                                       // #0  viennaConvention   VcCode   
                                       // #1  iso14823   ISO14823Code   
                                       // #2  itisCodes   RSCode_code_itisCodes   
                                       // #3  anyCatalogue   AnyCatalogue   
                                    uint8_t _choice_222 = *(buffer++);
                                    
                                    if(*_ext_flag_3193)
                                        _choice_222 += 3 + 1; // Ext addition
                                    
                                    if(_choice_222 == 0) {
                                        dsrc_v2_ivi_msgs::msg::VcCode _tmp_6690;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention.push_back(_tmp_6690);
                                    
                                            // VcCode  SEQUENCE
                                                //  roadSignClass VcClass                 
                                                //  roadSignCode  VcCode_roadSignCode     
                                                //  vcOption      VcOption                
                                                //  validity      VcCode_validity       OPTIONAL  
                                                //  value         VcCode_value          OPTIONAL  
                                                //  unit          RSCUnit               OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::VcCodeValidity _tmp_6691;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity.push_back(_tmp_6691);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006072\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::VcCodeValue _tmp_6692;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value.push_back(_tmp_6692);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006073\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::RSCUnit _tmp_6693;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit.push_back(_tmp_6693);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006074\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit " << tools::green("present");
                                            }
                                            
                                            // Field name: road_sign_class
                                            // Integer
                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                            uint8_t* _tmp_6694 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6694;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006075\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_class.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: road_sign_code
                                            // Integer
                                            // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                            uint8_t* _tmp_6695 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6695;
                                            __aux64__ += 1;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006076\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].road_sign_code.value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: vc_option
                                            // Integer
                                            // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                            uint8_t* _tmp_6696 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6696;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006077\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].vc_option.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity.size() != 0) {
                                                // Field name: validity
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_3194 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006078\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].: " << int(*_ext_flag_3194);
                                                }
                                                
                                                int16_t* _tmp_6697 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6697;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6697 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006079\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0]. size: " << int(*_tmp_6697);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int f = 0; f < _if__tmp_6697; f++) {
                                                    dsrc_v2_ivi_msgs::msg::DTM seqof_f;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements.push_back(seqof_f);
                                                
                                                        // DTM  SEQUENCE
                                                            //  year        DTM_year          OPTIONAL  
                                                            //  month_day   DTM_month_day     OPTIONAL  
                                                            //  pmd         PMD               OPTIONAL  
                                                            //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                            //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                            //  period      HoursMinutes      OPTIONAL  
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMYear _tmp_6698;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year.push_back(_tmp_6698);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006080\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_6699;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day.push_back(_tmp_6699);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006081\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::PMD _tmp_6700;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd.push_back(_tmp_6700);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006082\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_6701;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes.push_back(_tmp_6701);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006083\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_6702;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week.push_back(_tmp_6702);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006084\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_6703;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period.push_back(_tmp_6703);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006085\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period " << tools::green("present");
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year.size() != 0) {
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3195 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006086\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.: " << int(*_ext_flag_3195);
                                                                }
                                                                
                                                                if(*_ext_flag_3195) {
                                                                    uint8_t* _tmp_6705 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6705) {
                                                                        uint64_t* _tmp_6706 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6706;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6706 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6706;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6704 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6704;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006087\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3196 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006088\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.: " << int(*_ext_flag_3196);
                                                                }
                                                                
                                                                if(*_ext_flag_3196) {
                                                                    uint8_t* _tmp_6708 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6708) {
                                                                        uint64_t* _tmp_6709 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6709;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6709 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6709;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6707 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6707;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006089\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day.size() != 0) {
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6710 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6710;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006090\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6711 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6711;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006091\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6712 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6712;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006092\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6713 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6713;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006093\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd.size() != 0) {
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_6714 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6714 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006094\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd[0].value: " << __aux64__;
                                                            
                                                            int _if__tmp_6714 = __aux64__;
                                                            for(int g = 0; g < _if__tmp_6714; g++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd[0].values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd[0].values[g] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes.size() != 0) {
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6715 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6715;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006095\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6716 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6716;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006096\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6717 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6717;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006097\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6718 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6718;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006098\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week.size() != 0) {
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_6719 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6719 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006099\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week[0].value: " << __aux64__;
                                                            
                                                            int _if__tmp_6719 = __aux64__;
                                                            for(int h = 0; h < _if__tmp_6719; h++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week[0].values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week[0].values[h] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period.size() != 0) {
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_6720 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6720;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006100\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_6721 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6721;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006101\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].validity[0].elements[f].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value.size() != 0) {
                                                // Field name: value
                                                // Integer
                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                uint16_t* _tmp_6722 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_6722;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006102\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].value[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit.size() != 0) {
                                                // Field name: unit
                                                // Integer
                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                uint8_t* _tmp_6723 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_6723;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006103\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.vienna_convention[0].unit[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                    return false;
                                                }
                                            }
                                    }
                                    else if(_choice_222 == 1)  // CHOICE RSCode_code  fieldName(iso14823)
                                    {
                                        dsrc_v2_ivi_msgs::msg::ISO14823Code _tmp_6724;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823.push_back(_tmp_6724);
                                    
                                            // ISO14823Code  SEQUENCE
                                                //  pictogramCode ISO14823Code_pictogramCode     
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ISO14823Attributes _tmp_6725;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes.push_back(_tmp_6725);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006104\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes " << tools::green("present");
                                            }
                                            
                                            // Field name: pictogram_code
                                                // ISO14823Code_pictogramCode  SEQUENCE
                                                    //  countryCode           ISO14823Code_pictogramCode_countryCode             OPTIONAL  
                                                    //  serviceCategoryCode   ISO14823Code_pictogramCode_serviceCategoryCode       
                                                    //  pictogramCategoryCode ISO14823Code_pictogramCode_pictogramCategoryCode     
                                                if(*(buffer++)) { 
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeCountryCode _tmp_6726;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.country_code.push_back(_tmp_6726);
                                                
                                                    if(debug)
                                                        logger->debug() << "|\033[38;5;94m006105\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.country_code " << tools::green("present");
                                                }
                                                
                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.country_code.size() != 0) {
                                                    // Field name: country_code
                                                    // OctetString
                                                    // min(2) max(2) span(1)
                                                    uint8_t* _tmp_6727 = (uint8_t*)buffer;
                                                    buffer += 1;
                                                    __aux64__ = *_tmp_6727 + 2;
                                                    
                                                    int _if__tmp_6727 = __aux64__;
                                                    for(int i = 0; i < _if__tmp_6727; i++) {
                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.country_code[0].values.push_back(*__n__);
                                                    }
                                                }
                                                
                                                // Field name: service_category_code
                                                // Choice
                                                uint8_t* _ext_flag_3197 = (uint8_t*)buffer++; // ext flag
                                                
                                                   // #0  trafficSignPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_trafficSignPictogram   
                                                   // #1  publicFacilitiesPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_publicFacilitiesPictogram   
                                                   // #2  ambientOrRoadConditionPictogram   ISO14823Code_pictogramCode_serviceCategoryCode_ambientOrRoadConditionPictogram   
                                                uint8_t _choice_223 = *(buffer++);
                                                
                                                if(*_ext_flag_3197)
                                                    _choice_223 += 2 + 1; // Ext addition
                                                
                                                if(_choice_223 == 0) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodeTrafficSignPictogram _tmp_6728;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram.push_back(_tmp_6728);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                    uint8_t* _ext_flag_3198 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006106\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].: " << int(*_ext_flag_3198);
                                                    }
                                                    
                                                    uint8_t* _tmp_6729 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_6729;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006107\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.traffic_sign_pictogram[0].value);
                                                    }
                                                }
                                                else if(_choice_223 == 1)  // CHOICE ISO14823Code_pictogramCode_serviceCategoryCode  fieldName(public_facilities_pictogram)
                                                {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodePublicFacilitiesPictogram _tmp_6730;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram.push_back(_tmp_6730);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(0) span(1) datatype(Int32)
                                                    uint8_t* _ext_flag_3199 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006108\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].: " << int(*_ext_flag_3199);
                                                    }
                                                    
                                                    uint8_t* _tmp_6731 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_6731;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006109\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.public_facilities_pictogram[0].value);
                                                    }
                                                }
                                                else if(_choice_223 == 2)  // CHOICE ISO14823Code_pictogramCode_serviceCategoryCode  fieldName(ambient_or_road_condition_pictogram)
                                                {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823CodePictogramCodeServiceCategoryCodeAmbientOrRoadConditionPictogram _tmp_6732;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram.push_back(_tmp_6732);
                                                
                                                    // Enumerated
                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                    uint8_t* _ext_flag_3200 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006110\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].: " << int(*_ext_flag_3200);
                                                    }
                                                    
                                                    uint8_t* _tmp_6733 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_6733;
                                                    __aux64__ += 0;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value = __aux64__;
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006111\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value) << 
                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.service_category_code.ambient_or_road_condition_pictogram[0].value);
                                                    }
                                                }
                                                else
                                                {
                                                    uint16_t* _tmp_6734 = (uint16_t*)buffer;  // OpenType length
                                                    buffer += 2 + int(*_tmp_6734);            // Ignoring opentype data
                                                }
                                                
                                                // Field name: pictogram_category_code
                                                    // ISO14823Code_pictogramCode_pictogramCategoryCode  SEQUENCE
                                                        //  nature       ISO14823Code_pictogramCode_pictogramCategoryCode_nature           
                                                        //  serialNumber ISO14823Code_pictogramCode_pictogramCategoryCode_serialNumber     
                                                    
                                                    // Field name: nature
                                                    // Integer
                                                    // UINT8  min(1) max(9) span(9) datatype(UInt8)
                                                    uint8_t* _tmp_6735 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_6735;
                                                    __aux64__ += 1;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006112\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value) << 
                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.nature.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    // Field name: serial_number
                                                    // Integer
                                                    // UINT8  min(0) max(99) span(100) datatype(UInt8)
                                                    uint8_t* _tmp_6736 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_6736;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006113\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value) << 
                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 99) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].pictogram_code.pictogram_category_code.serial_number.value' " << (__aux64__) << " exceeds max allowable (99); message dropped.";
                                                        return false;
                                                    }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes.size() != 0) {
                                                // Field name: attributes
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_3201 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006114\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].: " << int(*_ext_flag_3201);
                                                }
                                                
                                                int16_t* _tmp_6737 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6737;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6737 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006115\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0]. size: " << int(*_tmp_6737);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int j = 0; j < _if__tmp_6737; j++) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823AttributesElement seqof_j;  // CHOICE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements.push_back(seqof_j);
                                                
                                                    // Choice
                                                       // #0  dtm   DTM   
                                                       // #1  edt   EDT   
                                                       // #2  dfl   DFL   
                                                       // #3  ved   VED   
                                                       // #4  spe   SPE   
                                                       // #5  roi   ROI   
                                                       // #6  dbv   DBV   
                                                       // #7  ddd   DDD   
                                                    uint8_t _choice_224 = *(buffer++);
                                                    
                                                    if(_choice_224 == 0) {
                                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_6738;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm.push_back(_tmp_6738);
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_6739;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year.push_back(_tmp_6739);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006116\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_6740;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day.push_back(_tmp_6740);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006117\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_6741;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd.push_back(_tmp_6741);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006118\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_6742;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes.push_back(_tmp_6742);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006119\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_6743;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week.push_back(_tmp_6743);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006120\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_6744;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period.push_back(_tmp_6744);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006121\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year.size() != 0) {
                                                                // Field name: year
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    
                                                                    // Field name: syr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_3203 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006122\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.: " << int(*_ext_flag_3203);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3203) {
                                                                        uint8_t* _tmp_6746 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6746) {
                                                                            uint64_t* _tmp_6747 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6747;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6747 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6747;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6745 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6745;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006123\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: eyr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_3204 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006124\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.: " << int(*_ext_flag_3204);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3204) {
                                                                        uint8_t* _tmp_6749 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6749) {
                                                                            uint64_t* _tmp_6750 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6750;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6750 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6750;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6748 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6748;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006125\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day.size() != 0) {
                                                                // Field name: month_day
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    
                                                                    // Field name: smd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_6751 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6751;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006126\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_6752 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6752;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006127\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: emd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_6753 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6753;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006128\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_6754 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6754;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006129\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd.size() != 0) {
                                                                // Field name: pmd
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_6755 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6755 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006130\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_6755 = __aux64__;
                                                                for(int k = 0; k < _if__tmp_6755; k++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd[0].values[k] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes.size() != 0) {
                                                                // Field name: hour_minutes
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    
                                                                    // Field name: shm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_6756 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6756;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006131\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_6757 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6757;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006132\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: ehm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_6758 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6758;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006133\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_6759 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6759;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006134\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week.size() != 0) {
                                                                // Field name: day_of_week
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                uint8_t* _tmp_6760 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6760 + 8;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006135\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_6760 = __aux64__;
                                                                for(int l = 0; l < _if__tmp_6760; l++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week[0].values[l] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period.size() != 0) {
                                                                // Field name: period
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6761 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6761;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006136\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6762 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6762;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006137\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dtm[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_224 == 1)  // CHOICE ISO14823Attributes_element  fieldName(edt)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::EDT _tmp_6763;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt.push_back(_tmp_6763);
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3205 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006138\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.: " << int(*_ext_flag_3205);
                                                                }
                                                                
                                                                if(*_ext_flag_3205) {
                                                                    uint8_t* _tmp_6765 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6765) {
                                                                        uint64_t* _tmp_6766 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6766;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6766 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6766;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6764 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6764;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006139\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3206 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006140\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.: " << int(*_ext_flag_3206);
                                                                }
                                                                
                                                                if(*_ext_flag_3206) {
                                                                    uint8_t* _tmp_6768 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6768) {
                                                                        uint64_t* _tmp_6769 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6769;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6769 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6769;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6767 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6767;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006141\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].year.eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                            
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6770 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6770;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006142\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6771 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6771;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006143\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6772 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6772;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006144\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6773 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6773;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006145\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].month_day.emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_6774 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6774 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006146\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].pmd.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6774 = __aux64__;
                                                            for(int m = 0; m < _if__tmp_6774; m++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].pmd.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].pmd.values[m] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].pmd.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].pmd.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6775 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6775;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006147\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6776 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6776;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006148\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6777 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6777;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006149\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6778 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6778;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006150\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_6779 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6779 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006151\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].day_of_week.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6779 = __aux64__;
                                                            for(int n = 0; n < _if__tmp_6779; n++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].day_of_week.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].day_of_week.values[n] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].day_of_week.value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].day_of_week.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_6780 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6780;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006152\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_6781 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6781;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006153\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].edt[0].period.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                    }
                                                    else if(_choice_224 == 2)  // CHOICE ISO14823Attributes_element  fieldName(dfl)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DFL _tmp_6782;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl.push_back(_tmp_6782);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                                        uint8_t* _tmp_6783 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6783;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006154\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dfl[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_224 == 3)  // CHOICE ISO14823Attributes_element  fieldName(ved)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::VED _tmp_6784;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved.push_back(_tmp_6784);
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6785;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei.push_back(_tmp_6785);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006155\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6786;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid.push_back(_tmp_6786);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006156\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6787;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln.push_back(_tmp_6787);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006157\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Weight _tmp_6788;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei.push_back(_tmp_6788);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006158\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei.size() != 0) {
                                                                // Field name: hei
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6789 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6789;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006159\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6790 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6790;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006160\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].hei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid.size() != 0) {
                                                                // Field name: wid
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6791 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6791;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006161\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6792 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6792;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006162\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wid[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln.size() != 0) {
                                                                // Field name: vln
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6793 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6793;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006163\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6794 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6794;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006164\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].vln[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei.size() != 0) {
                                                                // Field name: wei
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6795 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6795;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006165\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6796 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6796;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006166\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ved[0].wei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_224 == 4)  // CHOICE ISO14823Attributes_element  fieldName(spe)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::SPE _tmp_6797;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe.push_back(_tmp_6797);
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPESpm _tmp_6798;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm.push_back(_tmp_6798);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006167\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPEMns _tmp_6799;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns.push_back(_tmp_6799);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006168\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm.size() != 0) {
                                                                // Field name: spm
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_6800 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6800;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006169\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].spm[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns.size() != 0) {
                                                                // Field name: mns
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_6801 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6801;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006170\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].mns[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                                            uint8_t* _tmp_6802 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6802;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006171\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].spe[0].unit.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_224 == 5)  // CHOICE ISO14823Attributes_element  fieldName(roi)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::ROI _tmp_6803;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi.push_back(_tmp_6803);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                                        uint8_t* _tmp_6804 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6804;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006172\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].roi[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_224 == 6)  // CHOICE ISO14823Attributes_element  fieldName(dbv)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DBV _tmp_6805;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv.push_back(_tmp_6805);
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            
                                                            // Field name: value
                                                            // Integer
                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                            uint16_t* _tmp_6806 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = *_tmp_6806;
                                                            __aux64__ += 1;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006173\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value;
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _tmp_6807 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6807;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006174\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].dbv[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_224 == 7)  // CHOICE ISO14823Attributes_element  fieldName(ddd)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DDD _tmp_6808;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd.push_back(_tmp_6808);
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcj _tmp_6809;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj.push_back(_tmp_6809);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006175\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcr _tmp_6810;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr.push_back(_tmp_6810);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006176\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDTpl _tmp_6811;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl.push_back(_tmp_6811);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006177\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj.size() != 0) {
                                                                // Field name: dcj
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6812 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6812;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006178\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcj[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr.size() != 0) {
                                                                // Field name: dcr
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6813 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6813;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006179\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].dcr[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl.size() != 0) {
                                                                // Field name: tpl
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6814 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6814;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006180\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].tpl[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: io_list
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                                            uint8_t* _ext_flag_3207 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006181\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.: " << int(*_ext_flag_3207);
                                                            }
                                                            
                                                            int16_t* _tmp_6815 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_6815;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_6815 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006182\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list. size: " << int(*_tmp_6815);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int o = 0; o < _if__tmp_6815; o++) {
                                                                dsrc_v2_ivi_msgs::msg::DDDIO seqof_o;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements.push_back(seqof_o);
                                                            
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODp _tmp_6816;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp.push_back(_tmp_6816);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006183\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODr _tmp_6817;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr.push_back(_tmp_6817);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006184\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIORne _tmp_6818;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne.push_back(_tmp_6818);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006185\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnId _tmp_6819;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id.push_back(_tmp_6819);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006186\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnText _tmp_6820;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_text.push_back(_tmp_6820);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006187\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_text " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_6821;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp.push_back(_tmp_6821);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006188\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_6822;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp.push_back(_tmp_6822);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006189\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp " << tools::green("present");
                                                                    }
                                                                    
                                                                    // Field name: drn
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_6823 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6823;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006190\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].drn.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp.size() != 0) {
                                                                        // Field name: dp
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_3208 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006191\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].: " << int(*_ext_flag_3208);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_6824 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_6824;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_6824 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006192\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0]. size: " << int(*_tmp_6824);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int p = 0; p < _if__tmp_6824; p++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationPlace seqof_p;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements.push_back(seqof_p);
                                                                        
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlaceDepBlob _tmp_6825;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_blob.push_back(_tmp_6825);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006193\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_blob " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnId _tmp_6826;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id.push_back(_tmp_6826);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006194\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnText _tmp_6827;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_text.push_back(_tmp_6827);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006195\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: dep_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_3209 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006196\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.: " << int(*_ext_flag_3209);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_3209) {
                                                                                    uint8_t* _tmp_6829 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_6829) {
                                                                                        uint64_t* _tmp_6830 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_6830;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_6830 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_6830;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_6828 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_6828;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006197\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_blob.size() != 0) {
                                                                                    // Field name: dep_blob
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6831 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = *_tmp_6831;
                                                                                    
                                                                                    int _if__tmp_6831 = __aux64__;
                                                                                    for(int q = 0; q < _if__tmp_6831; q++) {
                                                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].dep_blob[0].values.push_back(*__n__);
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id.size() != 0) {
                                                                                    // Field name: pln_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_6832 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_6832;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006198\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_text.size() != 0) {
                                                                                    // Field name: pln_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6833 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_6833;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_6833 = __aux64__;
                                                                                    for(int r = 0; r < _if__tmp_6833; r++) {  // DestinationPlace_plnText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dp[0].elements[p].pln_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr.size() != 0) {
                                                                        // Field name: dr
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_3210 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006199\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].: " << int(*_ext_flag_3210);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_6834 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_6834;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_6834 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006200\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0]. size: " << int(*_tmp_6834);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int s = 0; s < _if__tmp_6834; s++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationRoad seqof_s;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements.push_back(seqof_s);
                                                                        
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonId _tmp_6835;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id.push_back(_tmp_6835);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006201\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonText _tmp_6836;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_text.push_back(_tmp_6836);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006202\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: der_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_3211 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006203\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.: " << int(*_ext_flag_3211);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_3211) {
                                                                                    uint8_t* _tmp_6838 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_6838) {
                                                                                        uint64_t* _tmp_6839 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_6839;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_6839 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_6839;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_6837 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_6837;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006204\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].der_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id.size() != 0) {
                                                                                    // Field name: ron_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_6840 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_6840;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006205\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_text.size() != 0) {
                                                                                    // Field name: ron_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6841 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_6841;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_6841 = __aux64__;
                                                                                    for(int t = 0; t < _if__tmp_6841; t++) {  // DestinationRoad_ronText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dr[0].elements[s].ron_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne.size() != 0) {
                                                                        // Field name: rne
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_6842 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6842;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006206\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].rne[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id.size() != 0) {
                                                                        // Field name: stn_id
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_6843 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6843;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006207\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_text.size() != 0) {
                                                                        // Field name: stn_text
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_6844 = (uint16_t*)buffer;
                                                                        __aux64__ = *_tmp_6844;
                                                                        buffer += 2;
                                                                        
                                                                        int _if__tmp_6844 = __aux64__;
                                                                        for(int u = 0; u < _if__tmp_6844; u++) {  // DDD_IO_stnText
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].stn_text[0].value += *__tmp__;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp.size() != 0) {
                                                                        // Field name: dcp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_6845 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_6845;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006208\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_6846 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_6846;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006209\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].dcp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp.size() != 0) {
                                                                        // Field name: ddp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_6847 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_6847;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006210\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_6848 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_6848;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006211\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j].ddd[0].io_list.elements[o].ddp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_224) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.iso14823[0].attributes[0].elements[j]'; message dropped.";
                                                        return false;
                                                    }
                                                }
                                            }
                                    }
                                    else if(_choice_222 == 2)  // CHOICE RSCode_code  fieldName(itis_codes)
                                    {
                                        dsrc_v2_ivi_msgs::msg::RSCodeCodeItisCodes _tmp_6849;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes.push_back(_tmp_6849);
                                    
                                        // Integer
                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                        uint16_t* _tmp_6850 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_6850;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006212\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value) << 
                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.itis_codes[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                            return false;
                                        }
                                    }
                                    else if(_choice_222 == 3)  // CHOICE RSCode_code  fieldName(any_catalogue)
                                    {
                                        dsrc_v2_ivi_msgs::msg::AnyCatalogue _tmp_6851;
                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue.push_back(_tmp_6851);
                                    
                                            // AnyCatalogue  SEQUENCE
                                                //  owner         Provider                       
                                                //  version       AnyCatalogue_version           
                                                //  pictogramCode AnyCatalogue_pictogramCode     
                                                //  value         AnyCatalogue_value           OPTIONAL  
                                                //  unit          RSCUnit                      OPTIONAL  
                                                //  attributes    ISO14823Attributes           OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::AnyCatalogueValue _tmp_6852;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value.push_back(_tmp_6852);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006213\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::RSCUnit _tmp_6853;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit.push_back(_tmp_6853);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006214\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::ISO14823Attributes _tmp_6854;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes.push_back(_tmp_6854);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006215\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes " << tools::green("present");
                                            }
                                            
                                            // Field name: owner
                                                // Provider  SEQUENCE
                                                    //  countryCode        CountryCode          
                                                    //  providerIdentifier IssuerIdentifier     
                                                
                                                // Field name: country_code
                                                // BitString
                                                // BIT_STRING  min(10) max(10) span(1)
                                                uint8_t* _tmp_6855 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_6855 + 10;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006216\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.country_code.value: " << __aux64__;
                                                
                                                int _if__tmp_6855 = __aux64__;
                                                for(int v = 0; v < _if__tmp_6855; v++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.country_code.values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.country_code.values[v] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.country_code.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.country_code.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                                    return false;
                                                }
                                                
                                                // Field name: provider_identifier
                                                // Integer
                                                // UINT16  min(0) max(16383) span(16384) datatype(UInt16)
                                                uint16_t* _tmp_6856 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_6856;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006217\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 16383) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].owner.provider_identifier.value' " << (__aux64__) << " exceeds max allowable (16383); message dropped.";
                                                    return false;
                                                }
                                            
                                            // Field name: version
                                            // Integer
                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                            uint8_t* _tmp_6857 = (uint8_t*) buffer++;
                                            __aux64__ = *_tmp_6857;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006218\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value);
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].version.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                return false;
                                            }
                                            
                                            // Field name: pictogram_code
                                            // Integer
                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                            uint16_t* _tmp_6858 = (uint16_t*) buffer; buffer += 2;
                                            __aux64__ = *_tmp_6858;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value = __aux64__;
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006219\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value) << 
                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value;
                                            }
                                            
                                            // ******************* MIN validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                return false;
                                            }
                                            // ******************* MAX validator *******************
                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].pictogram_code.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                return false;
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value.size() != 0) {
                                                // Field name: value
                                                // Integer
                                                // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                uint16_t* _tmp_6859 = (uint16_t*) buffer; buffer += 2;
                                                __aux64__ = *_tmp_6859;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006220\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value;
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].value[0].value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit.size() != 0) {
                                                // Field name: unit
                                                // Integer
                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                uint8_t* _tmp_6860 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_6860;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006221\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].unit[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes.size() != 0) {
                                                // Field name: attributes
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(8) span(8)
                                                uint8_t* _ext_flag_3212 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006222\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].: " << int(*_ext_flag_3212);
                                                }
                                                
                                                int16_t* _tmp_6861 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_6861;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_6861 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006223\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0]. size: " << int(*_tmp_6861);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int w = 0; w < _if__tmp_6861; w++) {
                                                    dsrc_v2_ivi_msgs::msg::ISO14823AttributesElement seqof_w;  // CHOICE
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements.push_back(seqof_w);
                                                
                                                    // Choice
                                                       // #0  dtm   DTM   
                                                       // #1  edt   EDT   
                                                       // #2  dfl   DFL   
                                                       // #3  ved   VED   
                                                       // #4  spe   SPE   
                                                       // #5  roi   ROI   
                                                       // #6  dbv   DBV   
                                                       // #7  ddd   DDD   
                                                    uint8_t _choice_225 = *(buffer++);
                                                    
                                                    if(_choice_225 == 0) {
                                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_6862;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm.push_back(_tmp_6862);
                                                    
                                                            // DTM  SEQUENCE
                                                                //  year        DTM_year          OPTIONAL  
                                                                //  month_day   DTM_month_day     OPTIONAL  
                                                                //  pmd         PMD               OPTIONAL  
                                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                                //  period      HoursMinutes      OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_6863;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year.push_back(_tmp_6863);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006224\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_6864;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day.push_back(_tmp_6864);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006225\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_6865;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd.push_back(_tmp_6865);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006226\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_6866;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes.push_back(_tmp_6866);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006227\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_6867;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week.push_back(_tmp_6867);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006228\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_6868;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period.push_back(_tmp_6868);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006229\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year.size() != 0) {
                                                                // Field name: year
                                                                    // DTM_year  SEQUENCE
                                                                        //  syr        DTM_year_syr     
                                                                        //  eyr        DTM_year_eyr     
                                                                    
                                                                    // Field name: syr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_3214 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006230\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.: " << int(*_ext_flag_3214);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3214) {
                                                                        uint8_t* _tmp_6870 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6870) {
                                                                            uint64_t* _tmp_6871 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6871;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6871 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6871;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6869 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6869;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006231\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: eyr
                                                                    // Integer
                                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                    uint8_t* _ext_flag_3215 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006232\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.: " << int(*_ext_flag_3215);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3215) {
                                                                        uint8_t* _tmp_6873 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_6873) {
                                                                            uint64_t* _tmp_6874 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_6874;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_6874 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_6874;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_6872 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6872;
                                                                        __aux64__ += 2000;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006233\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day.size() != 0) {
                                                                // Field name: month_day
                                                                    // DTM_month_day  SEQUENCE
                                                                        //  smd        MonthDay       
                                                                        //  emd        MonthDay       
                                                                    
                                                                    // Field name: smd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_6875 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6875;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006234\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_6876 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6876;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006235\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: emd
                                                                        // MonthDay  SEQUENCE
                                                                            //  month      MonthDay_month     
                                                                            //  day        MonthDay_day       
                                                                        
                                                                        // Field name: month
                                                                        // Integer
                                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                        uint8_t* _tmp_6877 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6877;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006236\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: day
                                                                        // Integer
                                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                        uint8_t* _tmp_6878 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6878;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006237\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd.size() != 0) {
                                                                // Field name: pmd
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_6879 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6879 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006238\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_6879 = __aux64__;
                                                                for(int x = 0; x < _if__tmp_6879; x++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd[0].values[x] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes.size() != 0) {
                                                                // Field name: hour_minutes
                                                                    // DTM_hourMinutes  SEQUENCE
                                                                        //  shm        HoursMinutes     
                                                                        //  ehm        HoursMinutes     
                                                                    
                                                                    // Field name: shm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_6880 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6880;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006239\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_6881 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6881;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006240\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: ehm
                                                                        // HoursMinutes  SEQUENCE
                                                                            //  hours      HoursMinutes_hours     
                                                                            //  mins       HoursMinutes_mins      
                                                                        
                                                                        // Field name: hours
                                                                        // Integer
                                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                        uint8_t* _tmp_6882 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6882;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006241\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: mins
                                                                        // Integer
                                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                        uint8_t* _tmp_6883 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_6883;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006242\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                            return false;
                                                                        }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week.size() != 0) {
                                                                // Field name: day_of_week
                                                                // BitString
                                                                // BIT_STRING  min(8) max(8) span(1)
                                                                uint8_t* _tmp_6884 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_6884 + 8;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006243\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week[0].value: " << __aux64__;
                                                                
                                                                int _if__tmp_6884 = __aux64__;
                                                                for(int y = 0; y < _if__tmp_6884; y++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week[0].values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week[0].values[y] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period.size() != 0) {
                                                                // Field name: period
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6885 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6885;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006244\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6886 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6886;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006245\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dtm[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_225 == 1)  // CHOICE ISO14823Attributes_element  fieldName(edt)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::EDT _tmp_6887;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt.push_back(_tmp_6887);
                                                    
                                                            // EDT  SEQUENCE
                                                                //  year        DTM_year            
                                                                //  month_day   DTM_month_day       
                                                                //  pmd         PMD                 
                                                                //  hourMinutes DTM_hourMinutes     
                                                                //  dayOfWeek   DayOfWeek           
                                                                //  period      HoursMinutes        
                                                            
                                                            // Field name: year
                                                                // DTM_year  SEQUENCE
                                                                    //  syr        DTM_year_syr     
                                                                    //  eyr        DTM_year_eyr     
                                                                
                                                                // Field name: syr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3216 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006246\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.: " << int(*_ext_flag_3216);
                                                                }
                                                                
                                                                if(*_ext_flag_3216) {
                                                                    uint8_t* _tmp_6889 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6889) {
                                                                        uint64_t* _tmp_6890 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6890;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6890 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6890;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6888 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6888;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006247\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: eyr
                                                                // Integer
                                                                // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                                uint8_t* _ext_flag_3217 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006248\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.: " << int(*_ext_flag_3217);
                                                                }
                                                                
                                                                if(*_ext_flag_3217) {
                                                                    uint8_t* _tmp_6892 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_6892) {
                                                                        uint64_t* _tmp_6893 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_6893;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_6893 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_6893;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_6891 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6891;
                                                                    __aux64__ += 2000;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006249\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].year.eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                            
                                                            // Field name: month_day
                                                                // DTM_month_day  SEQUENCE
                                                                    //  smd        MonthDay       
                                                                    //  emd        MonthDay       
                                                                
                                                                // Field name: smd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6894 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6894;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006250\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6895 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6895;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006251\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: emd
                                                                    // MonthDay  SEQUENCE
                                                                        //  month      MonthDay_month     
                                                                        //  day        MonthDay_day       
                                                                    
                                                                    // Field name: month
                                                                    // Integer
                                                                    // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                                    uint8_t* _tmp_6896 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6896;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006252\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: day
                                                                    // Integer
                                                                    // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                                    uint8_t* _tmp_6897 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6897;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006253\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].month_day.emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: pmd
                                                            // BitString
                                                            // BIT_STRING  min(4) max(4) span(1)
                                                            uint8_t* _tmp_6898 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6898 + 4;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006254\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].pmd.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6898 = __aux64__;
                                                            for(int z = 0; z < _if__tmp_6898; z++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].pmd.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].pmd.values[z] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].pmd.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].pmd.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: hour_minutes
                                                                // DTM_hourMinutes  SEQUENCE
                                                                    //  shm        HoursMinutes     
                                                                    //  ehm        HoursMinutes     
                                                                
                                                                // Field name: shm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6899 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6899;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006255\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6900 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6900;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006256\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                                
                                                                // Field name: ehm
                                                                    // HoursMinutes  SEQUENCE
                                                                        //  hours      HoursMinutes_hours     
                                                                        //  mins       HoursMinutes_mins      
                                                                    
                                                                    // Field name: hours
                                                                    // Integer
                                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                    uint8_t* _tmp_6901 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6901;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006257\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: mins
                                                                    // Integer
                                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                    uint8_t* _tmp_6902 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6902;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006258\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].hour_minutes.ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                        return false;
                                                                    }
                                                            
                                                            // Field name: day_of_week
                                                            // BitString
                                                            // BIT_STRING  min(8) max(8) span(1)
                                                            uint8_t* _tmp_6903 = (uint8_t*)buffer;
                                                            __aux64__ = *_tmp_6903 + 8;
                                                            buffer += 1;
                                                            
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006259\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].day_of_week.value: " << __aux64__;
                                                            
                                                            int _if__tmp_6903 = __aux64__;
                                                            for(int a = 0; a < _if__tmp_6903; a++) {
                                                                uint8_t __c__;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].day_of_week.values.push_back(__c__);
                                                                uint8_t* __b__ = (uint8_t*)buffer++;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].day_of_week.values[a] = (*__b__ == 1);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].day_of_week.value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].day_of_week.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: period
                                                                // HoursMinutes  SEQUENCE
                                                                    //  hours      HoursMinutes_hours     
                                                                    //  mins       HoursMinutes_mins      
                                                                
                                                                // Field name: hours
                                                                // Integer
                                                                // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                                uint8_t* _tmp_6904 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6904;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006260\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: mins
                                                                // Integer
                                                                // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                                uint8_t* _tmp_6905 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6905;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006261\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].edt[0].period.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                                    return false;
                                                                }
                                                    }
                                                    else if(_choice_225 == 2)  // CHOICE ISO14823Attributes_element  fieldName(dfl)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DFL _tmp_6906;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl.push_back(_tmp_6906);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                                        uint8_t* _tmp_6907 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6907;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006262\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dfl[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_225 == 3)  // CHOICE ISO14823Attributes_element  fieldName(ved)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::VED _tmp_6908;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved.push_back(_tmp_6908);
                                                    
                                                            // VED  SEQUENCE
                                                                //  hei        Distance     OPTIONAL  
                                                                //  wid        Distance     OPTIONAL  
                                                                //  vln        Distance     OPTIONAL  
                                                                //  wei        Weight       OPTIONAL  
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6909;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei.push_back(_tmp_6909);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006263\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6910;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid.push_back(_tmp_6910);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006264\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Distance _tmp_6911;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln.push_back(_tmp_6911);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006265\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::Weight _tmp_6912;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei.push_back(_tmp_6912);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006266\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei.size() != 0) {
                                                                // Field name: hei
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6913 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6913;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006267\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6914 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6914;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006268\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].hei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid.size() != 0) {
                                                                // Field name: wid
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6915 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6915;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006269\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6916 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6916;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006270\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wid[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln.size() != 0) {
                                                                // Field name: vln
                                                                    // Distance  SEQUENCE
                                                                        //  value      Distance_value     
                                                                        //  unit       RSCUnit            
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6917 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6917;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006271\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6918 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6918;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006272\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].vln[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei.size() != 0) {
                                                                // Field name: wei
                                                                    // Weight  SEQUENCE
                                                                        //  value      Weight_value     
                                                                        //  unit       RSCUnit          
                                                                    
                                                                    // Field name: value
                                                                    // Integer
                                                                    // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                    uint16_t* _tmp_6919 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_6919;
                                                                    __aux64__ += 1;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006273\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: unit
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _tmp_6920 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6920;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006274\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ved[0].wei[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                    }
                                                    else if(_choice_225 == 4)  // CHOICE ISO14823Attributes_element  fieldName(spe)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::SPE _tmp_6921;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe.push_back(_tmp_6921);
                                                    
                                                            // SPE  SEQUENCE
                                                                //  spm        SPE_spm            OPTIONAL  
                                                                //  mns        SPE_mns            OPTIONAL  
                                                                //  unit       SPE_RSCUnit_unit     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPESpm _tmp_6922;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm.push_back(_tmp_6922);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006275\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::SPEMns _tmp_6923;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns.push_back(_tmp_6923);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006276\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm.size() != 0) {
                                                                // Field name: spm
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_6924 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6924;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006277\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].spm[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns.size() != 0) {
                                                                // Field name: mns
                                                                // Integer
                                                                // UINT8  min(0) max(250) span(251) datatype(UInt8)
                                                                uint8_t* _tmp_6925 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6925;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006278\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 250) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].mns[0].value' " << (__aux64__) << " exceeds max allowable (250); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                                            uint8_t* _tmp_6926 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6926;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006279\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].spe[0].unit.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_225 == 5)  // CHOICE ISO14823Attributes_element  fieldName(roi)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::ROI _tmp_6927;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi.push_back(_tmp_6927);
                                                    
                                                        // Integer
                                                        // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                                        uint8_t* _tmp_6928 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_6928;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006280\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value) << 
                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].roi[0].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                                            return false;
                                                        }
                                                    }
                                                    else if(_choice_225 == 6)  // CHOICE ISO14823Attributes_element  fieldName(dbv)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DBV _tmp_6929;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv.push_back(_tmp_6929);
                                                    
                                                            // DBV  SEQUENCE
                                                                //  value      Distance_value     
                                                                //  unit       RSCUnit            
                                                            
                                                            // Field name: value
                                                            // Integer
                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                            uint16_t* _tmp_6930 = (uint16_t*) buffer; buffer += 2;
                                                            __aux64__ = *_tmp_6930;
                                                            __aux64__ += 1;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006281\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value;
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: unit
                                                            // Integer
                                                            // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                            uint8_t* _tmp_6931 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_6931;
                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006282\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value) << 
                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].dbv[0].unit.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                    }
                                                    else if(_choice_225 == 7)  // CHOICE ISO14823Attributes_element  fieldName(ddd)
                                                    {
                                                        dsrc_v2_ivi_msgs::msg::DDD _tmp_6932;
                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd.push_back(_tmp_6932);
                                                    
                                                            // DDD  SEQUENCE
                                                                //  dcj        DDD_dcj      OPTIONAL  
                                                                //  dcr        DDD_dcr      OPTIONAL  
                                                                //  tpl        DDD_tpl      OPTIONAL  
                                                                //  ioList     DDD_ioList     
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcj _tmp_6933;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj.push_back(_tmp_6933);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006283\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDDcr _tmp_6934;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr.push_back(_tmp_6934);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006284\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr " << tools::green("present");
                                                            }
                                                            if(*(buffer++)) { 
                                                                dsrc_v2_ivi_msgs::msg::DDDTpl _tmp_6935;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl.push_back(_tmp_6935);
                                                            
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006285\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl " << tools::green("present");
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj.size() != 0) {
                                                                // Field name: dcj
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6936 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6936;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006286\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcj[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr.size() != 0) {
                                                                // Field name: dcr
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6937 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6937;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006287\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].dcr[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl.size() != 0) {
                                                                // Field name: tpl
                                                                // Integer
                                                                // UINT8  min(1) max(128) span(128) datatype(UInt8)
                                                                uint8_t* _tmp_6938 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_6938;
                                                                __aux64__ += 1;
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006288\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value) << 
                                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 128) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].tpl[0].value' " << (__aux64__) << " exceeds max allowable (128); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            
                                                            // Field name: io_list
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(8) span(8)
                                                            uint8_t* _ext_flag_3218 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006289\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.: " << int(*_ext_flag_3218);
                                                            }
                                                            
                                                            int16_t* _tmp_6939 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_6939;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_6939 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006290\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list. size: " << int(*_tmp_6939);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int b = 0; b < _if__tmp_6939; b++) {
                                                                dsrc_v2_ivi_msgs::msg::DDDIO seqof_b;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements.push_back(seqof_b);
                                                            
                                                                    // DDD_IO  SEQUENCE
                                                                        //  drn        DDD_IO_drn             
                                                                        //  dp         DDD_IO_dp            OPTIONAL  
                                                                        //  dr         DDD_IO_dr            OPTIONAL  
                                                                        //  rne        DDD_IO_rne           OPTIONAL  
                                                                        //  stnId      DDD_IO_stnId         OPTIONAL  
                                                                        //  stnText    DDD_IO_stnText       OPTIONAL  
                                                                        //  dcp        DistanceOrDuration   OPTIONAL  
                                                                        //  ddp        DistanceOrDuration   OPTIONAL  
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODp _tmp_6940;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp.push_back(_tmp_6940);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006291\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIODr _tmp_6941;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr.push_back(_tmp_6941);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006292\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIORne _tmp_6942;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne.push_back(_tmp_6942);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006293\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnId _tmp_6943;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id.push_back(_tmp_6943);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006294\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DDDIOStnText _tmp_6944;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_text.push_back(_tmp_6944);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006295\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_text " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_6945;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp.push_back(_tmp_6945);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006296\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp " << tools::green("present");
                                                                    }
                                                                    if(*(buffer++)) { 
                                                                        dsrc_v2_ivi_msgs::msg::DistanceOrDuration _tmp_6946;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp.push_back(_tmp_6946);
                                                                    
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006297\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp " << tools::green("present");
                                                                    }
                                                                    
                                                                    // Field name: drn
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_6947 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_6947;
                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006298\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value) << 
                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].drn.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp.size() != 0) {
                                                                        // Field name: dp
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_3219 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006299\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].: " << int(*_ext_flag_3219);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_6948 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_6948;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_6948 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006300\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0]. size: " << int(*_tmp_6948);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int c = 0; c < _if__tmp_6948; c++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationPlace seqof_c;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements.push_back(seqof_c);
                                                                        
                                                                                // DestinationPlace  SEQUENCE
                                                                                    //  depType    DDD_DEP                      
                                                                                    //  depBlob    DestinationPlace_depBlob   OPTIONAL  
                                                                                    //  plnId      DestinationPlace_plnId     OPTIONAL  
                                                                                    //  plnText    DestinationPlace_plnText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlaceDepBlob _tmp_6949;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_blob.push_back(_tmp_6949);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006301\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_blob " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnId _tmp_6950;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id.push_back(_tmp_6950);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006302\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationPlacePlnText _tmp_6951;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_text.push_back(_tmp_6951);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006303\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: dep_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_3220 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006304\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.: " << int(*_ext_flag_3220);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_3220) {
                                                                                    uint8_t* _tmp_6953 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_6953) {
                                                                                        uint64_t* _tmp_6954 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_6954;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_6954 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_6954;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_6952 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_6952;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006305\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_blob.size() != 0) {
                                                                                    // Field name: dep_blob
                                                                                    // OctetString
                                                                                    // Indefinite length
                                                                                    // min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6955 = (uint16_t*)buffer;
                                                                                    buffer += 2;
                                                                                    __aux64__ = *_tmp_6955;
                                                                                    
                                                                                    int _if__tmp_6955 = __aux64__;
                                                                                    for(int d = 0; d < _if__tmp_6955; d++) {
                                                                                        int8_t* __n__ = (int8_t*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].dep_blob[0].values.push_back(*__n__);
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id.size() != 0) {
                                                                                    // Field name: pln_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_6956 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_6956;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006306\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_text.size() != 0) {
                                                                                    // Field name: pln_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6957 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_6957;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_6957 = __aux64__;
                                                                                    for(int e = 0; e < _if__tmp_6957; e++) {  // DestinationPlace_plnText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dp[0].elements[c].pln_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr.size() != 0) {
                                                                        // Field name: dr
                                                                        // SequenceOf
                                                                        // Data Type UInt8
                                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                                        uint8_t* _ext_flag_3221 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006307\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].: " << int(*_ext_flag_3221);
                                                                        }
                                                                        
                                                                        int16_t* _tmp_6958 = (int16_t*)buffer;
                                                                        buffer += 2;
                                                                        __aux64__ = *_tmp_6958;
                                                                        __aux64__ += 1;     // +min
                                                                        
                                                                        int _if__tmp_6958 = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006308\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0]. size: " << int(*_tmp_6958);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        for(int f = 0; f < _if__tmp_6958; f++) {
                                                                            dsrc_v2_ivi_msgs::msg::DestinationRoad seqof_f;  // SEQUENCE
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements.push_back(seqof_f);
                                                                        
                                                                                // DestinationRoad  SEQUENCE
                                                                                    //  derType    DDD_DER                     
                                                                                    //  ronId      DestinationRoad_ronId     OPTIONAL  
                                                                                    //  ronText    DestinationRoad_ronText   OPTIONAL  
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonId _tmp_6959;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id.push_back(_tmp_6959);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006309\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id " << tools::green("present");
                                                                                }
                                                                                if(*(buffer++)) { 
                                                                                    dsrc_v2_ivi_msgs::msg::DestinationRoadRonText _tmp_6960;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_text.push_back(_tmp_6960);
                                                                                
                                                                                    if(debug)
                                                                                        logger->debug() << "|\033[38;5;94m006310\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_text " << tools::green("present");
                                                                                }
                                                                                
                                                                                // Field name: der_type
                                                                                // Integer
                                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                                uint8_t* _ext_flag_3222 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006311\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.: " << int(*_ext_flag_3222);
                                                                                }
                                                                                
                                                                                if(*_ext_flag_3222) {
                                                                                    uint8_t* _tmp_6962 = (uint8_t*) buffer++;
                                                                                    
                                                                                    if(*_tmp_6962) {
                                                                                        uint64_t* _tmp_6963 = (uint64_t*)buffer; buffer += 8;
                                                                                        __aux64__ = *_tmp_6963;
                                                                                        __aux64__ += INT64_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value = __aux64__;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        uint32_t* _tmp_6963 = (uint32_t*) buffer; buffer += 4;
                                                                                        __aux64__ = *_tmp_6963;
                                                                                        __aux64__ += INT32_MIN;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value = __aux64__;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint8_t* _tmp_6961 = (uint8_t*) buffer++;
                                                                                    __aux64__ = *_tmp_6961;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value = __aux64__;
                                                                                
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006312\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value);
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].der_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id.size() != 0) {
                                                                                    // Field name: ron_id
                                                                                    // Integer
                                                                                    // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                                    uint16_t* _tmp_6964 = (uint16_t*) buffer; buffer += 2;
                                                                                    __aux64__ = *_tmp_6964;
                                                                                    __aux64__ += 1;
                                                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value = __aux64__;
                                                                                    
                                                                                    if(debug) {
                                                                                        logger->debug() << "|\033[38;5;94m006313\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value) << 
                                                                                                     " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value;
                                                                                    }
                                                                                    
                                                                                    // ******************* MIN validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                    // ******************* MAX validator *******************
                                                                                    if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                
                                                                                if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_text.size() != 0) {
                                                                                    // Field name: ron_text
                                                                                    // Text
                                                                                    
                                                                                    // Indefinite length
                                                                                    // TEXT  min(0) max(16383) span(16384)
                                                                                    uint16_t* _tmp_6965 = (uint16_t*)buffer;
                                                                                    __aux64__ = *_tmp_6965;
                                                                                    buffer += 2;
                                                                                    
                                                                                    int _if__tmp_6965 = __aux64__;
                                                                                    for(int g = 0; g < _if__tmp_6965; g++) {  // DestinationRoad_ronText
                                                                                        char* __tmp__ = (char*)buffer++;
                                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dr[0].elements[f].ron_text[0].value += *__tmp__;
                                                                                    }
                                                                                }
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne.size() != 0) {
                                                                        // Field name: rne
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_6966 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6966;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006314\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].rne[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id.size() != 0) {
                                                                        // Field name: stn_id
                                                                        // Integer
                                                                        // UINT16  min(1) max(999) span(999) datatype(UInt16)
                                                                        uint16_t* _tmp_6967 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_6967;
                                                                        __aux64__ += 1;
                                                                        ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006315\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value) << 
                                                                                         " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 999) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_id[0].value' " << (__aux64__) << " exceeds max allowable (999); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_text.size() != 0) {
                                                                        // Field name: stn_text
                                                                        // Text
                                                                        
                                                                        // Indefinite length
                                                                        // TEXT  min(0) max(16383) span(16384)
                                                                        uint16_t* _tmp_6968 = (uint16_t*)buffer;
                                                                        __aux64__ = *_tmp_6968;
                                                                        buffer += 2;
                                                                        
                                                                        int _if__tmp_6968 = __aux64__;
                                                                        for(int h = 0; h < _if__tmp_6968; h++) {  // DDD_IO_stnText
                                                                            char* __tmp__ = (char*)buffer++;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].stn_text[0].value += *__tmp__;
                                                                        }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp.size() != 0) {
                                                                        // Field name: dcp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_6969 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_6969;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006316\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_6970 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_6970;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006317\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].dcp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    
                                                                    if(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp.size() != 0) {
                                                                        // Field name: ddp
                                                                            // DistanceOrDuration  SEQUENCE
                                                                                //  value      DistanceOrDuration_value            
                                                                                //  unit       DistanceOrDuration_RSCUnit_unit     
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(1) max(16384) span(16384) datatype(UInt16)
                                                                            uint16_t* _tmp_6971 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_6971;
                                                                            __aux64__ += 1;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006318\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value: " << ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 16384) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].value.value' " << (__aux64__) << " exceeds max allowable (16384); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: unit
                                                                            // Integer
                                                                            // UINT8  min(2) max(9) span(8) datatype(UInt8)
                                                                            uint8_t* _tmp_6972 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_6972;
                                                                            __aux64__ += 2;
                                                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006319\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value) << 
                                                                                             " ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 2) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value' " << (__aux64__) << " is less than allowable (2); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 9) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w].ddd[0].io_list.elements[b].ddp[0].unit.value' " << (__aux64__) << " exceeds max allowable (9); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                                    else
                                                    {
                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_225) << ") selected in CHOICE ISO14823Attributes_element in 'ivi.optional[0].elements[y].giv[0].elements[i].road_sign_codes.elements[e].code.any_catalogue[0].attributes[0].elements[w]'; message dropped.";
                                                        return false;
                                                    }
                                                }
                                            }
                                    }
                                    else
                                    {
                                        uint16_t* _tmp_6973 = (uint16_t*)buffer;  // OpenType length
                                        buffer += 2 + int(*_tmp_6973);            // Ignoring opentype data
                                    }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text.size() != 0) {
                                // Field name: extra_text
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4)
                                uint8_t* _ext_flag_3223 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006320\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].: " << int(*_ext_flag_3223);
                                }
                                
                                int16_t* _tmp_6974 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_6974;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_6974 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006321\033[0m| SequenceOf ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0]. size: " << int(*_tmp_6974);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int i = 0; i < _if__tmp_6974; i++) {
                                    dsrc_v2_ivi_msgs::msg::Text seqof_i;  // SEQUENCE
                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements.push_back(seqof_i);
                                
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TextLayoutComponentId _tmp_6975;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id.push_back(_tmp_6975);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m006322\033[0m| ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id.size() != 0) {
                                            // Field name: layout_component_id
                                            // Integer
                                            // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                            uint8_t* _ext_flag_3224 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006323\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].: " << int(*_ext_flag_3224);
                                            }
                                            
                                            if(*_ext_flag_3224) {
                                                uint8_t* _tmp_6977 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_6977) {
                                                    uint64_t* _tmp_6978 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_6978;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_6978 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_6978;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_6976 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_6976;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006324\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value) << 
                                                                 " ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        
                                        // Field name: language
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        uint8_t* _tmp_6979 = (uint8_t*)buffer;
                                        __aux64__ = *_tmp_6979 + 10;
                                        buffer += 1;
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006325\033[0m| ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].language.value: " << __aux64__;
                                        
                                        int _if__tmp_6979 = __aux64__;
                                        for(int j = 0; j < _if__tmp_6979; j++) {
                                            uint8_t __c__;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].language.values.push_back(__c__);
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].language.values[j] = (*__b__ == 1);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].language.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].language.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                            return false;
                                        }
                                        
                                        // Field name: text_content
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_6980 = (uint16_t*)buffer;
                                        __aux64__ = *_tmp_6980;
                                        buffer += 2;
                                        
                                        int _if__tmp_6980 = __aux64__;
                                        for(int k = 0; k < _if__tmp_6980; k++) {  // Text_textContent
                                            char* __tmp__ = (char*)buffer++;
                                            ros->ivi.optional[0].elements[y].giv[0].elements[i].extra_text[0].elements[i].text_content.value += *__tmp__;
                                        }
                                }
                            }
                            if(*_ext_flag_3091) { // from ros->ivi.optional[0].elements[y].giv[0].elements[i]. 
                                uint8_t* _tmp_6981 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_74[*_tmp_6981];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006326\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].giv[0].elements[i].: " << static_cast<unsigned int>(*_tmp_6981);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_6981; i++)
                                    _array_74[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_6981; i++) {
                                    uint16_t* _tmp_6982 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_6982; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_200 == 2)  // CHOICE IviContainer  fieldName(rcc)
                {
                    dsrc_v2_ivi_msgs::msg::RoadConfigurationContainer _tmp_6983;
                    ros->ivi.optional[0].elements[y].rcc.push_back(_tmp_6983);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_3225 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m006327\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].: " << int(*_ext_flag_3225);
                    }
                    
                    int16_t* _tmp_6984 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_6984;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_6984 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m006328\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0]. size: " << int(*_tmp_6984);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int l = 0; l < _if__tmp_6984; l++) {
                        dsrc_v2_ivi_msgs::msg::RccPart seqof_l;  // SEQUENCE
                        ros->ivi.optional[0].elements[y].rcc[0].elements.push_back(seqof_l);
                    
                            // RccPart  SEQUENCE
                                //  zoneIds           RccPart_zoneIds               
                                //  roadType          RoadType                      
                                //  laneConfiguration RccPart_laneConfiguration     
                                //  ...
                            uint8_t* _ext_flag_3226 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006329\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].: " << int(*_ext_flag_3226);
                            }
                            
                            
                            // Field name: zone_ids
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8)
                            uint8_t* _ext_flag_3227 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006330\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.: " << int(*_ext_flag_3227);
                            }
                            
                            int16_t* _tmp_6985 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_6985;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_6985 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006331\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids. size: " << int(*_tmp_6985);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                return false;
                            }
                            
                            
                            for(int m = 0; m < _if__tmp_6985; m++) {
                                dsrc_v2_ivi_msgs::msg::Zid seqof_m;  // INTEGER
                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements.push_back(seqof_m);
                            
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_3228 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006332\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].: " << int(*_ext_flag_3228);
                                }
                                
                                if(*_ext_flag_3228) {
                                    uint8_t* _tmp_6987 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_6987) {
                                        uint64_t* _tmp_6988 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_6988;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_6988 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_6988;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_6986 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6986;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006333\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value) << 
                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].zone_ids.elements[m].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                
                            }
                            
                            // Field name: road_type
                            // Enumerated
                            // INT32  min(0) max(3) span(4) datatype(Int32)
                            uint8_t* _tmp_6989 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_6989;
                            __aux64__ += 0;
                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value = __aux64__;
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                return false;
                            }
                            
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006334\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value) << 
                                             " ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].road_type.value);
                            }
                            
                            // Field name: lane_configuration
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(16) span(16)
                            uint8_t* _ext_flag_3230 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006335\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.: " << int(*_ext_flag_3230);
                            }
                            
                            int16_t* _tmp_6990 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_6990;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_6990 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006336\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration. size: " << int(*_tmp_6990);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 16) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                                return false;
                            }
                            
                            
                            for(int n = 0; n < _if__tmp_6990; n++) {
                                dsrc_v2_ivi_msgs::msg::LaneInformation seqof_n;  // SEQUENCE
                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements.push_back(seqof_n);
                            
                                    // LaneInformation  SEQUENCE
                                        //  laneNumber        LanePosition                       
                                        //  direction         Direction                          
                                        //  validity          DTM                              OPTIONAL  
                                        //  laneType          LaneType                           
                                        //  laneTypeQualifier CompleteVehicleCharacteristics   OPTIONAL  
                                        //  laneStatus        LaneStatus                         
                                        //  laneWidth         IVILaneWidth                     OPTIONAL  
                                        //  ...
                                    uint8_t* _ext_flag_3231 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006337\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].: " << int(*_ext_flag_3231);
                                    }
                                    
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::DTM _tmp_6991;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity.push_back(_tmp_6991);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006338\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity " << tools::green("present");
                                    }
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristics _tmp_6992;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier.push_back(_tmp_6992);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006339\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier " << tools::green("present");
                                    }
                                    if(*(buffer++)) { 
                                        dsrc_v2_ivi_msgs::msg::IVILaneWidth _tmp_6993;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width.push_back(_tmp_6993);
                                    
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006340\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width " << tools::green("present");
                                    }
                                    
                                    // Field name: lane_number
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_6994 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6994;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006341\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value) << 
                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_number.value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    // Field name: direction
                                    // Integer
                                    // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                    uint8_t* _tmp_6995 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_6995;
                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006342\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value) << 
                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].direction.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                        return false;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity.size() != 0) {
                                        // Field name: validity
                                            // DTM  SEQUENCE
                                                //  year        DTM_year          OPTIONAL  
                                                //  month_day   DTM_month_day     OPTIONAL  
                                                //  pmd         PMD               OPTIONAL  
                                                //  hourMinutes DTM_hourMinutes   OPTIONAL  
                                                //  dayOfWeek   DayOfWeek         OPTIONAL  
                                                //  period      HoursMinutes      OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMYear _tmp_6996;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year.push_back(_tmp_6996);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006343\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMMonthDay _tmp_6997;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day.push_back(_tmp_6997);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006344\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::PMD _tmp_6998;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd.push_back(_tmp_6998);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006345\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DTMHourMinutes _tmp_6999;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes.push_back(_tmp_6999);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006346\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::DayOfWeek _tmp_7000;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week.push_back(_tmp_7000);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006347\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::HoursMinutes _tmp_7001;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period.push_back(_tmp_7001);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006348\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period " << tools::green("present");
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year.size() != 0) {
                                                // Field name: year
                                                    // DTM_year  SEQUENCE
                                                        //  syr        DTM_year_syr     
                                                        //  eyr        DTM_year_eyr     
                                                    
                                                    // Field name: syr
                                                    // Integer
                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                    uint8_t* _ext_flag_3232 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006349\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.: " << int(*_ext_flag_3232);
                                                    }
                                                    
                                                    if(*_ext_flag_3232) {
                                                        uint8_t* _tmp_7003 = (uint8_t*) buffer++;
                                                        
                                                        if(*_tmp_7003) {
                                                            uint64_t* _tmp_7004 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = *_tmp_7004;
                                                            __aux64__ += INT64_MIN;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value = __aux64__;
                                                        }
                                                        else
                                                        {
                                                            uint32_t* _tmp_7004 = (uint32_t*) buffer; buffer += 4;
                                                            __aux64__ = *_tmp_7004;
                                                            __aux64__ += INT32_MIN;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value = __aux64__;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint8_t* _tmp_7002 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7002;
                                                        __aux64__ += 2000;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value = __aux64__;
                                                    
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006350\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].syr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                    }
                                                    
                                                    // Field name: eyr
                                                    // Integer
                                                    // UINT16  min(2000) max(2127) span(128) datatype(UInt16)
                                                    uint8_t* _ext_flag_3233 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006351\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.: " << int(*_ext_flag_3233);
                                                    }
                                                    
                                                    if(*_ext_flag_3233) {
                                                        uint8_t* _tmp_7006 = (uint8_t*) buffer++;
                                                        
                                                        if(*_tmp_7006) {
                                                            uint64_t* _tmp_7007 = (uint64_t*)buffer; buffer += 8;
                                                            __aux64__ = *_tmp_7007;
                                                            __aux64__ += INT64_MIN;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value = __aux64__;
                                                        }
                                                        else
                                                        {
                                                            uint32_t* _tmp_7007 = (uint32_t*) buffer; buffer += 4;
                                                            __aux64__ = *_tmp_7007;
                                                            __aux64__ += INT32_MIN;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value = __aux64__;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        uint8_t* _tmp_7005 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7005;
                                                        __aux64__ += 2000;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value = __aux64__;
                                                    
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006352\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 2000) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value' " << (__aux64__) << " is less than allowable (2000); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 2127) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].year[0].eyr.value' " << (__aux64__) << " exceeds max allowable (2127); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day.size() != 0) {
                                                // Field name: month_day
                                                    // DTM_month_day  SEQUENCE
                                                        //  smd        MonthDay       
                                                        //  emd        MonthDay       
                                                    
                                                    // Field name: smd
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        
                                                        // Field name: month
                                                        // Integer
                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                        uint8_t* _tmp_7008 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7008;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006353\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: day
                                                        // Integer
                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                        uint8_t* _tmp_7009 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7009;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006354\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].smd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                            return false;
                                                        }
                                                    
                                                    // Field name: emd
                                                        // MonthDay  SEQUENCE
                                                            //  month      MonthDay_month     
                                                            //  day        MonthDay_day       
                                                        
                                                        // Field name: month
                                                        // Integer
                                                        // UINT8  min(1) max(12) span(12) datatype(UInt8)
                                                        uint8_t* _tmp_7010 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7010;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006355\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 12) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.month.value' " << (__aux64__) << " exceeds max allowable (12); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: day
                                                        // Integer
                                                        // UINT8  min(1) max(31) span(31) datatype(UInt8)
                                                        uint8_t* _tmp_7011 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7011;
                                                        __aux64__ += 1;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006356\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].month_day[0].emd.day.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                                            return false;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd.size() != 0) {
                                                // Field name: pmd
                                                // BitString
                                                // BIT_STRING  min(4) max(4) span(1)
                                                uint8_t* _tmp_7012 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_7012 + 4;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006357\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd[0].value: " << __aux64__;
                                                
                                                int _if__tmp_7012 = __aux64__;
                                                for(int o = 0; o < _if__tmp_7012; o++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd[0].values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd[0].values[o] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd[0].value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].pmd[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes.size() != 0) {
                                                // Field name: hour_minutes
                                                    // DTM_hourMinutes  SEQUENCE
                                                        //  shm        HoursMinutes     
                                                        //  ehm        HoursMinutes     
                                                    
                                                    // Field name: shm
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        
                                                        // Field name: hours
                                                        // Integer
                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                        uint8_t* _tmp_7013 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7013;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006358\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: mins
                                                        // Integer
                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                        uint8_t* _tmp_7014 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7014;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006359\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].shm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                            return false;
                                                        }
                                                    
                                                    // Field name: ehm
                                                        // HoursMinutes  SEQUENCE
                                                            //  hours      HoursMinutes_hours     
                                                            //  mins       HoursMinutes_mins      
                                                        
                                                        // Field name: hours
                                                        // Integer
                                                        // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                        uint8_t* _tmp_7015 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7015;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006360\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        // Field name: mins
                                                        // Integer
                                                        // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                        uint8_t* _tmp_7016 = (uint8_t*) buffer++;
                                                        __aux64__ = *_tmp_7016;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006361\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value) << 
                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].hour_minutes[0].ehm.mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                            return false;
                                                        }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week.size() != 0) {
                                                // Field name: day_of_week
                                                // BitString
                                                // BIT_STRING  min(8) max(8) span(1)
                                                uint8_t* _tmp_7017 = (uint8_t*)buffer;
                                                __aux64__ = *_tmp_7017 + 8;
                                                buffer += 1;
                                                
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006362\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week[0].value: " << __aux64__;
                                                
                                                int _if__tmp_7017 = __aux64__;
                                                for(int p = 0; p < _if__tmp_7017; p++) {
                                                    uint8_t __c__;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week[0].values.push_back(__c__);
                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week[0].values[p] = (*__b__ == 1);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week[0].value' " << (__aux64__) << " is less than allowable (8); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].day_of_week[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                    return false;
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period.size() != 0) {
                                                // Field name: period
                                                    // HoursMinutes  SEQUENCE
                                                        //  hours      HoursMinutes_hours     
                                                        //  mins       HoursMinutes_mins      
                                                    
                                                    // Field name: hours
                                                    // Integer
                                                    // UINT8  min(0) max(23) span(24) datatype(UInt8)
                                                    uint8_t* _tmp_7018 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_7018;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006363\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value) << 
                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 23) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].hours.value' " << (__aux64__) << " exceeds max allowable (23); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    // Field name: mins
                                                    // Integer
                                                    // UINT8  min(0) max(59) span(60) datatype(UInt8)
                                                    uint8_t* _tmp_7019 = (uint8_t*) buffer++;
                                                    __aux64__ = *_tmp_7019;
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006364\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value) << 
                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 59) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].validity[0].period[0].mins.value' " << (__aux64__) << " exceeds max allowable (59); message dropped.";
                                                        return false;
                                                    }
                                            }
                                    }
                                    
                                    // Field name: lane_type
                                    // Integer
                                    // UINT8  min(0) max(31) span(32) datatype(UInt8)
                                    uint8_t* _tmp_7020 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7020;
                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006365\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value) << 
                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 31) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type.value' " << (__aux64__) << " exceeds max allowable (31); message dropped.";
                                        return false;
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier.size() != 0) {
                                        // Field name: lane_type_qualifier
                                            // CompleteVehicleCharacteristics  SEQUENCE
                                                //  tractor    TractorCharacteristics                   OPTIONAL  
                                                //  trailer    CompleteVehicleCharacteristics_trailer   OPTIONAL  
                                                //  train      TrainCharacteristics                     OPTIONAL  
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::TractorCharacteristics _tmp_7021;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor.push_back(_tmp_7021);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006366\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::CompleteVehicleCharacteristicsTrailer _tmp_7022;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer.push_back(_tmp_7022);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006367\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer " << tools::green("present");
                                            }
                                            if(*(buffer++)) { 
                                                dsrc_v2_ivi_msgs::msg::TrainCharacteristics _tmp_7023;
                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train.push_back(_tmp_7023);
                                            
                                                if(debug)
                                                    logger->debug() << "|\033[38;5;94m006368\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train " << tools::green("present");
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor.size() != 0) {
                                                // Field name: tractor
                                                    // TractorCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo      OPTIONAL  
                                                        //  notEqualTo TractorCharacteristics_notEqualTo   OPTIONAL  
                                                        //  ranges     TractorCharacteristics_ranges       OPTIONAL  
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsEqualTo _tmp_7024;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to.push_back(_tmp_7024);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m006369\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsNotEqualTo _tmp_7025;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to.push_back(_tmp_7025);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m006370\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to " << tools::green("present");
                                                    }
                                                    if(*(buffer++)) { 
                                                        dsrc_v2_ivi_msgs::msg::TractorCharacteristicsRanges _tmp_7026;
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges.push_back(_tmp_7026);
                                                    
                                                        if(debug)
                                                            logger->debug() << "|\033[38;5;94m006371\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges " << tools::green("present");
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to.size() != 0) {
                                                        // Field name: equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3234 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006372\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].: " << int(*_ext_flag_3234);
                                                        }
                                                        
                                                        int16_t* _tmp_7027 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_7027;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_7027 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006373\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0]. size: " << int(*_tmp_7027);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int q = 0; q < _if__tmp_7027; q++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_q;  // CHOICE
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements.push_back(seqof_q);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_3235 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_226 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3235)
                                                                _choice_226 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_226 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_7028;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type.push_back(_tmp_7028);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7029 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7029;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006374\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_226 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7030;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code.push_back(_tmp_7030);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_227 = *(buffer++);
                                                                
                                                                if(_choice_227 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7031;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7031);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_7032 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7032;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006375\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_227 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7033;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7033);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_7034 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7034;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006376\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_227 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7035;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7035);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_7036 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7036;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006377\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_227 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7037;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7037);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_7038 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7038;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006378\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_227) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_226 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7039;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type.push_back(_tmp_7039);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7040 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7040;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006379\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_226 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7041;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value.push_back(_tmp_7041);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_7042 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7042;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006380\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_7043 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7043;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006381\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_226 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7044;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics.push_back(_tmp_7044);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7045 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7045;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006382\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_226 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_7046;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type.push_back(_tmp_7046);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_3243 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006383\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.: " << int(*_ext_flag_3243);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3243) {
                                                                        uint8_t* _tmp_7048 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_7048) {
                                                                            uint64_t* _tmp_7049 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_7049;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_7049 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_7049;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_7047 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7047;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006384\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_7050 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7050;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006385\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_7051 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_7051 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m006386\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_7051 = __aux64__;
                                                                    for(int r = 0; r < _if__tmp_7051; r++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].special_transport_type.values[r] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_226 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7052;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage.push_back(_tmp_7052);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_7053 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7053;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006387\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].equal_to[0].elements[q].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_7054 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_7054);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to.size() != 0) {
                                                        // Field name: not_equal_to
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3246 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006388\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].: " << int(*_ext_flag_3246);
                                                        }
                                                        
                                                        int16_t* _tmp_7055 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_7055;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_7055 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006389\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0]. size: " << int(*_tmp_7055);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int s = 0; s < _if__tmp_7055; s++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_s;  // CHOICE
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements.push_back(seqof_s);
                                                        
                                                            // Choice
                                                            uint8_t* _ext_flag_3247 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  simpleVehicleType   StationType   
                                                               // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                               // #2  iso3833VehicleType   Iso3833VehicleType   
                                                               // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                               // #4  engineCharacteristics   EngineCharacteristics   
                                                               // #5  loadType   LoadType   
                                                               // #6  usage   VehicleRole   
                                                            uint8_t _choice_228 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3247)
                                                                _choice_228 += 6 + 1; // Ext addition
                                                            
                                                            if(_choice_228 == 0) {
                                                                its_container_v1_its_container_msgs::msg::StationType _tmp_7056;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type.push_back(_tmp_7056);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7057 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7057;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006390\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_228 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7058;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code.push_back(_tmp_7058);
                                                            
                                                                // Choice
                                                                   // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                   // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                   // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                   // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                uint8_t _choice_229 = *(buffer++);
                                                                
                                                                if(_choice_229 == 0) {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7059;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7059);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                    uint8_t* _tmp_7060 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7060;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006391\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_229 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7061;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7061);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_7062 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7062;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006392\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_229 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7063;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7063);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                    uint8_t* _tmp_7064 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7064;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006393\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                    }
                                                                }
                                                                else if(_choice_229 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7065;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7065);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                    uint8_t* _tmp_7066 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7066;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006394\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    logger->warning() << "Wrong option (" << static_cast<int>(_choice_229) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].eu_vehicle_category_code[0]'; message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_228 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7067;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type.push_back(_tmp_7067);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7068 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7068;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006395\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_228 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7069;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value.push_back(_tmp_7069);
                                                            
                                                                    // EnvironmentalCharacteristics  SEQUENCE
                                                                        //  euroValue  EuroValue      
                                                                        //  copValue   CopValue       
                                                                    
                                                                    // Field name: euro_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_7070 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7070;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006396\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].euro_value.value);
                                                                    }
                                                                    
                                                                    // Field name: cop_value
                                                                    // Enumerated
                                                                    // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                    uint8_t* _tmp_7071 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7071;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006397\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].euro_and_co2value[0].cop_value.value);
                                                                    }
                                                            }
                                                            else if(_choice_228 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7072;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics.push_back(_tmp_7072);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                uint8_t* _tmp_7073 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7073;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006398\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_228 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                            {
                                                                dsrc_v2_ivi_msgs::msg::LoadType _tmp_7074;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type.push_back(_tmp_7074);
                                                            
                                                                    // LoadType  SEQUENCE
                                                                        //  goodsType            GoodsType                
                                                                        //  dangerousGoodsType   DangerousGoodsBasic      
                                                                        //  specialTransportType SpecialTransportType     
                                                                    
                                                                    // Field name: goods_type
                                                                    // Integer
                                                                    // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                    uint8_t* _ext_flag_3255 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006399\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.: " << int(*_ext_flag_3255);
                                                                    }
                                                                    
                                                                    if(*_ext_flag_3255) {
                                                                        uint8_t* _tmp_7076 = (uint8_t*) buffer++;
                                                                        
                                                                        if(*_tmp_7076) {
                                                                            uint64_t* _tmp_7077 = (uint64_t*)buffer; buffer += 8;
                                                                            __aux64__ = *_tmp_7077;
                                                                            __aux64__ += INT64_MIN;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint32_t* _tmp_7077 = (uint32_t*) buffer; buffer += 4;
                                                                            __aux64__ = *_tmp_7077;
                                                                            __aux64__ += INT32_MIN;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint8_t* _tmp_7075 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7075;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value = __aux64__;
                                                                    
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006400\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                    }
                                                                    
                                                                    // Field name: dangerous_goods_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                    uint8_t* _tmp_7078 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7078;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006401\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].dangerous_goods_type.value);
                                                                    }
                                                                    
                                                                    // Field name: special_transport_type
                                                                    // BitString
                                                                    // BIT_STRING  min(4) max(4) span(1)
                                                                    uint8_t* _tmp_7079 = (uint8_t*)buffer;
                                                                    __aux64__ = *_tmp_7079 + 4;
                                                                    buffer += 1;
                                                                    
                                                                    if(debug)
                                                                        logger->debug() << "|\033[38;5;94m006402\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].special_transport_type.value: " << __aux64__;
                                                                    
                                                                    int _if__tmp_7079 = __aux64__;
                                                                    for(int t = 0; t < _if__tmp_7079; t++) {
                                                                        uint8_t __c__;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].special_transport_type.values.push_back(__c__);
                                                                        uint8_t* __b__ = (uint8_t*)buffer++;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].special_transport_type.values[t] = (*__b__ == 1);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_228 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                            {
                                                                its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7080;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage.push_back(_tmp_7080);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_7081 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7081;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006403\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].not_equal_to[0].elements[s].usage[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_7082 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_7082);            // Ignoring opentype data
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges.size() != 0) {
                                                        // Field name: ranges
                                                        // SequenceOf
                                                        // Data Type UInt8
                                                        // SEQUENCE_OF  min(1) max(4) span(4)
                                                        uint8_t* _ext_flag_3258 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006404\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].: " << int(*_ext_flag_3258);
                                                        }
                                                        
                                                        int16_t* _tmp_7083 = (int16_t*)buffer;
                                                        buffer += 2;
                                                        __aux64__ = *_tmp_7083;
                                                        __aux64__ += 1;     // +min
                                                        
                                                        int _if__tmp_7083 = __aux64__;
                                                        
                                                        if(debug) {
                                                            logger->debug() << "|\033[38;5;94m006405\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0]. size: " << int(*_tmp_7083);
                                                        }
                                                        
                                                        // ******************* MIN validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                            return false;
                                                        }
                                                        // ******************* MAX validator *******************
                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                            return false;
                                                        }
                                                        
                                                        
                                                        for(int u = 0; u < _if__tmp_7083; u++) {
                                                            dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_u;  // SEQUENCE
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements.push_back(seqof_u);
                                                        
                                                                // VehicleCharacteristicsRanges  SEQUENCE
                                                                    //  comparisonOperator ComparisonOperator                      
                                                                    //  limits             VehicleCharacteristicsRanges_limits     
                                                                
                                                                // Field name: comparison_operator
                                                                // Integer
                                                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                uint8_t* _tmp_7084 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7084;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006406\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                // Field name: limits
                                                                // Choice
                                                                uint8_t* _ext_flag_3259 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                   // #1  vehicleDimensions   VehicleDimensions   
                                                                   // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                   // #3  axleWeightLimits   AxleWeightLimits   
                                                                   // #4  passengerCapacity   PassengerCapacity   
                                                                   // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                   // #6  dieselEmissionValues   DieselEmissionValues   
                                                                   // #7  soundLevel   SoundLevel   
                                                                uint8_t _choice_230 = *(buffer++);
                                                                
                                                                if(*_ext_flag_3259)
                                                                    _choice_230 += 7 + 1; // Ext addition
                                                                
                                                                if(_choice_230 == 0) {
                                                                    dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_7085;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles.push_back(_tmp_7085);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                    uint8_t* _tmp_7086 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7086;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006407\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_230 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_7087;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions.push_back(_tmp_7087);
                                                                
                                                                        // VehicleDimensions  SEQUENCE
                                                                            //  vehicleLengthOverall Int1           
                                                                            //  vehicleHeigthOverall Int1           
                                                                            //  vehicleWidthOverall  Int1           
                                                                        
                                                                        // Field name: vehicle_length_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7088 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7088;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006408\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_heigth_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7089 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7089;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006409\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_width_overall
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7090 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7090;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006410\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_7091;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits.push_back(_tmp_7091);
                                                                
                                                                        // VehicleWeightLimits  SEQUENCE
                                                                            //  vehicleMaxLadenWeight     Int2           
                                                                            //  vehicleTrainMaximumWeight Int2           
                                                                            //  vehicleWeightUnladen      Int2           
                                                                        
                                                                        // Field name: vehicle_max_laden_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7092 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7092;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006411\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_train_maximum_weight
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7093 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7093;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006412\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: vehicle_weight_unladen
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7094 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7094;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006413\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_7095;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits.push_back(_tmp_7095);
                                                                
                                                                        // AxleWeightLimits  SEQUENCE
                                                                            //  maxLadenweightOnAxle1 Int2           
                                                                            //  maxLadenweightOnAxle2 Int2           
                                                                            //  maxLadenweightOnAxle3 Int2           
                                                                            //  maxLadenweightOnAxle4 Int2           
                                                                            //  maxLadenweightOnAxle5 Int2           
                                                                        
                                                                        // Field name: max_ladenweight_on_axle1
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7096 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7096;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006414\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle2
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7097 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7097;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006415\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle3
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7098 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7098;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006416\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle4
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7099 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7099;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006417\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: max_ladenweight_on_axle5
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7100 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7100;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006418\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_7101;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity.push_back(_tmp_7101);
                                                                
                                                                        // PassengerCapacity  SEQUENCE
                                                                            //  numberOfSeats          Int1           
                                                                            //  numberOfStandingPlaces Int1           
                                                                        
                                                                        // Field name: number_of_seats
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7102 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7102;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006419\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: number_of_standing_places
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7103 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7103;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006420\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_7104;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values.push_back(_tmp_7104);
                                                                
                                                                        // ExhaustEmissionValues  SEQUENCE
                                                                            //  unitType      UnitType                             
                                                                            //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                            //  emissionHC    Int2                                 
                                                                            //  emissionNOX   Int2                                 
                                                                            //  emissionHCNOX Int2                                 
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_7105 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7105;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006421\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: emission_co
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_7106 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7106;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006422\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hc
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7107 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7107;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006423\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_nox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7108 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7108;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006424\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: emission_hcnox
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7109 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7109;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006425\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_7110;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values.push_back(_tmp_7110);
                                                                
                                                                        // DieselEmissionValues  SEQUENCE
                                                                            //  particulate     DieselEmissionValues_particulate     
                                                                            //  absorptionCoeff Int2                                 
                                                                        
                                                                        // Field name: particulate
                                                                            // DieselEmissionValues_particulate  SEQUENCE
                                                                                //  unitType   UnitType                                   
                                                                                //  value      DieselEmissionValues_particulate_value     
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_7111 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7111;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006426\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: value
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_7112 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7112;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006427\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                        
                                                                        // Field name: absorption_coeff
                                                                        // Integer
                                                                        // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                        uint16_t* _tmp_7113 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7113;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006428\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_230 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_7114;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level.push_back(_tmp_7114);
                                                                
                                                                        // SoundLevel  SEQUENCE
                                                                            //  soundstationary Int1           
                                                                            //  sounddriveby    Int1           
                                                                        
                                                                        // Field name: soundstationary
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7115 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7115;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006429\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        // Field name: sounddriveby
                                                                        // Integer
                                                                        // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                        uint8_t* _tmp_7116 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7116;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006430\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].tractor[0].ranges[0].elements[u].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_7117 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_7117);            // Ignoring opentype data
                                                                }
                                                        }
                                                    }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer.size() != 0) {
                                                // Field name: trailer
                                                // SequenceOf
                                                // Data Type UInt8
                                                // SEQUENCE_OF  min(1) max(3) span(3)
                                                int16_t* _tmp_7118 = (int16_t*)buffer;
                                                buffer += 2;
                                                __aux64__ = *_tmp_7118;
                                                __aux64__ += 1;     // +min
                                                
                                                int _if__tmp_7118 = __aux64__;
                                                
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006431\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0]. size: " << int(*_tmp_7118);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                    return false;
                                                }
                                                
                                                
                                                for(int v = 0; v < _if__tmp_7118; v++) {
                                                    dsrc_v2_ivi_msgs::msg::TrailerCharacteristics seqof_v;  // SEQUENCE
                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements.push_back(seqof_v);
                                                
                                                        // TrailerCharacteristics  SEQUENCE
                                                            //  equalTo    TrailerCharacteristics_equalTo      OPTIONAL  
                                                            //  notEqualTo TrailerCharacteristics_notEqualTo   OPTIONAL  
                                                            //  ranges     TrailerCharacteristics_ranges       OPTIONAL  
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsEqualTo _tmp_7119;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to.push_back(_tmp_7119);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006432\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsNotEqualTo _tmp_7120;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to.push_back(_tmp_7120);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006433\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to " << tools::green("present");
                                                        }
                                                        if(*(buffer++)) { 
                                                            dsrc_v2_ivi_msgs::msg::TrailerCharacteristicsRanges _tmp_7121;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges.push_back(_tmp_7121);
                                                        
                                                            if(debug)
                                                                logger->debug() << "|\033[38;5;94m006434\033[0m| ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges " << tools::green("present");
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to.size() != 0) {
                                                            // Field name: equal_to
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_3262 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006435\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].: " << int(*_ext_flag_3262);
                                                            }
                                                            
                                                            int16_t* _tmp_7122 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_7122;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_7122 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006436\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0]. size: " << int(*_tmp_7122);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int w = 0; w < _if__tmp_7122; w++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_w;  // CHOICE
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements.push_back(seqof_w);
                                                            
                                                                // Choice
                                                                uint8_t* _ext_flag_3263 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  simpleVehicleType   StationType   
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType   
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                                   // #4  engineCharacteristics   EngineCharacteristics   
                                                                   // #5  loadType   LoadType   
                                                                   // #6  usage   VehicleRole   
                                                                uint8_t _choice_231 = *(buffer++);
                                                                
                                                                if(*_ext_flag_3263)
                                                                    _choice_231 += 6 + 1; // Ext addition
                                                                
                                                                if(_choice_231 == 0) {
                                                                    its_container_v1_its_container_msgs::msg::StationType _tmp_7123;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type.push_back(_tmp_7123);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7124 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7124;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006437\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_231 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7125;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code.push_back(_tmp_7125);
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                    uint8_t _choice_232 = *(buffer++);
                                                                    
                                                                    if(_choice_232 == 0) {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7126;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7126);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                        uint8_t* _tmp_7127 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7127;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006438\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_232 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7128;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7128);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_7129 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7129;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006439\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_232 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7130;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7130);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_7131 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7131;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006440\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_232 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7132;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7132);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                        uint8_t* _tmp_7133 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7133;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006441\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_232) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_231 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7134;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type.push_back(_tmp_7134);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7135 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7135;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006442\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_231 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7136;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value.push_back(_tmp_7136);
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        
                                                                        // Field name: euro_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                        uint8_t* _tmp_7137 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7137;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006443\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        // Field name: cop_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                        uint8_t* _tmp_7138 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7138;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006444\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                }
                                                                else if(_choice_231 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7139;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics.push_back(_tmp_7139);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7140 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7140;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006445\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_231 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                                {
                                                                    dsrc_v2_ivi_msgs::msg::LoadType _tmp_7141;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type.push_back(_tmp_7141);
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        
                                                                        // Field name: goods_type
                                                                        // Integer
                                                                        // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                        uint8_t* _ext_flag_3271 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006446\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.: " << int(*_ext_flag_3271);
                                                                        }
                                                                        
                                                                        if(*_ext_flag_3271) {
                                                                            uint8_t* _tmp_7143 = (uint8_t*) buffer++;
                                                                            
                                                                            if(*_tmp_7143) {
                                                                                uint64_t* _tmp_7144 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = *_tmp_7144;
                                                                                __aux64__ += INT64_MIN;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                            else
                                                                            {
                                                                                uint32_t* _tmp_7144 = (uint32_t*) buffer; buffer += 4;
                                                                                __aux64__ = *_tmp_7144;
                                                                                __aux64__ += INT32_MIN;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            uint8_t* _tmp_7142 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7142;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value = __aux64__;
                                                                        
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006447\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                        // Field name: dangerous_goods_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                        uint8_t* _tmp_7145 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7145;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006448\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        // Field name: special_transport_type
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        uint8_t* _tmp_7146 = (uint8_t*)buffer;
                                                                        __aux64__ = *_tmp_7146 + 4;
                                                                        buffer += 1;
                                                                        
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006449\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].special_transport_type.value: " << __aux64__;
                                                                        
                                                                        int _if__tmp_7146 = __aux64__;
                                                                        for(int x = 0; x < _if__tmp_7146; x++) {
                                                                            uint8_t __c__;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].special_transport_type.values.push_back(__c__);
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].special_transport_type.values[x] = (*__b__ == 1);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_231 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                                {
                                                                    its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7147;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage.push_back(_tmp_7147);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_7148 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7148;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006450\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].equal_to[0].elements[w].usage[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_7149 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_7149);            // Ignoring opentype data
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to.size() != 0) {
                                                            // Field name: not_equal_to
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_3274 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006451\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].: " << int(*_ext_flag_3274);
                                                            }
                                                            
                                                            int16_t* _tmp_7150 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_7150;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_7150 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006452\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0]. size: " << int(*_tmp_7150);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int y = 0; y < _if__tmp_7150; y++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_y;  // CHOICE
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements.push_back(seqof_y);
                                                            
                                                                // Choice
                                                                uint8_t* _ext_flag_3275 = (uint8_t*)buffer++; // ext flag
                                                                
                                                                   // #0  simpleVehicleType   StationType   
                                                                   // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                                   // #2  iso3833VehicleType   Iso3833VehicleType   
                                                                   // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                                   // #4  engineCharacteristics   EngineCharacteristics   
                                                                   // #5  loadType   LoadType   
                                                                   // #6  usage   VehicleRole   
                                                                uint8_t _choice_233 = *(buffer++);
                                                                
                                                                if(*_ext_flag_3275)
                                                                    _choice_233 += 6 + 1; // Ext addition
                                                                
                                                                if(_choice_233 == 0) {
                                                                    its_container_v1_its_container_msgs::msg::StationType _tmp_7151;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type.push_back(_tmp_7151);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7152 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7152;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006453\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_233 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7153;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code.push_back(_tmp_7153);
                                                                
                                                                    // Choice
                                                                       // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                                       // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                                       // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                                       // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                                    uint8_t _choice_234 = *(buffer++);
                                                                    
                                                                    if(_choice_234 == 0) {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7154;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7154);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                        uint8_t* _tmp_7155 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7155;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006454\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_234 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7156;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7156);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_7157 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7157;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006455\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_234 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7158;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7158);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                        uint8_t* _tmp_7159 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7159;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006456\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                        }
                                                                    }
                                                                    else if(_choice_234 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                                    {
                                                                        dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7160;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7160);
                                                                    
                                                                        // Enumerated
                                                                        // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                        uint8_t* _tmp_7161 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7161;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006457\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        logger->warning() << "Wrong option (" << static_cast<int>(_choice_234) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].eu_vehicle_category_code[0]'; message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_233 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                                {
                                                                    dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7162;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type.push_back(_tmp_7162);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7163 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7163;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006458\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_233 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7164;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value.push_back(_tmp_7164);
                                                                
                                                                        // EnvironmentalCharacteristics  SEQUENCE
                                                                            //  euroValue  EuroValue      
                                                                            //  copValue   CopValue       
                                                                        
                                                                        // Field name: euro_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                        uint8_t* _tmp_7165 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7165;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006459\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].euro_value.value);
                                                                        }
                                                                        
                                                                        // Field name: cop_value
                                                                        // Enumerated
                                                                        // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                        uint8_t* _tmp_7166 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7166;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006460\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].euro_and_co2value[0].cop_value.value);
                                                                        }
                                                                }
                                                                else if(_choice_233 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                                {
                                                                    dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7167;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics.push_back(_tmp_7167);
                                                                
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7168 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7168;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006461\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                }
                                                                else if(_choice_233 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                                {
                                                                    dsrc_v2_ivi_msgs::msg::LoadType _tmp_7169;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type.push_back(_tmp_7169);
                                                                
                                                                        // LoadType  SEQUENCE
                                                                            //  goodsType            GoodsType                
                                                                            //  dangerousGoodsType   DangerousGoodsBasic      
                                                                            //  specialTransportType SpecialTransportType     
                                                                        
                                                                        // Field name: goods_type
                                                                        // Integer
                                                                        // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                        uint8_t* _ext_flag_3283 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006462\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.: " << int(*_ext_flag_3283);
                                                                        }
                                                                        
                                                                        if(*_ext_flag_3283) {
                                                                            uint8_t* _tmp_7171 = (uint8_t*) buffer++;
                                                                            
                                                                            if(*_tmp_7171) {
                                                                                uint64_t* _tmp_7172 = (uint64_t*)buffer; buffer += 8;
                                                                                __aux64__ = *_tmp_7172;
                                                                                __aux64__ += INT64_MIN;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                            else
                                                                            {
                                                                                uint32_t* _tmp_7172 = (uint32_t*) buffer; buffer += 4;
                                                                                __aux64__ = *_tmp_7172;
                                                                                __aux64__ += INT32_MIN;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            uint8_t* _tmp_7170 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7170;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value = __aux64__;
                                                                        
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006463\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                        }
                                                                        
                                                                        // Field name: dangerous_goods_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                        uint8_t* _tmp_7173 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7173;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006464\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].dangerous_goods_type.value);
                                                                        }
                                                                        
                                                                        // Field name: special_transport_type
                                                                        // BitString
                                                                        // BIT_STRING  min(4) max(4) span(1)
                                                                        uint8_t* _tmp_7174 = (uint8_t*)buffer;
                                                                        __aux64__ = *_tmp_7174 + 4;
                                                                        buffer += 1;
                                                                        
                                                                        if(debug)
                                                                            logger->debug() << "|\033[38;5;94m006465\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].special_transport_type.value: " << __aux64__;
                                                                        
                                                                        int _if__tmp_7174 = __aux64__;
                                                                        for(int z = 0; z < _if__tmp_7174; z++) {
                                                                            uint8_t __c__;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].special_transport_type.values.push_back(__c__);
                                                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].special_transport_type.values[z] = (*__b__ == 1);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                            return false;
                                                                        }
                                                                }
                                                                else if(_choice_233 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                                {
                                                                    its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7175;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage.push_back(_tmp_7175);
                                                                
                                                                    // Enumerated
                                                                    // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                    uint8_t* _tmp_7176 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7176;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006466\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].not_equal_to[0].elements[y].usage[0].value);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint16_t* _tmp_7177 = (uint16_t*)buffer;  // OpenType length
                                                                    buffer += 2 + int(*_tmp_7177);            // Ignoring opentype data
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges.size() != 0) {
                                                            // Field name: ranges
                                                            // SequenceOf
                                                            // Data Type UInt8
                                                            // SEQUENCE_OF  min(1) max(4) span(4)
                                                            uint8_t* _ext_flag_3286 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006467\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].: " << int(*_ext_flag_3286);
                                                            }
                                                            
                                                            int16_t* _tmp_7178 = (int16_t*)buffer;
                                                            buffer += 2;
                                                            __aux64__ = *_tmp_7178;
                                                            __aux64__ += 1;     // +min
                                                            
                                                            int _if__tmp_7178 = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006468\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0]. size: " << int(*_tmp_7178);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            for(int a = 0; a < _if__tmp_7178; a++) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_a;  // SEQUENCE
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements.push_back(seqof_a);
                                                            
                                                                    // VehicleCharacteristicsRanges  SEQUENCE
                                                                        //  comparisonOperator ComparisonOperator                      
                                                                        //  limits             VehicleCharacteristicsRanges_limits     
                                                                    
                                                                    // Field name: comparison_operator
                                                                    // Integer
                                                                    // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                                    uint8_t* _tmp_7179 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7179;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006469\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: limits
                                                                    // Choice
                                                                    uint8_t* _ext_flag_3287 = (uint8_t*)buffer++; // ext flag
                                                                    
                                                                       // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                                       // #1  vehicleDimensions   VehicleDimensions   
                                                                       // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                                       // #3  axleWeightLimits   AxleWeightLimits   
                                                                       // #4  passengerCapacity   PassengerCapacity   
                                                                       // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                                       // #6  dieselEmissionValues   DieselEmissionValues   
                                                                       // #7  soundLevel   SoundLevel   
                                                                    uint8_t _choice_235 = *(buffer++);
                                                                    
                                                                    if(*_ext_flag_3287)
                                                                        _choice_235 += 7 + 1; // Ext addition
                                                                    
                                                                    if(_choice_235 == 0) {
                                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_7180;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles.push_back(_tmp_7180);
                                                                    
                                                                        // Integer
                                                                        // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                        uint8_t* _tmp_7181 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7181;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006470\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value);
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else if(_choice_235 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_7182;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions.push_back(_tmp_7182);
                                                                    
                                                                            // VehicleDimensions  SEQUENCE
                                                                                //  vehicleLengthOverall Int1           
                                                                                //  vehicleHeigthOverall Int1           
                                                                                //  vehicleWidthOverall  Int1           
                                                                            
                                                                            // Field name: vehicle_length_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7183 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7183;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006471\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_heigth_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7184 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7184;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006472\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_width_overall
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7185 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7185;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006473\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_7186;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits.push_back(_tmp_7186);
                                                                    
                                                                            // VehicleWeightLimits  SEQUENCE
                                                                                //  vehicleMaxLadenWeight     Int2           
                                                                                //  vehicleTrainMaximumWeight Int2           
                                                                                //  vehicleWeightUnladen      Int2           
                                                                            
                                                                            // Field name: vehicle_max_laden_weight
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7187 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7187;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006474\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_train_maximum_weight
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7188 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7188;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006475\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: vehicle_weight_unladen
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7189 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7189;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006476\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_7190;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits.push_back(_tmp_7190);
                                                                    
                                                                            // AxleWeightLimits  SEQUENCE
                                                                                //  maxLadenweightOnAxle1 Int2           
                                                                                //  maxLadenweightOnAxle2 Int2           
                                                                                //  maxLadenweightOnAxle3 Int2           
                                                                                //  maxLadenweightOnAxle4 Int2           
                                                                                //  maxLadenweightOnAxle5 Int2           
                                                                            
                                                                            // Field name: max_ladenweight_on_axle1
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7191 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7191;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006477\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle2
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7192 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7192;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006478\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle3
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7193 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7193;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006479\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle4
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7194 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7194;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006480\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: max_ladenweight_on_axle5
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7195 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7195;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006481\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_7196;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity.push_back(_tmp_7196);
                                                                    
                                                                            // PassengerCapacity  SEQUENCE
                                                                                //  numberOfSeats          Int1           
                                                                                //  numberOfStandingPlaces Int1           
                                                                            
                                                                            // Field name: number_of_seats
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7197 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7197;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006482\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: number_of_standing_places
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7198 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7198;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006483\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_7199;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values.push_back(_tmp_7199);
                                                                    
                                                                            // ExhaustEmissionValues  SEQUENCE
                                                                                //  unitType      UnitType                             
                                                                                //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                                //  emissionHC    Int2                                 
                                                                                //  emissionNOX   Int2                                 
                                                                                //  emissionHCNOX Int2                                 
                                                                            
                                                                            // Field name: unit_type
                                                                            // Enumerated
                                                                            // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                            uint8_t* _tmp_7200 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7200;
                                                                            __aux64__ += 0;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006484\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].unit_type.value);
                                                                            }
                                                                            
                                                                            // Field name: emission_co
                                                                            // Integer
                                                                            // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                            uint16_t* _tmp_7201 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7201;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006485\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_hc
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7202 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7202;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006486\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_nox
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7203 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7203;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006487\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: emission_hcnox
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7204 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7204;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006488\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_7205;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values.push_back(_tmp_7205);
                                                                    
                                                                            // DieselEmissionValues  SEQUENCE
                                                                                //  particulate     DieselEmissionValues_particulate     
                                                                                //  absorptionCoeff Int2                                 
                                                                            
                                                                            // Field name: particulate
                                                                                // DieselEmissionValues_particulate  SEQUENCE
                                                                                    //  unitType   UnitType                                   
                                                                                    //  value      DieselEmissionValues_particulate_value     
                                                                                
                                                                                // Field name: unit_type
                                                                                // Enumerated
                                                                                // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                                uint8_t* _tmp_7206 = (uint8_t*) buffer++;
                                                                                __aux64__ = *_tmp_7206;
                                                                                __aux64__ += 0;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                                // ******************* MIN validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                // ******************* MAX validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006489\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                                }
                                                                                
                                                                                // Field name: value
                                                                                // Integer
                                                                                // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                                uint16_t* _tmp_7207 = (uint16_t*) buffer; buffer += 2;
                                                                                __aux64__ = *_tmp_7207;
                                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                                
                                                                                if(debug) {
                                                                                    logger->debug() << "|\033[38;5;94m006490\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value;
                                                                                }
                                                                                
                                                                                // ******************* MIN validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                    return false;
                                                                                }
                                                                                // ******************* MAX validator *******************
                                                                                if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                                    return false;
                                                                                }
                                                                            
                                                                            // Field name: absorption_coeff
                                                                            // Integer
                                                                            // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                            uint16_t* _tmp_7208 = (uint16_t*) buffer; buffer += 2;
                                                                            __aux64__ = *_tmp_7208;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006491\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else if(_choice_235 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                                    {
                                                                        dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_7209;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level.push_back(_tmp_7209);
                                                                    
                                                                            // SoundLevel  SEQUENCE
                                                                                //  soundstationary Int1           
                                                                                //  sounddriveby    Int1           
                                                                            
                                                                            // Field name: soundstationary
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7210 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7210;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006492\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                            
                                                                            // Field name: sounddriveby
                                                                            // Integer
                                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                            uint8_t* _tmp_7211 = (uint8_t*) buffer++;
                                                                            __aux64__ = *_tmp_7211;
                                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                            
                                                                            if(debug) {
                                                                                logger->debug() << "|\033[38;5;94m006493\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value) << 
                                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value);
                                                                            }
                                                                            
                                                                            // ******************* MIN validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                                return false;
                                                                            }
                                                                            // ******************* MAX validator *******************
                                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].trailer[0].elements[v].ranges[0].elements[a].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                                return false;
                                                                            }
                                                                    }
                                                                    else
                                                                    {
                                                                        uint16_t* _tmp_7212 = (uint16_t*)buffer;  // OpenType length
                                                                        buffer += 2 + int(*_tmp_7212);            // Ignoring opentype data
                                                                    }
                                                            }
                                                        }
                                                }
                                            }
                                            
                                            if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train.size() != 0) {
                                                // Field name: train
                                                    // TrainCharacteristics  SEQUENCE
                                                        //  equalTo    TractorCharacteristics_equalTo        
                                                        //  notEqualTo TractorCharacteristics_notEqualTo     
                                                        //  ranges     TractorCharacteristics_ranges         
                                                    
                                                    // Field name: equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3290 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006494\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.: " << int(*_ext_flag_3290);
                                                    }
                                                    
                                                    int16_t* _tmp_7213 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_7213;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_7213 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006495\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to. size: " << int(*_tmp_7213);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int b = 0; b < _if__tmp_7213; b++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_b;  // CHOICE
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements.push_back(seqof_b);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_3291 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_236 = *(buffer++);
                                                        
                                                        if(*_ext_flag_3291)
                                                            _choice_236 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_236 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_7214;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type.push_back(_tmp_7214);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7215 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7215;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006496\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_236 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7216;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code.push_back(_tmp_7216);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_237 = *(buffer++);
                                                            
                                                            if(_choice_237 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7217;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7217);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_7218 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7218;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006497\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_237 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7219;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7219);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_7220 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7220;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006498\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_237 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7221;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7221);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_7222 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7222;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006499\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_237 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7223;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7223);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_7224 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7224;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006500\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_237) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_236 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7225;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type.push_back(_tmp_7225);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7226 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7226;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006501\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_236 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7227;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value.push_back(_tmp_7227);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_7228 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7228;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006502\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_7229 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7229;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006503\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_236 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7230;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics.push_back(_tmp_7230);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7231 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7231;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006504\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_236 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_7232;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type.push_back(_tmp_7232);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_3299 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006505\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.: " << int(*_ext_flag_3299);
                                                                }
                                                                
                                                                if(*_ext_flag_3299) {
                                                                    uint8_t* _tmp_7234 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_7234) {
                                                                        uint64_t* _tmp_7235 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_7235;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_7235 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_7235;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_7233 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7233;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006506\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_7236 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7236;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006507\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_7237 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_7237 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006508\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_7237 = __aux64__;
                                                                for(int c = 0; c < _if__tmp_7237; c++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].special_transport_type.values[c] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_236 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7238;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage.push_back(_tmp_7238);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_7239 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7239;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006509\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].equal_to.elements[b].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_7240 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_7240);            // Ignoring opentype data
                                                        }
                                                    }
                                                    
                                                    // Field name: not_equal_to
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3302 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006510\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.: " << int(*_ext_flag_3302);
                                                    }
                                                    
                                                    int16_t* _tmp_7241 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_7241;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_7241 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006511\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to. size: " << int(*_tmp_7241);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int d = 0; d < _if__tmp_7241; d++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsFixValues seqof_d;  // CHOICE
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements.push_back(seqof_d);
                                                    
                                                        // Choice
                                                        uint8_t* _ext_flag_3303 = (uint8_t*)buffer++; // ext flag
                                                        
                                                           // #0  simpleVehicleType   StationType   
                                                           // #1  euVehicleCategoryCode   EuVehicleCategoryCode   
                                                           // #2  iso3833VehicleType   Iso3833VehicleType   
                                                           // #3  euroAndCo2value   EnvironmentalCharacteristics   
                                                           // #4  engineCharacteristics   EngineCharacteristics   
                                                           // #5  loadType   LoadType   
                                                           // #6  usage   VehicleRole   
                                                        uint8_t _choice_238 = *(buffer++);
                                                        
                                                        if(*_ext_flag_3303)
                                                            _choice_238 += 6 + 1; // Ext addition
                                                        
                                                        if(_choice_238 == 0) {
                                                            its_container_v1_its_container_msgs::msg::StationType _tmp_7242;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type.push_back(_tmp_7242);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7243 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7243;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006512\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].simple_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_238 == 1)  // CHOICE VehicleCharacteristicsFixValues  fieldName(eu_vehicle_category_code)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryCode _tmp_7244;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code.push_back(_tmp_7244);
                                                        
                                                            // Choice
                                                               // #0  euVehicleCategoryL   EuVehicleCategoryL   
                                                               // #1  euVehicleCategoryM   EuVehicleCategoryM   
                                                               // #2  euVehicleCategoryN   EuVehicleCategoryN   
                                                               // #3  euVehicleCategoryO   EuVehicleCategoryO   
                                                            uint8_t _choice_239 = *(buffer++);
                                                            
                                                            if(_choice_239 == 0) {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryL _tmp_7245;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l.push_back(_tmp_7245);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(6) span(7) datatype(Int32)
                                                                uint8_t* _tmp_7246 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7246;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 6) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value' " << (__aux64__) << " exceeds max allowable (6); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006513\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_l[0].value);
                                                                }
                                                            }
                                                            else if(_choice_239 == 1)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_m)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryM _tmp_7247;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m.push_back(_tmp_7247);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_7248 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7248;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006514\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_m[0].value);
                                                                }
                                                            }
                                                            else if(_choice_239 == 2)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_n)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryN _tmp_7249;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n.push_back(_tmp_7249);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(2) span(3) datatype(Int32)
                                                                uint8_t* _tmp_7250 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7250;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 2) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value' " << (__aux64__) << " exceeds max allowable (2); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006515\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_n[0].value);
                                                                }
                                                            }
                                                            else if(_choice_239 == 3)  // CHOICE EuVehicleCategoryCode  fieldName(eu_vehicle_category_o)
                                                            {
                                                                dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::EuVehicleCategoryO _tmp_7251;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o.push_back(_tmp_7251);
                                                            
                                                                // Enumerated
                                                                // INT32  min(0) max(3) span(4) datatype(Int32)
                                                                uint8_t* _tmp_7252 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7252;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006516\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0].eu_vehicle_category_o[0].value);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                logger->warning() << "Wrong option (" << static_cast<int>(_choice_239) << ") selected in CHOICE EuVehicleCategoryCode in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].eu_vehicle_category_code[0]'; message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_238 == 2)  // CHOICE VehicleCharacteristicsFixValues  fieldName(iso3833_vehicle_type)
                                                        {
                                                            dsrc_v2_electronicregistrationidentificationvehicledatamodule_msgs::msg::Iso3833VehicleType _tmp_7253;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type.push_back(_tmp_7253);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7254 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7254;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006517\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].iso3833_vehicle_type[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_238 == 3)  // CHOICE VehicleCharacteristicsFixValues  fieldName(euro_and_co2value)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EnvironmentalCharacteristics _tmp_7255;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value.push_back(_tmp_7255);
                                                        
                                                                // EnvironmentalCharacteristics  SEQUENCE
                                                                    //  euroValue  EuroValue      
                                                                    //  copValue   CopValue       
                                                                
                                                                // Field name: euro_value
                                                                // Enumerated
                                                                // INT32  min(0) max(15) span(16) datatype(Int32)
                                                                uint8_t* _tmp_7256 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7256;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006518\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].euro_value.value);
                                                                }
                                                                
                                                                // Field name: cop_value
                                                                // Enumerated
                                                                // INT32  min(0) max(8) span(9) datatype(Int32)
                                                                uint8_t* _tmp_7257 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7257;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006519\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].euro_and_co2value[0].cop_value.value);
                                                                }
                                                        }
                                                        else if(_choice_238 == 4)  // CHOICE VehicleCharacteristicsFixValues  fieldName(engine_characteristics)
                                                        {
                                                            dsrc_v2_efcdsrcapplication_msgs::msg::EngineCharacteristics _tmp_7258;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics.push_back(_tmp_7258);
                                                        
                                                            // Integer
                                                            // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                            uint8_t* _tmp_7259 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7259;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006520\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].engine_characteristics[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                return false;
                                                            }
                                                        }
                                                        else if(_choice_238 == 5)  // CHOICE VehicleCharacteristicsFixValues  fieldName(load_type)
                                                        {
                                                            dsrc_v2_ivi_msgs::msg::LoadType _tmp_7260;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type.push_back(_tmp_7260);
                                                        
                                                                // LoadType  SEQUENCE
                                                                    //  goodsType            GoodsType                
                                                                    //  dangerousGoodsType   DangerousGoodsBasic      
                                                                    //  specialTransportType SpecialTransportType     
                                                                
                                                                // Field name: goods_type
                                                                // Integer
                                                                // UINT8  min(0) max(15) span(16) datatype(UInt8)
                                                                uint8_t* _ext_flag_3311 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006521\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.: " << int(*_ext_flag_3311);
                                                                }
                                                                
                                                                if(*_ext_flag_3311) {
                                                                    uint8_t* _tmp_7262 = (uint8_t*) buffer++;
                                                                    
                                                                    if(*_tmp_7262) {
                                                                        uint64_t* _tmp_7263 = (uint64_t*)buffer; buffer += 8;
                                                                        __aux64__ = *_tmp_7263;
                                                                        __aux64__ += INT64_MIN;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                    else
                                                                    {
                                                                        uint32_t* _tmp_7263 = (uint32_t*) buffer; buffer += 4;
                                                                        __aux64__ = *_tmp_7263;
                                                                        __aux64__ += INT32_MIN;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    uint8_t* _tmp_7261 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7261;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value = __aux64__;
                                                                
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006522\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].goods_type.value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                }
                                                                
                                                                // Field name: dangerous_goods_type
                                                                // Enumerated
                                                                // INT32  min(0) max(19) span(20) datatype(Int32)
                                                                uint8_t* _tmp_7264 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7264;
                                                                __aux64__ += 0;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value = __aux64__;
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 19) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value' " << (__aux64__) << " exceeds max allowable (19); message dropped.";
                                                                    return false;
                                                                }
                                                                
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006523\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].dangerous_goods_type.value);
                                                                }
                                                                
                                                                // Field name: special_transport_type
                                                                // BitString
                                                                // BIT_STRING  min(4) max(4) span(1)
                                                                uint8_t* _tmp_7265 = (uint8_t*)buffer;
                                                                __aux64__ = *_tmp_7265 + 4;
                                                                buffer += 1;
                                                                
                                                                if(debug)
                                                                    logger->debug() << "|\033[38;5;94m006524\033[0m| ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].special_transport_type.value: " << __aux64__;
                                                                
                                                                int _if__tmp_7265 = __aux64__;
                                                                for(int e = 0; e < _if__tmp_7265; e++) {
                                                                    uint8_t __c__;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].special_transport_type.values.push_back(__c__);
                                                                    uint8_t* __b__ = (uint8_t*)buffer++;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].special_transport_type.values[e] = (*__b__ == 1);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].special_transport_type.value' " << (__aux64__) << " is less than allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].load_type[0].special_transport_type.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                                    return false;
                                                                }
                                                        }
                                                        else if(_choice_238 == 6)  // CHOICE VehicleCharacteristicsFixValues  fieldName(usage)
                                                        {
                                                            its_container_v1_its_container_msgs::msg::VehicleRole _tmp_7266;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage.push_back(_tmp_7266);
                                                        
                                                            // Enumerated
                                                            // INT32  min(0) max(15) span(16) datatype(Int32)
                                                            uint8_t* _tmp_7267 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7267;
                                                            __aux64__ += 0;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value = __aux64__;
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 15) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value' " << (__aux64__) << " exceeds max allowable (15); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006525\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].not_equal_to.elements[d].usage[0].value);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            uint16_t* _tmp_7268 = (uint16_t*)buffer;  // OpenType length
                                                            buffer += 2 + int(*_tmp_7268);            // Ignoring opentype data
                                                        }
                                                    }
                                                    
                                                    // Field name: ranges
                                                    // SequenceOf
                                                    // Data Type UInt8
                                                    // SEQUENCE_OF  min(1) max(4) span(4)
                                                    uint8_t* _ext_flag_3314 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006526\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.: " << int(*_ext_flag_3314);
                                                    }
                                                    
                                                    int16_t* _tmp_7269 = (int16_t*)buffer;
                                                    buffer += 2;
                                                    __aux64__ = *_tmp_7269;
                                                    __aux64__ += 1;     // +min
                                                    
                                                    int _if__tmp_7269 = __aux64__;
                                                    
                                                    if(debug) {
                                                        logger->debug() << "|\033[38;5;94m006527\033[0m| SequenceOf ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges. size: " << int(*_tmp_7269);
                                                    }
                                                    
                                                    // ******************* MIN validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                        return false;
                                                    }
                                                    // ******************* MAX validator *******************
                                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                        return false;
                                                    }
                                                    
                                                    
                                                    for(int f = 0; f < _if__tmp_7269; f++) {
                                                        dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRanges seqof_f;  // SEQUENCE
                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements.push_back(seqof_f);
                                                    
                                                            // VehicleCharacteristicsRanges  SEQUENCE
                                                                //  comparisonOperator ComparisonOperator                      
                                                                //  limits             VehicleCharacteristicsRanges_limits     
                                                            
                                                            // Field name: comparison_operator
                                                            // Integer
                                                            // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                                            uint8_t* _tmp_7270 = (uint8_t*) buffer++;
                                                            __aux64__ = *_tmp_7270;
                                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value = __aux64__;
                                                            
                                                            if(debug) {
                                                                logger->debug() << "|\033[38;5;94m006528\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value) << 
                                                                             " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value);
                                                            }
                                                            
                                                            // ******************* MIN validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                return false;
                                                            }
                                                            // ******************* MAX validator *******************
                                                            if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].comparison_operator.value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                                                return false;
                                                            }
                                                            
                                                            // Field name: limits
                                                            // Choice
                                                            uint8_t* _ext_flag_3315 = (uint8_t*)buffer++; // ext flag
                                                            
                                                               // #0  numberOfAxles   VehicleCharacteristicsRanges_limits_numberOfAxles   
                                                               // #1  vehicleDimensions   VehicleDimensions   
                                                               // #2  vehicleWeightLimits   VehicleWeightLimits   
                                                               // #3  axleWeightLimits   AxleWeightLimits   
                                                               // #4  passengerCapacity   PassengerCapacity   
                                                               // #5  exhaustEmissionValues   ExhaustEmissionValues   
                                                               // #6  dieselEmissionValues   DieselEmissionValues   
                                                               // #7  soundLevel   SoundLevel   
                                                            uint8_t _choice_240 = *(buffer++);
                                                            
                                                            if(*_ext_flag_3315)
                                                                _choice_240 += 7 + 1; // Ext addition
                                                            
                                                            if(_choice_240 == 0) {
                                                                dsrc_v2_ivi_msgs::msg::VehicleCharacteristicsRangesLimitsNumberOfAxles _tmp_7271;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles.push_back(_tmp_7271);
                                                            
                                                                // Integer
                                                                // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                                                uint8_t* _tmp_7272 = (uint8_t*) buffer++;
                                                                __aux64__ = *_tmp_7272;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value = __aux64__;
                                                                
                                                                if(debug) {
                                                                    logger->debug() << "|\033[38;5;94m006529\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value) << 
                                                                                 " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value);
                                                                }
                                                                
                                                                // ******************* MIN validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                    return false;
                                                                }
                                                                // ******************* MAX validator *******************
                                                                if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.number_of_axles[0].value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                                                    return false;
                                                                }
                                                            }
                                                            else if(_choice_240 == 1)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_dimensions)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleDimensions _tmp_7273;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions.push_back(_tmp_7273);
                                                            
                                                                    // VehicleDimensions  SEQUENCE
                                                                        //  vehicleLengthOverall Int1           
                                                                        //  vehicleHeigthOverall Int1           
                                                                        //  vehicleWidthOverall  Int1           
                                                                    
                                                                    // Field name: vehicle_length_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7274 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7274;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006530\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_length_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_heigth_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7275 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7275;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006531\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_heigth_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_width_overall
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7276 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7276;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006532\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_dimensions[0].vehicle_width_overall.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 2)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(vehicle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::VehicleWeightLimits _tmp_7277;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits.push_back(_tmp_7277);
                                                            
                                                                    // VehicleWeightLimits  SEQUENCE
                                                                        //  vehicleMaxLadenWeight     Int2           
                                                                        //  vehicleTrainMaximumWeight Int2           
                                                                        //  vehicleWeightUnladen      Int2           
                                                                    
                                                                    // Field name: vehicle_max_laden_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7278 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7278;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006533\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_max_laden_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_train_maximum_weight
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7279 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7279;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006534\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_train_maximum_weight.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: vehicle_weight_unladen
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7280 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7280;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006535\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.vehicle_weight_limits[0].vehicle_weight_unladen.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 3)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(axle_weight_limits)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::AxleWeightLimits _tmp_7281;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits.push_back(_tmp_7281);
                                                            
                                                                    // AxleWeightLimits  SEQUENCE
                                                                        //  maxLadenweightOnAxle1 Int2           
                                                                        //  maxLadenweightOnAxle2 Int2           
                                                                        //  maxLadenweightOnAxle3 Int2           
                                                                        //  maxLadenweightOnAxle4 Int2           
                                                                        //  maxLadenweightOnAxle5 Int2           
                                                                    
                                                                    // Field name: max_ladenweight_on_axle1
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7282 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7282;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006536\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle1.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle2
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7283 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7283;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006537\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle2.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle3
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7284 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7284;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006538\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle3.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle4
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7285 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7285;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006539\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle4.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: max_ladenweight_on_axle5
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7286 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7286;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006540\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.axle_weight_limits[0].max_ladenweight_on_axle5.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 4)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(passenger_capacity)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::PassengerCapacity _tmp_7287;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity.push_back(_tmp_7287);
                                                            
                                                                    // PassengerCapacity  SEQUENCE
                                                                        //  numberOfSeats          Int1           
                                                                        //  numberOfStandingPlaces Int1           
                                                                    
                                                                    // Field name: number_of_seats
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7288 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7288;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006541\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_seats.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: number_of_standing_places
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7289 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7289;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006542\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.passenger_capacity[0].number_of_standing_places.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 5)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(exhaust_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::ExhaustEmissionValues _tmp_7290;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values.push_back(_tmp_7290);
                                                            
                                                                    // ExhaustEmissionValues  SEQUENCE
                                                                        //  unitType      UnitType                             
                                                                        //  emissionCO    ExhaustEmissionValues_emissionCO     
                                                                        //  emissionHC    Int2                                 
                                                                        //  emissionNOX   Int2                                 
                                                                        //  emissionHCNOX Int2                                 
                                                                    
                                                                    // Field name: unit_type
                                                                    // Enumerated
                                                                    // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                    uint8_t* _tmp_7291 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7291;
                                                                    __aux64__ += 0;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value = __aux64__;
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006543\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].unit_type.value);
                                                                    }
                                                                    
                                                                    // Field name: emission_co
                                                                    // Integer
                                                                    // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                    uint16_t* _tmp_7292 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7292;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006544\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_co.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hc
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7293 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7293;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006545\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hc.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_nox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7294 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7294;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006546\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_nox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: emission_hcnox
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7295 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7295;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006547\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.exhaust_emission_values[0].emission_hcnox.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 6)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(diesel_emission_values)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::DieselEmissionValues _tmp_7296;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values.push_back(_tmp_7296);
                                                            
                                                                    // DieselEmissionValues  SEQUENCE
                                                                        //  particulate     DieselEmissionValues_particulate     
                                                                        //  absorptionCoeff Int2                                 
                                                                    
                                                                    // Field name: particulate
                                                                        // DieselEmissionValues_particulate  SEQUENCE
                                                                            //  unitType   UnitType                                   
                                                                            //  value      DieselEmissionValues_particulate_value     
                                                                        
                                                                        // Field name: unit_type
                                                                        // Enumerated
                                                                        // INT32  min(0) max(1) span(2) datatype(Int32)
                                                                        uint8_t* _tmp_7297 = (uint8_t*) buffer++;
                                                                        __aux64__ = *_tmp_7297;
                                                                        __aux64__ += 0;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value = __aux64__;
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                                                            return false;
                                                                        }
                                                                        
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006548\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.unit_type.value);
                                                                        }
                                                                        
                                                                        // Field name: value
                                                                        // Integer
                                                                        // UINT16  min(0) max(32767) span(32768) datatype(UInt16)
                                                                        uint16_t* _tmp_7298 = (uint16_t*) buffer; buffer += 2;
                                                                        __aux64__ = *_tmp_7298;
                                                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value = __aux64__;
                                                                        
                                                                        if(debug) {
                                                                            logger->debug() << "|\033[38;5;94m006549\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value) << 
                                                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value;
                                                                        }
                                                                        
                                                                        // ******************* MIN validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                            return false;
                                                                        }
                                                                        // ******************* MAX validator *******************
                                                                        if(VALIDATORS_ENABLED && __aux64__ > 32767) {
                                                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].particulate.value.value' " << (__aux64__) << " exceeds max allowable (32767); message dropped.";
                                                                            return false;
                                                                        }
                                                                    
                                                                    // Field name: absorption_coeff
                                                                    // Integer
                                                                    // UINT16  min(0) max(65535) span(65536) datatype(UInt16)
                                                                    uint16_t* _tmp_7299 = (uint16_t*) buffer; buffer += 2;
                                                                    __aux64__ = *_tmp_7299;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006550\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value;
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 65535) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.diesel_emission_values[0].absorption_coeff.value' " << (__aux64__) << " exceeds max allowable (65535); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else if(_choice_240 == 7)  // CHOICE VehicleCharacteristicsRanges_limits  fieldName(sound_level)
                                                            {
                                                                dsrc_v2_efcdsrcapplication_msgs::msg::SoundLevel _tmp_7300;
                                                                ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level.push_back(_tmp_7300);
                                                            
                                                                    // SoundLevel  SEQUENCE
                                                                        //  soundstationary Int1           
                                                                        //  sounddriveby    Int1           
                                                                    
                                                                    // Field name: soundstationary
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7301 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7301;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006551\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].soundstationary.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                                    
                                                                    // Field name: sounddriveby
                                                                    // Integer
                                                                    // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                                                    uint8_t* _tmp_7302 = (uint8_t*) buffer++;
                                                                    __aux64__ = *_tmp_7302;
                                                                    ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value = __aux64__;
                                                                    
                                                                    if(debug) {
                                                                        logger->debug() << "|\033[38;5;94m006552\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value) << 
                                                                                     " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value);
                                                                    }
                                                                    
                                                                    // ******************* MIN validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                                                        return false;
                                                                    }
                                                                    // ******************* MAX validator *******************
                                                                    if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_type_qualifier[0].train[0].ranges.elements[f].limits.sound_level[0].sounddriveby.value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                                                        return false;
                                                                    }
                                                            }
                                                            else
                                                            {
                                                                uint16_t* _tmp_7303 = (uint16_t*)buffer;  // OpenType length
                                                                buffer += 2 + int(*_tmp_7303);            // Ignoring opentype data
                                                            }
                                                    }
                                            }
                                    }
                                    
                                    // Field name: lane_status
                                    // Integer
                                    // UINT8  min(0) max(7) span(8) datatype(UInt8)
                                    uint8_t* _ext_flag_3318 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006553\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.: " << int(*_ext_flag_3318);
                                    }
                                    
                                    if(*_ext_flag_3318) {
                                        uint8_t* _tmp_7305 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_7305) {
                                            uint64_t* _tmp_7306 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_7306;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_7306 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_7306;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_7304 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_7304;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006554\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value) << 
                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 7) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_status.value' " << (__aux64__) << " exceeds max allowable (7); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    if(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width.size() != 0) {
                                        // Field name: lane_width
                                        // Integer
                                        // UINT16  min(0) max(1023) span(1024) datatype(UInt16)
                                        uint16_t* _tmp_7307 = (uint16_t*) buffer; buffer += 2;
                                        __aux64__ = *_tmp_7307;
                                        ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value = __aux64__;
                                        
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006555\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value) << 
                                                         " ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value: " << ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value;
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 1023) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].lane_width[0].value' " << (__aux64__) << " exceeds max allowable (1023); message dropped.";
                                            return false;
                                        }
                                    }
                                    if(*_ext_flag_3231) { // from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n]. 
                                        uint8_t* _tmp_7308 = (uint8_t*) buffer++;  // number of extensions
                                        bool _array_75[*_tmp_7308];
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006556\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].rcc[0].elements[l].lane_configuration.elements[n].: " << static_cast<unsigned int>(*_tmp_7308);
                                        
                                        // Extensions bytemap
                                        for(int i = 0; i < *_tmp_7308; i++)
                                            _array_75[i] = (*buffer++) != 0;
                                        
                                        // Discarding unknown OpenType containers
                                        for(int i = 0; i < *_tmp_7308; i++) {
                                            uint16_t* _tmp_7309 = (uint16_t*)buffer;  // OpenType length
                                            buffer += 2;
                                        
                                            if(debug) {
                                            }
                                        
                                            for(int i = 0; i < *_tmp_7309; i++)
                                                buffer++;
                                        }
                                        
                                    }
                            }
                            if(*_ext_flag_3226) { // from ros->ivi.optional[0].elements[y].rcc[0].elements[l]. 
                                uint8_t* _tmp_7310 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_76[*_tmp_7310];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006557\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].rcc[0].elements[l].: " << static_cast<unsigned int>(*_tmp_7310);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_7310; i++)
                                    _array_76[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_7310; i++) {
                                    uint16_t* _tmp_7311 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_7311; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_200 == 3)  // CHOICE IviContainer  fieldName(tc)
                {
                    dsrc_v2_ivi_msgs::msg::TextContainer _tmp_7312;
                    ros->ivi.optional[0].elements[y].tc.push_back(_tmp_7312);
                
                    // SequenceOf
                    // Data Type UInt8
                    // SEQUENCE_OF  min(1) max(16) span(16)
                    uint8_t* _ext_flag_3319 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m006558\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].: " << int(*_ext_flag_3319);
                    }
                    
                    int16_t* _tmp_7313 = (int16_t*)buffer;
                    buffer += 2;
                    __aux64__ = *_tmp_7313;
                    __aux64__ += 1;     // +min
                    
                    int _if__tmp_7313 = __aux64__;
                    
                    if(debug) {
                        logger->debug() << "|\033[38;5;94m006559\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0]. size: " << int(*_tmp_7313);
                    }
                    
                    // ******************* MIN validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                        return false;
                    }
                    // ******************* MAX validator *******************
                    if(VALIDATORS_ENABLED && __aux64__ > 16) {
                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].value' " << (__aux64__) << " exceeds max allowable (16); message dropped.";
                        return false;
                    }
                    
                    
                    for(int g = 0; g < _if__tmp_7313; g++) {
                        dsrc_v2_ivi_msgs::msg::TcPart seqof_g;  // SEQUENCE
                        ros->ivi.optional[0].elements[y].tc[0].elements.push_back(seqof_g);
                    
                            // TcPart  SEQUENCE
                                //  detectionZoneIds       TcPart_detectionZoneIds         OPTIONAL  
                                //  relevanceZoneIds       TcPart_relevanceZoneIds           
                                //  direction              Direction                       OPTIONAL  
                                //  driverAwarenessZoneIds TcPart_driverAwarenessZoneIds   OPTIONAL  
                                //  minimumAwarenessTime   TcPart_minimumAwarenessTime     OPTIONAL  
                                //  applicableLanes        TcPart_applicableLanes          OPTIONAL  
                                //  layoutId               TcPart_layoutId                 OPTIONAL  
                                //  preStoredlayoutId      TcPart_preStoredlayoutId        OPTIONAL  
                                //  text                   TcPart_text                     OPTIONAL  
                                //  data                   TcPart_data                       
                                //  ...
                            uint8_t* _ext_flag_3320 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006560\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].: " << int(*_ext_flag_3320);
                            }
                            
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartDetectionZoneIds _tmp_7314;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids.push_back(_tmp_7314);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006561\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::Direction _tmp_7315;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].direction.push_back(_tmp_7315);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006562\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].direction " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartDriverAwarenessZoneIds _tmp_7316;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids.push_back(_tmp_7316);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006563\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartMinimumAwarenessTime _tmp_7317;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time.push_back(_tmp_7317);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006564\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartApplicableLanes _tmp_7318;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes.push_back(_tmp_7318);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006565\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartLayoutId _tmp_7319;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id.push_back(_tmp_7319);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006566\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartPreStoredlayoutId _tmp_7320;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id.push_back(_tmp_7320);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006567\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id " << tools::green("present");
                            }
                            if(*(buffer++)) { 
                                dsrc_v2_ivi_msgs::msg::TcPartText _tmp_7321;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].text.push_back(_tmp_7321);
                            
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006568\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].text " << tools::green("present");
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids.size() != 0) {
                                // Field name: detection_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3321 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006569\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].: " << int(*_ext_flag_3321);
                                }
                                
                                int16_t* _tmp_7322 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_7322;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_7322 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006570\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0]. size: " << int(*_tmp_7322);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int h = 0; h < _if__tmp_7322; h++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_h;  // INTEGER
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements.push_back(seqof_h);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_3322 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006571\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].: " << int(*_ext_flag_3322);
                                    }
                                    
                                    if(*_ext_flag_3322) {
                                        uint8_t* _tmp_7324 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_7324) {
                                            uint64_t* _tmp_7325 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_7325;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_7325 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_7325;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_7323 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_7323;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006572\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value) << 
                                                         " ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].detection_zone_ids[0].elements[h].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            // Field name: relevance_zone_ids
                            // SequenceOf
                            // Data Type UInt8
                            // SEQUENCE_OF  min(1) max(8) span(8)
                            uint8_t* _ext_flag_3323 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006573\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.: " << int(*_ext_flag_3323);
                            }
                            
                            int16_t* _tmp_7326 = (int16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_7326;
                            __aux64__ += 1;     // +min
                            
                            int _if__tmp_7326 = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006574\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids. size: " << int(*_tmp_7326);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                return false;
                            }
                            
                            
                            for(int i = 0; i < _if__tmp_7326; i++) {
                                dsrc_v2_ivi_msgs::msg::Zid seqof_i;  // INTEGER
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements.push_back(seqof_i);
                            
                                // Integer
                                // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                uint8_t* _ext_flag_3324 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006575\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].: " << int(*_ext_flag_3324);
                                }
                                
                                if(*_ext_flag_3324) {
                                    uint8_t* _tmp_7328 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_7328) {
                                        uint64_t* _tmp_7329 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_7329;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_7329 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_7329;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_7327 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7327;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006576\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value) << 
                                                     " ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].relevance_zone_ids.elements[i].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].direction.size() != 0) {
                                // Field name: direction
                                // Integer
                                // UINT8  min(0) max(3) span(4) datatype(UInt8)
                                uint8_t* _tmp_7330 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7330;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006577\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value) << 
                                                 " ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 3) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].direction[0].value' " << (__aux64__) << " exceeds max allowable (3); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids.size() != 0) {
                                // Field name: driver_awareness_zone_ids
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3325 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006578\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].: " << int(*_ext_flag_3325);
                                }
                                
                                int16_t* _tmp_7331 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_7331;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_7331 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006579\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0]. size: " << int(*_tmp_7331);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int j = 0; j < _if__tmp_7331; j++) {
                                    dsrc_v2_ivi_msgs::msg::Zid seqof_j;  // INTEGER
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements.push_back(seqof_j);
                                
                                    // Integer
                                    // UINT8  min(1) max(32) span(32) datatype(UInt8)
                                    uint8_t* _ext_flag_3326 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006580\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].: " << int(*_ext_flag_3326);
                                    }
                                    
                                    if(*_ext_flag_3326) {
                                        uint8_t* _tmp_7333 = (uint8_t*) buffer++;
                                        
                                        if(*_tmp_7333) {
                                            uint64_t* _tmp_7334 = (uint64_t*)buffer; buffer += 8;
                                            __aux64__ = *_tmp_7334;
                                            __aux64__ += INT64_MIN;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value = __aux64__;
                                        }
                                        else
                                        {
                                            uint32_t* _tmp_7334 = (uint32_t*) buffer; buffer += 4;
                                            __aux64__ = *_tmp_7334;
                                            __aux64__ += INT32_MIN;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value = __aux64__;
                                        }
                                    }
                                    else
                                    {
                                        uint8_t* _tmp_7332 = (uint8_t*) buffer++;
                                        __aux64__ = *_tmp_7332;
                                        __aux64__ += 1;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value = __aux64__;
                                    
                                        if(debug) {
                                            logger->debug() << "|\033[38;5;94m006581\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value) << 
                                                         " ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 32) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].driver_awareness_zone_ids[0].elements[j].value' " << (__aux64__) << " exceeds max allowable (32); message dropped.";
                                            return false;
                                        }
                                        
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time.size() != 0) {
                                // Field name: minimum_awareness_time
                                // Integer
                                // UINT8  min(0) max(255) span(256) datatype(UInt8)
                                uint8_t* _tmp_7335 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7335;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006582\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value) << 
                                                 " ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 255) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].minimum_awareness_time[0].value' " << (__aux64__) << " exceeds max allowable (255); message dropped.";
                                    return false;
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes.size() != 0) {
                                // Field name: applicable_lanes
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(8) span(8)
                                uint8_t* _ext_flag_3327 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006583\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].: " << int(*_ext_flag_3327);
                                }
                                
                                int16_t* _tmp_7336 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_7336;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_7336 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006584\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0]. size: " << int(*_tmp_7336);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int k = 0; k < _if__tmp_7336; k++) {
                                    its_container_v1_its_container_msgs::msg::LanePosition seqof_k;  // INTEGER
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements.push_back(seqof_k);
                                
                                    // Integer
                                    // INT8  min(-1) max(14) span(16) datatype(Int8)
                                    uint8_t* _tmp_7337 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7337;
                                    __aux64__ += -1;
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value = __aux64__;
                                    
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006585\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value) << 
                                                     " ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < -1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value' " << (__aux64__) << " is less than allowable (-1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 14) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].applicable_lanes[0].elements[k].value' " << (__aux64__) << " exceeds max allowable (14); message dropped.";
                                        return false;
                                    }
                                    
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id.size() != 0) {
                                // Field name: layout_id
                                // Integer
                                // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                uint8_t* _ext_flag_3328 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006586\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].: " << int(*_ext_flag_3328);
                                }
                                
                                if(*_ext_flag_3328) {
                                    uint8_t* _tmp_7339 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_7339) {
                                        uint64_t* _tmp_7340 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_7340;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_7340 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_7340;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_7338 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7338;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006587\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value) << 
                                                     " ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].layout_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id.size() != 0) {
                                // Field name: pre_storedlayout_id
                                // Integer
                                // UINT8  min(1) max(64) span(64) datatype(UInt8)
                                uint8_t* _ext_flag_3329 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006588\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].: " << int(*_ext_flag_3329);
                                }
                                
                                if(*_ext_flag_3329) {
                                    uint8_t* _tmp_7342 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_7342) {
                                        uint64_t* _tmp_7343 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_7343;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_7343 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_7343;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_7341 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7341;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006589\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value) << 
                                                     " ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 64) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].pre_storedlayout_id[0].value' " << (__aux64__) << " exceeds max allowable (64); message dropped.";
                                        return false;
                                    }
                                    
                                }
                            }
                            
                            if(ros->ivi.optional[0].elements[y].tc[0].elements[g].text.size() != 0) {
                                // Field name: text
                                // SequenceOf
                                // Data Type UInt8
                                // SEQUENCE_OF  min(1) max(4) span(4)
                                uint8_t* _ext_flag_3330 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006590\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].: " << int(*_ext_flag_3330);
                                }
                                
                                int16_t* _tmp_7344 = (int16_t*)buffer;
                                buffer += 2;
                                __aux64__ = *_tmp_7344;
                                __aux64__ += 1;     // +min
                                
                                int _if__tmp_7344 = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006591\033[0m| SequenceOf ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0]. size: " << int(*_tmp_7344);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                    return false;
                                }
                                
                                
                                for(int l = 0; l < _if__tmp_7344; l++) {
                                    dsrc_v2_ivi_msgs::msg::Text seqof_l;  // SEQUENCE
                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements.push_back(seqof_l);
                                
                                        // Text  SEQUENCE
                                            //  layoutComponentId Text_layoutComponentId   OPTIONAL  
                                            //  language          Text_language              
                                            //  textContent       Text_textContent           
                                        if(*(buffer++)) { 
                                            dsrc_v2_ivi_msgs::msg::TextLayoutComponentId _tmp_7345;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id.push_back(_tmp_7345);
                                        
                                            if(debug)
                                                logger->debug() << "|\033[38;5;94m006592\033[0m| ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id " << tools::green("present");
                                        }
                                        
                                        if(ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id.size() != 0) {
                                            // Field name: layout_component_id
                                            // Integer
                                            // UINT8  min(1) max(4) span(4) datatype(UInt8)
                                            uint8_t* _ext_flag_3331 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].
                                            
                                            if(debug) {
                                                logger->debug() << "|\033[38;5;94m006593\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].: " << int(*_ext_flag_3331);
                                            }
                                            
                                            if(*_ext_flag_3331) {
                                                uint8_t* _tmp_7347 = (uint8_t*) buffer++;
                                                
                                                if(*_tmp_7347) {
                                                    uint64_t* _tmp_7348 = (uint64_t*)buffer; buffer += 8;
                                                    __aux64__ = *_tmp_7348;
                                                    __aux64__ += INT64_MIN;
                                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value = __aux64__;
                                                }
                                                else
                                                {
                                                    uint32_t* _tmp_7348 = (uint32_t*) buffer; buffer += 4;
                                                    __aux64__ = *_tmp_7348;
                                                    __aux64__ += INT32_MIN;
                                                    ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value = __aux64__;
                                                }
                                            }
                                            else
                                            {
                                                uint8_t* _tmp_7346 = (uint8_t*) buffer++;
                                                __aux64__ = *_tmp_7346;
                                                __aux64__ += 1;
                                                ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value = __aux64__;
                                            
                                                if(debug) {
                                                    logger->debug() << "|\033[38;5;94m006594\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value) << 
                                                                 " ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value);
                                                }
                                                
                                                // ******************* MIN validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                                    return false;
                                                }
                                                // ******************* MAX validator *******************
                                                if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].layout_component_id[0].value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                                    return false;
                                                }
                                                
                                            }
                                        }
                                        
                                        // Field name: language
                                        // BitString
                                        // BIT_STRING  min(10) max(10) span(1)
                                        uint8_t* _tmp_7349 = (uint8_t*)buffer;
                                        __aux64__ = *_tmp_7349 + 10;
                                        buffer += 1;
                                        
                                        if(debug)
                                            logger->debug() << "|\033[38;5;94m006595\033[0m| ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].language.value: " << __aux64__;
                                        
                                        int _if__tmp_7349 = __aux64__;
                                        for(int m = 0; m < _if__tmp_7349; m++) {
                                            uint8_t __c__;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].language.values.push_back(__c__);
                                            uint8_t* __b__ = (uint8_t*)buffer++;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].language.values[m] = (*__b__ == 1);
                                        }
                                        
                                        // ******************* MIN validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].language.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                            return false;
                                        }
                                        // ******************* MAX validator *******************
                                        if(VALIDATORS_ENABLED && __aux64__ > 10) {
                                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].language.value' " << (__aux64__) << " exceeds max allowable (10); message dropped.";
                                            return false;
                                        }
                                        
                                        // Field name: text_content
                                        // Text
                                        
                                        // Indefinite length
                                        // TEXT  min(0) max(16383) span(16384)
                                        uint16_t* _tmp_7350 = (uint16_t*)buffer;
                                        __aux64__ = *_tmp_7350;
                                        buffer += 2;
                                        
                                        int _if__tmp_7350 = __aux64__;
                                        for(int n = 0; n < _if__tmp_7350; n++) {  // Text_textContent
                                            char* __tmp__ = (char*)buffer++;
                                            ros->ivi.optional[0].elements[y].tc[0].elements[g].text[0].elements[l].text_content.value += *__tmp__;
                                        }
                                }
                            }
                            
                            // Field name: data
                            // OctetString
                            // Indefinite length
                            // min(0) max(16383) span(16384)
                            uint16_t* _tmp_7351 = (uint16_t*)buffer;
                            buffer += 2;
                            __aux64__ = *_tmp_7351;
                            
                            int _if__tmp_7351 = __aux64__;
                            for(int o = 0; o < _if__tmp_7351; o++) {
                                int8_t* __n__ = (int8_t*)buffer++;
                                ros->ivi.optional[0].elements[y].tc[0].elements[g].data.values.push_back(*__n__);
                            }
                            if(*_ext_flag_3320) { // from ros->ivi.optional[0].elements[y].tc[0].elements[g]. 
                                uint8_t* _tmp_7352 = (uint8_t*) buffer++;  // number of extensions
                                bool _array_77[*_tmp_7352];
                                
                                if(debug)
                                    logger->debug() << "|\033[38;5;94m006596\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].tc[0].elements[g].: " << static_cast<unsigned int>(*_tmp_7352);
                                
                                // Extensions bytemap
                                for(int i = 0; i < *_tmp_7352; i++)
                                    _array_77[i] = (*buffer++) != 0;
                                
                                // Discarding unknown OpenType containers
                                for(int i = 0; i < *_tmp_7352; i++) {
                                    uint16_t* _tmp_7353 = (uint16_t*)buffer;  // OpenType length
                                    buffer += 2;
                                
                                    if(debug) {
                                    }
                                
                                    for(int i = 0; i < *_tmp_7353; i++)
                                        buffer++;
                                }
                                
                            }
                    }
                }
                else if(_choice_200 == 4)  // CHOICE IviContainer  fieldName(lac)
                {
                    dsrc_v2_ivi_msgs::msg::LayoutContainer _tmp_7354;
                    ros->ivi.optional[0].elements[y].lac.push_back(_tmp_7354);
                
                        // LayoutContainer  SEQUENCE
                            //  layoutId         LayoutContainer_layoutId             
                            //  height           LayoutContainer_height             OPTIONAL  
                            //  width            LayoutContainer_width              OPTIONAL  
                            //  layoutComponents LayoutContainer_layoutComponents     
                            //  ...
                        uint8_t* _ext_flag_3332 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].lac[0].
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m006597\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].lac[0].: " << int(*_ext_flag_3332);
                        }
                        
                        if(*(buffer++)) { 
                            dsrc_v2_ivi_msgs::msg::LayoutContainerHeight _tmp_7355;
                            ros->ivi.optional[0].elements[y].lac[0].height.push_back(_tmp_7355);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m006598\033[0m| ros->ivi.optional[0].elements[y].lac[0].height " << tools::green("present");
                        }
                        if(*(buffer++)) { 
                            dsrc_v2_ivi_msgs::msg::LayoutContainerWidth _tmp_7356;
                            ros->ivi.optional[0].elements[y].lac[0].width.push_back(_tmp_7356);
                        
                            if(debug)
                                logger->debug() << "|\033[38;5;94m006599\033[0m| ros->ivi.optional[0].elements[y].lac[0].width " << tools::green("present");
                        }
                        
                        // Field name: layout_id
                        // Integer
                        // UINT8  min(1) max(4) span(4) datatype(UInt8)
                        uint8_t* _ext_flag_3333 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_id.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m006600\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_id.: " << int(*_ext_flag_3333);
                        }
                        
                        if(*_ext_flag_3333) {
                            uint8_t* _tmp_7358 = (uint8_t*) buffer++;
                            
                            if(*_tmp_7358) {
                                uint64_t* _tmp_7359 = (uint64_t*)buffer; buffer += 8;
                                __aux64__ = *_tmp_7359;
                                __aux64__ += INT64_MIN;
                                ros->ivi.optional[0].elements[y].lac[0].layout_id.value = __aux64__;
                            }
                            else
                            {
                                uint32_t* _tmp_7359 = (uint32_t*) buffer; buffer += 4;
                                __aux64__ = *_tmp_7359;
                                __aux64__ += INT32_MIN;
                                ros->ivi.optional[0].elements[y].lac[0].layout_id.value = __aux64__;
                            }
                        }
                        else
                        {
                            uint8_t* _tmp_7357 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_7357;
                            __aux64__ += 1;
                            ros->ivi.optional[0].elements[y].lac[0].layout_id.value = __aux64__;
                        
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006601\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_id.value) << 
                                             " ivi.optional[0].elements[y].lac[0].layout_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_id.value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 4) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_id.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                                return false;
                            }
                            
                        }
                        
                        if(ros->ivi.optional[0].elements[y].lac[0].height.size() != 0) {
                            // Field name: height
                            // Integer
                            // UINT8  min(10) max(73) span(64) datatype(UInt8)
                            uint8_t* _tmp_7360 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_7360;
                            __aux64__ += 10;
                            ros->ivi.optional[0].elements[y].lac[0].height[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006602\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].height[0].value) << 
                                             " ivi.optional[0].elements[y].lac[0].height[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].height[0].value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].height[0].value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].height[0].value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                return false;
                            }
                        }
                        
                        if(ros->ivi.optional[0].elements[y].lac[0].width.size() != 0) {
                            // Field name: width
                            // Integer
                            // UINT16  min(10) max(265) span(256) datatype(UInt16)
                            uint8_t* _tmp_7361 = (uint8_t*) buffer++;
                            __aux64__ = *_tmp_7361;
                            __aux64__ += 10;
                            ros->ivi.optional[0].elements[y].lac[0].width[0].value = __aux64__;
                            
                            if(debug) {
                                logger->debug() << "|\033[38;5;94m006603\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].width[0].value) << 
                                             " ivi.optional[0].elements[y].lac[0].width[0].value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].width[0].value);
                            }
                            
                            // ******************* MIN validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].width[0].value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                return false;
                            }
                            // ******************* MAX validator *******************
                            if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].width[0].value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                return false;
                            }
                        }
                        
                        // Field name: layout_components
                        // SequenceOf
                        // Data Type UInt8
                        // SEQUENCE_OF  min(1) max(4) span(4)
                        uint8_t* _ext_flag_3334 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_components.
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m006604\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_components.: " << int(*_ext_flag_3334);
                        }
                        
                        int16_t* _tmp_7362 = (int16_t*)buffer;
                        buffer += 2;
                        __aux64__ = *_tmp_7362;
                        __aux64__ += 1;     // +min
                        
                        int _if__tmp_7362 = __aux64__;
                        
                        if(debug) {
                            logger->debug() << "|\033[38;5;94m006605\033[0m| SequenceOf ros->ivi.optional[0].elements[y].lac[0].layout_components. size: " << int(*_tmp_7362);
                        }
                        
                        // ******************* MIN validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ < 1) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                            return false;
                        }
                        // ******************* MAX validator *******************
                        if(VALIDATORS_ENABLED && __aux64__ > 4) {
                            logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.value' " << (__aux64__) << " exceeds max allowable (4); message dropped.";
                            return false;
                        }
                        
                        
                        for(int p = 0; p < _if__tmp_7362; p++) {
                            dsrc_v2_ivi_msgs::msg::LayoutComponent seqof_p;  // SEQUENCE
                            ros->ivi.optional[0].elements[y].lac[0].layout_components.elements.push_back(seqof_p);
                        
                                // LayoutComponent  SEQUENCE
                                    //  layoutComponentId LayoutComponent_layoutComponentId     
                                    //  height            LayoutComponent_height                
                                    //  width             LayoutComponent_width                 
                                    //  x                 LayoutComponent_x                     
                                    //  y                 LayoutComponent_y                     
                                    //  textScripting     LayoutComponent_textScripting         
                                
                                // Field name: layout_component_id
                                // Integer
                                // UINT8  min(1) max(8) span(8) datatype(UInt8)
                                uint8_t* _ext_flag_3335 = (uint8_t*) buffer++;  // Read ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006606\033[0m| Reading ext flag from ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.: " << int(*_ext_flag_3335);
                                }
                                
                                if(*_ext_flag_3335) {
                                    uint8_t* _tmp_7364 = (uint8_t*) buffer++;
                                    
                                    if(*_tmp_7364) {
                                        uint64_t* _tmp_7365 = (uint64_t*)buffer; buffer += 8;
                                        __aux64__ = *_tmp_7365;
                                        __aux64__ += INT64_MIN;
                                        ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value = __aux64__;
                                    }
                                    else
                                    {
                                        uint32_t* _tmp_7365 = (uint32_t*) buffer; buffer += 4;
                                        __aux64__ = *_tmp_7365;
                                        __aux64__ += INT32_MIN;
                                        ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value = __aux64__;
                                    }
                                }
                                else
                                {
                                    uint8_t* _tmp_7363 = (uint8_t*) buffer++;
                                    __aux64__ = *_tmp_7363;
                                    __aux64__ += 1;
                                    ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value = __aux64__;
                                
                                    if(debug) {
                                        logger->debug() << "|\033[38;5;94m006607\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value) << 
                                                     " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value);
                                    }
                                    
                                    // ******************* MIN validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ < 1) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value' " << (__aux64__) << " is less than allowable (1); message dropped.";
                                        return false;
                                    }
                                    // ******************* MAX validator *******************
                                    if(VALIDATORS_ENABLED && __aux64__ > 8) {
                                        logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].layout_component_id.value' " << (__aux64__) << " exceeds max allowable (8); message dropped.";
                                        return false;
                                    }
                                    
                                }
                                
                                // Field name: height
                                // Integer
                                // UINT8  min(10) max(73) span(64) datatype(UInt8)
                                uint8_t* _tmp_7366 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7366;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006608\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value) << 
                                                 " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].height.value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                    return false;
                                }
                                
                                // Field name: width
                                // Integer
                                // UINT16  min(10) max(265) span(256) datatype(UInt16)
                                uint8_t* _tmp_7367 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7367;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006609\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value) << 
                                                 " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].width.value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                    return false;
                                }
                                
                                // Field name: x
                                // Integer
                                // UINT16  min(10) max(265) span(256) datatype(UInt16)
                                uint8_t* _tmp_7368 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7368;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006610\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value) << 
                                                 " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 265) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].x.value' " << (__aux64__) << " exceeds max allowable (265); message dropped.";
                                    return false;
                                }
                                
                                // Field name: y
                                // Integer
                                // UINT8  min(10) max(73) span(64) datatype(UInt8)
                                uint8_t* _tmp_7369 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7369;
                                __aux64__ += 10;
                                ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006611\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value) << 
                                                 " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 10) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value' " << (__aux64__) << " is less than allowable (10); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 73) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].y.value' " << (__aux64__) << " exceeds max allowable (73); message dropped.";
                                    return false;
                                }
                                
                                // Field name: text_scripting
                                // Integer
                                // UINT8  min(0) max(1) span(2) datatype(UInt8)
                                uint8_t* _tmp_7370 = (uint8_t*) buffer++;
                                __aux64__ = *_tmp_7370;
                                ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value = __aux64__;
                                
                                if(debug) {
                                    logger->debug() << "|\033[38;5;94m006612\033[0m| " << tools::getTypeName(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value) << 
                                                 " ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value: " << static_cast<int>(ros->ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value);
                                }
                                
                                // ******************* MIN validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ < 0) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value' " << (__aux64__) << " is less than allowable (0); message dropped.";
                                    return false;
                                }
                                // ******************* MAX validator *******************
                                if(VALIDATORS_ENABLED && __aux64__ > 1) {
                                    logger->warning() << "Error: Value in 'ivi.optional[0].elements[y].lac[0].layout_components.elements[p].text_scripting.value' " << (__aux64__) << " exceeds max allowable (1); message dropped.";
                                    return false;
                                }
                        }
                        if(*_ext_flag_3332) { // from ros->ivi.optional[0].elements[y].lac[0]. 
                            uint8_t* _tmp_7371 = (uint8_t*) buffer++;  // number of extensions
                            bool _array_78[*_tmp_7371];
                            
                            if(debug)
                                logger->debug() << "|\033[38;5;94m006613\033[0m| Reading number of exts from ros->ivi.optional[0].elements[y].lac[0].: " << static_cast<unsigned int>(*_tmp_7371);
                            
                            // Extensions bytemap
                            for(int i = 0; i < *_tmp_7371; i++)
                                _array_78[i] = (*buffer++) != 0;
                            
                            // Discarding unknown OpenType containers
                            for(int i = 0; i < *_tmp_7371; i++) {
                                uint16_t* _tmp_7372 = (uint16_t*)buffer;  // OpenType length
                                buffer += 2;
                            
                                if(debug) {
                                }
                            
                                for(int i = 0; i < *_tmp_7372; i++)
                                    buffer++;
                            }
                            
                        }
                }
                else
                {
                    uint16_t* _tmp_7373 = (uint16_t*)buffer;  // OpenType length
                    buffer += 2 + int(*_tmp_7373);            // Ignoring opentype data
                }
            }
        }
	
	        return true;
        }
    }
}